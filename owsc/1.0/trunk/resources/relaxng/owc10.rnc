# -*- rnc -*-
   # RELAX NG Compact Syntax Grammar for the
   # OGC Context Conformance Test Classes (OGC 12-084)
   # A.1 Conformance Test Class Part 1: core 
   
   # This defines the conformance to the rules of ATOM according to OWC 
   # restrictions and to the rules of the owc:context classes 
   
   namespace local = ""
   namespace owc = "http://www.opengis.net/owc/1.0"
   namespace s = "http://www.ascc.net/xml/schematron"
   namespace dc="http://purl.org/dc/elements/1.1/" 
   namespace georss="http://www.georss.org/georss" 
   namespace atom = "http://www.w3.org/2005/Atom"
   
   # Redefine atom:feed to include new owc and dc elements
   atomFeedConstruct &=
                     owcDisplay?
                     & element dc:publisher { text }
                     & element dc:date { atomDateConstruct }?
                     & element georss:where { anyElement }?                    
                     
   # Redefine atom:entry to include new owc and dc elements
   atomEntryConstruct &= owcOffering?  
                      & element dc:publisher { text }?
                      & element dc:date { atomDateConstruct }?
                      & element georss:where { anyElement }?
                      & element owc:minScaleDenominator { xsd:float }?
                      & element owc:maxScaleDenominator { xsd:float }?

   # owc:offering  
   owcOffering = element owc:offering {
         attribute code { text },
         (owcOperation*
          & owcContent*
          & owcStyleSet*
          & extensionElement*)
      }
      
   # owcOperation 
   owcOperation = element owc:operation {
      attribute code { text },
      attribute method { "GET" | "POST" },
      attribute type { text }?,
      attribute href { text },
      (owcPayload?
      & owcResult?
      & extensionElement*)
   } 
   
   # owcPayload 
   owcPayload = element owc:payload {
      ( extensionElement* )
   }
    
   # owcPayload 
   owcResult = element owc:result {
      ( extensionElement* )
   } 
      
   # owcContent 
   owcContent = element owc:content {
      attribute type { text },
      attribute href { text },
      ( extensionElement* )
   } 
   
   # owcStyleSet 
   owcStyleSet = element owc:styleSet {
      attribute default { "0" | "1" } ?,
      (element owc:name { text }
       & element owc:title { text }
       & element owc:subtitle { text }?
       & element owc:legendURL { attribute type { text },
       				attribute href { text } }?
       & element owc:content { owcContent }?
       & extensionElement*)
   }   	   
   
   # owc:display  
   owcDisplay = element owc:display {      
      (element owc:pixelWidth { xsd:integer }?
       & element owc:pixelHeight { xsd:integer }?
       & element owc:pixelPerMM { xsd:integer }?)
       & extensionElement*
   }   
 
   
   
   include "rfc4287.rnc"{
   
      # Redefine the Simple Extension to exclude owc:* elements
      simpleExtensionElement = element * - (atom:* | owc:* | dc:publisher | dc:date |  georss:where) { text }

      # Redefine the Structured Extension to exclude owc:* elements
      structuredExtensionElement =
          element * - (atom:* | owc:* | dc:publisher | dc:date | georss:where) {
             (attribute * { text }+,(text|anyElement)*)
           | (attribute * { text }*, (text?, anyElement+, (text|anyElement)*))
          } 
      atomFeed =
      [
       s:rule [
        context = "atom:feed"
        s:assert [
          test = "atom:author or not(atom:entry[not(atom:author)])"
          "An atom:feed must have an atom:author unless all "
           ~ "of its atom:entry children have an atom:author."
        ]
       ]
      
       s:rule [
        context = "atom:feed"
        s:assert [
          test = "atom:category[@scheme='http://www.opengis.net/owc/specReference']"
          "An atom:feed must have an atom:category "
           ~ "with the context specification reference "
           ~ "identified with the scheme='http://www.opengis.net/owc/specReference'."
        ]
       ]
      ]
       element atom:feed { atomFeedConstruct }     
       
      atomEntry =
      [
      	 s:rule [
	    context = "atom:entry"
	    s:assert [
	       test = "atom:content"
	       "An atom:entry must have one atom:content MUST define a generic "
	       ~ "description of the content in a format understandable by mass "
	       ~ "market generic atom readers. Type equal to 'html' is recommended."
	    ]
	 ]
	 
	 s:rule [
	    context = "atom:entry"
	    s:assert [
	       test = "atom:link[@rel='alternate'] "
	       ~ "or atom:link[not(@rel)] "
	       ~ "or atom:content"
	       "An atom:entry must have at least one atom:link element "
	       ~ "with a rel attribute of 'alternate' "
	       ~ "or an atom:content."
	    ]
	 ]
	 s:rule [
	    context = "atom:entry"
	    s:assert [
	       test = "atom:author or "
	       ~ "../atom:author or atom:source/atom:author"
	       "An atom:entry must have an atom:author "
	       ~ "if its feed does not."
	    ]
	 ]
      ]
      element atom:entry { atomEntryConstruct } 
   }
   # EOF
   	
