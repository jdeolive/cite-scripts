<?xml version="1.0" encoding="utf-8"?>
<ctl:package 
    xmlns:ctl="http://www.occamlab.com/ctl" 
    xmlns:ocp="http://www.occamlab.com/te/parsers" 
    xmlns:tep="http://teamengine.sourceforge.net/parsers" 
    xmlns:saxon="http://saxon.sf.net/" 
    xmlns:xi="http://www.w3.org/2001/XInclude" 
    xmlns:xlink="http://www.w3.org/1999/xlink" 
    xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
    xmlns:sps="http://www.opengis.net/sps/1.0" 
    xmlns:ows="http://www.opengis.net/ows"
    xmlns:sml="http://www.opengis.net/sensorML/1.0"
    xmlns:sml1="http://www.opengis.net/sensorML/1.0.1"
    xmlns:tml="http://www.opengis.net/tml" 
    xmlns:gml="http://www.opengis.net/gml" 
    xmlns="http://www.w3.org/1999/xhtml" 
    xmlns:db5="http://docbook.org/ns/docbook" 
    xmlns:parsers="http://www.occamlab.com/te/parsers" 
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:spsFunctions="https://cite.opengeospatial.org/sps-1.0/src/ctl/functions.xml"
    xmlns:swe="http://www.opengis.net/swe/1.0"
    xmlns:spsTesting="https://cite.opengeospatial.org/spsTesting"
    xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
    xmlns:owsTests="https://www.cite.opengeospatial.org/ows-1.0/tests"
>
  
  <ctl:suite name="sps:suite">
    <!--NOTE: Don't forget to update the TARGET_NAMESPACE_URI and docs/SPS%201.0%20ATS.html placeholder values-->
    <ctl:title>SPS 1.0 Compliance Test Suite</ctl:title>
    <ctl:description>Verifies that an SPS 1.0 implementation complies with the SPS 1.0 specification.</ctl:description>
    <ctl:link>docs/sps/1.0/</ctl:link>
    <ctl:starting-test>sps:Main</ctl:starting-test>
  </ctl:suite>
  <ctl:test name="sps:Main">
    <ctl:assertion>The IUT satisfies all applicable assertions.</ctl:assertion>
    <ctl:code>
      <!--
                1.)  Prompt the user to provide the url for an SPS implementation.
                2.)  Send a request to the provided url to determine if there is a response
                3.)  If there is a response, then begin executing tests, else fail.
                TODO:  Add notes section
            -->
        <ctl:message>**********************************************************************</ctl:message>
        <ctl:message>Testing started at:  <xsl:value-of select="current-dateTime()" /></ctl:message>
        <ctl:message>**********************************************************************</ctl:message>
        <xsl:variable name="form-values">
            <ctl:form height="640" width="800">
               <body>
                  <h2>Compliance Test Suite for Sensor Planning Service (SPS) 1.0</h2>
                  <!--<blockquote>
                  <h3>
                    NOTES:
                  </h3>
                  <textarea rows="5" cols="80" readonly="true">
                    <xsl:value-of select="unparsed-text('Readme.txt')" />
                  </textarea>
                  </blockquote>-->
                  <p>
                  Please provide a URL from which a Capabilities document can 
                  be retrieved. Modify the URL template below to specify the 
                  location of an OGC SPS 1.0 implementation to be tested.
                  </p>
                    <blockquote>
                     <table border="1" padding="4" bgcolor="#99ccff">
                        <tr>
                           <td align="left"><b>Service URL:</b></td>                        
                           <td align="center">
                              <input name="service-url" size="128" 
                              type="text" 
                              value="http://hostname:port/path"/>
                           </td>
                        </tr>
                     </table>
                    </blockquote>
                  <input type="submit" value="Start"/>
               </body>
            </ctl:form>
         </xsl:variable>

		<!-- Get user input:  Get the value of the SPS URL that the user supplies -->
		<xsl:variable name="sps.service.get.url" select="$form-values/values/value[@key='service-url']"/>
        <ctl:message>Executing tests on the SPS implementation found at the following URL:  <xsl:value-of select="$sps.service.get.url" /></ctl:message>
        <!--Call each test passing the capabilities URL as the parameter-->
        <ctl:call-test name="sps:ows-main">
            <ctl:with-param name="serviceURL" select="$sps.service.get.url" />
        </ctl:call-test>
        <ctl:call-test name="sps:general-main">
            <ctl:with-param name="serviceURL" select="$sps.service.get.url" />
        </ctl:call-test>
        <ctl:call-test name="sps:core-main">
            <ctl:with-param name="serviceURL" select="$sps.service.get.url" />
        </ctl:call-test>
    </ctl:code>
  </ctl:test>
  <ctl:package>
    <ctl:test name="sps:ows-main">
      <ctl:param name="serviceURL" />
      <ctl:assertion>All assertions for "ows" conformance are satisfied.</ctl:assertion>
      <ctl:comment>Test driver for the ows module.</ctl:comment>
      <ctl:link title="1. OWS">docs/SPS%201.0%20ATS.html#ows</ctl:link>
      <ctl:code>
        <ctl:message>***************************</ctl:message>
        <ctl:message>Running OWS Common Tests...</ctl:message>
        <ctl:message>***************************</ctl:message>
        <ctl:call-test name="owsTests:ows-main">
            <ctl:with-param name="serviceURL" select="$serviceURL"/>
            <ctl:with-param name="serviceType" select="string('SPS')"/>
            <ctl:with-param name="serviceVersion" select="string('1.0.0')" />
            <ctl:with-param name="capabilitiesRootElementName" select="string('Capabilities')" />
            <ctl:with-param name="capabilitiesResponseSchemaLocation">
                <ctl:call-function name="spsFunctions:getSchemaLocation">
                    <ctl:with-param name="schemaName" select="string('spsGetCapabilities.xsd')" />
                </ctl:call-function>
            </ctl:with-param>
            <ctl:with-param name="capabilitiesResponseSchemaType" select="string('resource')" />
            <ctl:with-param name="capabilitiesResponseContentType" select="string('text/xml')" />
            <ctl:with-param name="exceptionReportSchemaLocation">
                <ctl:call-function name="spsFunctions:getSchemaLocation">
                    <ctl:with-param name="schemaName" select="string('owsExceptionReport.xsd')" />
                </ctl:call-function>
            </ctl:with-param>
            <ctl:with-param name="exceptionReportSchemaType" select="string('resource')" />
        </ctl:call-test>
      </ctl:code>
    </ctl:test>
    
  </ctl:package>
  <ctl:package>
    <ctl:test name="sps:general-main">
      <ctl:param name="serviceURL" />
      <ctl:assertion>All assertions for "general" conformance are satisfied.</ctl:assertion>
      <ctl:comment>Test driver for the general module.</ctl:comment>
      <ctl:link title="2. General">docs/SPS%201.0%20ATS.html#general</ctl:link>
      <ctl:code>
        <ctl:message>****************************</ctl:message>
        <ctl:message>Running General SPS Tests...</ctl:message>
        <ctl:message>****************************</ctl:message>
        <ctl:call-test name="sps:general-SPS.General-InvalidRequest.1">
          <ctl:with-param name="serviceURL" select="$serviceURL" />
        </ctl:call-test>
        <ctl:message>**********************************************************************</ctl:message>
        <ctl:call-test name="sps:general-SPS.General-ValidResponse.1">
          <ctl:with-param name="responseDocument" select="$serviceURL" />
        </ctl:call-test>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:general-SPS.General-InvalidRequest.1">
      <ctl:param name="serviceURL" />
      <ctl:assertion>Sending a request that is non-conformant to a schema associated with an SPS operation causes the server to return a valid error report message with an exceptionCode value of InvalidRequest.</ctl:assertion>
      <ctl:comment>Send several test documents that are invalid according to the schemas associated with some of the SPS operations (i.e. the mandatory operations). Pass if the service returns a valid exception message with an exceptionCode value of InvalidRequest; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that an invalid request produces an appropriate response from the server.">docs/SPS%201.0%20ATS.html#SPS.General-InvalidRequest</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  Issue several invalid request documents to the service.
                    2.)  Validate the response against the ExceptionReport schema.
                    3.)  If the response validates, then check that the exceptionCode value is "InvalidRequest"
                -->
        <ctl:message>Issuing an invalid request to:  <xsl:value-of select="$serviceURL" /></ctl:message>
        <!--<xsl:variable name="body" select="string('Test')" />-->
        <xsl:variable name="invalidRequestResponse">
                <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <Submit xmlns="http://www.opengis.net/sps/1.0"/>
                    </ctl:body>
                    <ctl:call-function name="spsFunctions:validateExceptionReport" />
                </ctl:request>
        </xsl:variable>
        <ctl:message>The server returned the following response:  "<xsl:value-of select="$invalidRequestResponse/*" />"</ctl:message>
        <xsl:choose>
            <xsl:when test="not($invalidRequestResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response to an invalid request, or the response from the server was not a valid exception report.  The response from the server was:  "<xsl:value-of select="$invalidRequestResponse/*" />"</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($invalidRequestResponse)" /></ctl:message>
                <ctl:message>Checking the validity of the response to an invalid request.</ctl:message>
                <xsl:variable name="isCorrect">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$invalidRequestResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
                        <ctl:with-param name="locatorToCheck" select="string('*')" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                <xsl:if test="not(xsd:boolean($isCorrect))">
                    <ctl:message>FAILURE:  The response to an invalid request was expected to be an exception report with an exceptionCode of "InvalidRequest" and a locator value containing the validation issue.  The returned exception report was:  "<xsl:value-of select="$invalidRequestResponse/*" />"</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:general-SPS.General-ValidResponse.1">
      <ctl:param name="responseDocument" />
      <ctl:assertion>A response is a valid response for the SPS.  This general assertion should be tested by all other tests.</ctl:assertion>
      <ctl:comment>Tested through other tests.</ctl:comment>
      <ctl:link title="Verify that a response entity is schema-valid">docs/SPS%201.0%20ATS.html#SPS.General-ValidResponse</ctl:link>
      <ctl:code>
        <ctl:message>This general assertion is tested by all other tests, so there is nothing specific to test now.</ctl:message>
      </ctl:code>
    </ctl:test>
  </ctl:package>
  <ctl:package>
    <ctl:test name="sps:core-main">
      <ctl:param name="serviceURL" />
      <ctl:assertion>All assertions for "core" conformance are satisfied.</ctl:assertion>
      <ctl:comment>Test driver for the core module.</ctl:comment>
      <ctl:link title="3. Core">docs/SPS%201.0%20ATS.html#core</ctl:link>
      <ctl:code>
        <ctl:message>*********************************************</ctl:message>
        <ctl:message>Running SPS specific GetCapabilities tests...</ctl:message>
        <ctl:message>*********************************************</ctl:message>
        <ctl:call-test name="sps:core-SPS.GetCapabilities-KVPRequestParameterHandling.1">
          <ctl:with-param name="serviceURL" select="$serviceURL" />
        </ctl:call-test>
        <ctl:message>**********************************************************************</ctl:message>
        <ctl:call-test name="sps:core-SPS.GetCapabilities-KVPRequestServiceParameterHandling.1">
          <ctl:with-param name="serviceURL" select="$serviceURL" />
        </ctl:call-test>
        <ctl:message>**********************************************************************</ctl:message>
        <ctl:call-test name="sps:core-SPS.GetCapabilities-KVPRequestRequestParameterHandling.1">
          <ctl:with-param name="serviceURL" select="$serviceURL" />
        </ctl:call-test>
        <ctl:message>Issuing a valid GetCapabilities request to <xsl:value-of select="$serviceURL" /></ctl:message>
              <xsl:variable name="getCapabilitiesResponse">
                <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                    </ctl:url>
                    <ctl:method>get</ctl:method>
                    <ctl:param name="request">GetCapabilities</ctl:param>
                    <ctl:param name="service">SPS</ctl:param>
                    <!--Parser to get response-->
                    <ctl:call-function name="spsFunctions:validateGetCapabilitiesResponse" />
                </ctl:request>
              </xsl:variable>
              <ctl:message>The server responded to a valid GetCapabilities request with the following message:  <xsl:value-of select="$getCapabilitiesResponse/*" /></ctl:message>
              <xsl:choose>
                <xsl:when test="not($getCapabilitiesResponse/*)">
                    <ctl:message>FAILURE:  The server did not return a response to a valid GetCapabilities request, or the response was not a valid SPS Capabilities document.</ctl:message>
                    <ctl:fail />
                </xsl:when>
                <xsl:otherwise>
                    <!--Check for mandatory operations-->
                    <ctl:message>**********************************************************************</ctl:message>
                    <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseOperationMetadataMandatoryOperations.1">
                        <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                    </ctl:call-test>
                    <!--Check for optional operations-->
                    <ctl:message>**********************************************************************</ctl:message>
                    <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseOperationMetadataOptionalOperations.1">
                        <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                    </ctl:call-test>
                    <!--Check for valid SensorOffering elements-->
                    <ctl:message>**********************************************************************</ctl:message>
                    <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseContentsSensorOfferings.1">
                        <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                    </ctl:call-test>
                    <!--Check for valid SensorDefinition elements-->
                    <ctl:message>**********************************************************************</ctl:message>
                    <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseContentsSensorOfferingsValidSensorDefinition.1">
                        <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                    </ctl:call-test>
                    <!--Check for valid PhenomenonOffering elements-->
                    <ctl:message>**********************************************************************</ctl:message>
                    <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseContentsPhenomenonOfferings.1">
                        <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                    </ctl:call-test>
                    
                    <ctl:message>*****************************************************************</ctl:message>
                    <ctl:message>The following URLs will be used for SPS operation specific tests:</ctl:message>
                    <ctl:message>*****************************************************************</ctl:message>
                    <!--Get the DescribeTasking URL-->
                    <xsl:variable name="describeTaskingURL">
                        <xsl:value-of select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='DescribeTasking']/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
                    </xsl:variable>
                    <ctl:message>DescribeTasking URL:  <xsl:value-of select="$describeTaskingURL" /></ctl:message>
                    <!--Get the Submit URL-->
                    <xsl:variable name="submitURL">
                        <xsl:value-of select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='Submit']/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
                    </xsl:variable>
                    <ctl:message>Submit URL:  <xsl:value-of select="$submitURL" /></ctl:message>
                    <!--Get the DescribeResultAccess URL-->
                    <xsl:variable name="describeResultAccessURL">
                        <xsl:value-of select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='DescribeResultAccess']/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
                    </xsl:variable>
                    <ctl:message>DescribeResultAccess URL:  <xsl:value-of select="$describeResultAccessURL" /></ctl:message>
                    
                    <!--Execute DescribeTasking tests-->
                    <xsl:if test="string-length(normalize-space($describeTaskingURL))>0">
                        <ctl:message>********************************</ctl:message>
                        <ctl:message>Running DescribeTasking tests...</ctl:message>
                        <ctl:message>********************************</ctl:message>
                        <ctl:call-test name="sps:core-SPS.DescribeTasking-RequestInvalidSensorIDs.1">
                            <ctl:with-param name="describeTaskingURL" select="$describeTaskingURL" />
                        </ctl:call-test>
                        <ctl:message>**********************************************************************</ctl:message>
                        <ctl:call-test name="sps:core-SPS.DescribeTasking-RequestNullSensorID.1">
                          <ctl:with-param name="describeTaskingURL" select="$describeTaskingURL" />
                        </ctl:call-test>
                        <ctl:message>**********************************************************************</ctl:message>
                        <ctl:call-test name="sps:core-SPS.DescribeTasking-ResponseMain.1">
                            <ctl:with-param name="describeTaskingURL" select="$describeTaskingURL" />
                            <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                        </ctl:call-test>
                    </xsl:if>
                                        
                    <!--Execute Submit tests-->
                    <xsl:if test="string-length(normalize-space($submitURL))>0">
                        <ctl:message>***********************</ctl:message>
                        <ctl:message>Running Submit tests...</ctl:message>
                        <ctl:message>***********************</ctl:message>
                        <ctl:call-test name="sps:core-SPS.Submit-RequestMain.1">
                            <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                            <ctl:with-param name="describeTaskingURL" select="$describeTaskingURL" />
                            <ctl:with-param name="submitURL" select="$submitURL" />
                            <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                            <ctl:with-param name="allowUserSpecifiedTimeFrame" select="false()" />
                        </ctl:call-test>
                    </xsl:if>
                    
                    <!--Execute DescribeResultAccess tests-->                    
                    <xsl:if test="string-length(normalize-space($describeResultAccessURL))>0">
                        <ctl:message>*************************************</ctl:message>
                        <ctl:message>Running DescribeResultAccess tests...</ctl:message>
                        <ctl:message>*************************************</ctl:message>
                        <ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestNullSensorID.1">
                            <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                        </ctl:call-test>
                        <ctl:message>**********************************************************************</ctl:message>
                        <ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestInvalidSensorID.1">
                          <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                        </ctl:call-test>
                        <ctl:message>**********************************************************************</ctl:message>
                        <ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestNullTaskID.1">
                          <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                        </ctl:call-test>
                        <ctl:message>**********************************************************************</ctl:message>
                        <ctl:call-test name="sps:core-SPS.DescribeResultAccess-RequestInvalidTaskID.1">
                          <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                        </ctl:call-test>
                        <ctl:message>**********************************************************************</ctl:message>
                        <ctl:call-test name="sps:core-SPS.DescribeResultAccess-ResponseMain.1">
                            <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                            <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                        </ctl:call-test>
                    </xsl:if>
                </xsl:otherwise>
              </xsl:choose>
              
              <ctl:message>**********************************************************************</ctl:message>
              <ctl:message>Testing completed at:  <xsl:value-of select="current-dateTime()" /></ctl:message>
              <ctl:message>**********************************************************************</ctl:message>
      </ctl:code>
    </ctl:test>
    <!--GetCapabilities tests-->
    <ctl:test name="sps:core-SPS.GetCapabilities-KVPRequestParameterHandling.1">
      <ctl:param name="serviceURL" />
      <ctl:assertion>The server returns a valid error report message with an exception code of MissingParameterValue when mandatory parameters are missing from the request.</ctl:assertion>
      <ctl:comment>Pass if the exception report is valid and the exceptionCode parameter contains MissingParameterValue; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server handles missing parameters correctly.">docs/SPS%201.0%20ATS.html#SPS.GetCapabilities-KVPRequestParameterHandling</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  HTTP GET request missing the service and request parameters
                    2.)  HTTP GET request missing the service parameter
                    3.)  HTTP GET request missing the request parameter
                -->
        <!--GetCapabilities request with no service and no request parameter-->
        <ctl:message>Issuing a GetCapabilities request with no service parameter and no request parameter provided.</ctl:message>
        <xsl:variable name="requestNoServiceNoRequest">
            <ctl:request>
                <ctl:url>
                    <xsl:value-of select="$serviceURL" />
                </ctl:url>
                <ctl:method>get</ctl:method>
                <!--Parser to get response-->
                <ctl:call-function name="spsFunctions:validateExceptionReport" />
            </ctl:request>
        </xsl:variable>
        <ctl:message>The server returned the following response:  <xsl:value-of select="$requestNoServiceNoRequest/*" /></ctl:message>
        <ctl:message>Issuing a GetCapabilities request with no service parameter provided.</ctl:message>
        <!--GetCapabilities request with no service parameter-->
        <xsl:variable name="requestNoService">
            <ctl:request>
                <ctl:url>
                    <xsl:value-of select="$serviceURL" />
                </ctl:url>
                <ctl:method>get</ctl:method>
                <ctl:param name="request">GetCapabilities</ctl:param>
                <!--Parser to get response-->
                <ctl:call-function name="spsFunctions:validateExceptionReport" />
            </ctl:request>
        </xsl:variable>
        <ctl:message>The server returned the following response:  <xsl:value-of select="$requestNoService/*" /></ctl:message>
        <ctl:message>Issuing a GetCapabilities request with no request parameter provided.</ctl:message>
        <!--GetCapabilities request with no request parameter-->
        <xsl:variable name="requestNoRequest">
            <ctl:request>
                <ctl:url>
                    <xsl:value-of select="$serviceURL" />
                </ctl:url>
                <ctl:method>get</ctl:method>
                <ctl:param name="service">SPS</ctl:param>
                <!--Parser to get response-->
                <ctl:call-function name="spsFunctions:validateExceptionReport" />
            </ctl:request>
        </xsl:variable>
        <!--Check the responses to each of the above requests to ensure that they are valid-->
        <ctl:message>The server returned the following response:  <xsl:value-of select="$requestNoRequest/*" /></ctl:message>
        <ctl:message><xsl:text disable-output-escaping="yes">{$requestNoRequest}</xsl:text></ctl:message>
        <xsl:choose>
            <xsl:when test="not($requestNoServiceNoRequest/*) or not($requestNoService/*) or not($requestNoRequest/*)">
                <ctl:message>FAILURE:  The server did not return responses to the GetCapabilities requests in this test, or the responses to these requests were not valid exceptions.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <xsl:if test="$requestNoServiceNoRequest/*">
                    <ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($requestNoServiceNoRequest)" /></ctl:message>
                    <ctl:message>Checking the validity of the response to a GetCapabilities request with no service and no request parameters.</ctl:message>
                    <xsl:variable name="isCorrect1">
                        <ctl:call-function name="spsFunctions:checkExceptionReport">
                            <ctl:with-param name="exceptionReport" select="$requestNoServiceNoRequest" />
                            <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                            <ctl:with-param name="locatorToCheck" select="string('REQUEST')" />
                        </ctl:call-function>
                    </xsl:variable>
                    <xsl:variable name="isCorrect2">
                        <ctl:call-function name="spsFunctions:checkExceptionReport">
                            <ctl:with-param name="exceptionReport" select="$requestNoServiceNoRequest" />
                            <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                            <ctl:with-param name="locatorToCheck" select="string('SERVICE')" />
                        </ctl:call-function>
                    </xsl:variable>
                    <xsl:variable name="isCorrect" select="$isCorrect1 or $isCorrect2" />
                    <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                    <xsl:if test="not(xsd:boolean($isCorrect))">
                        <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetCapabilities request with no request and no service parameters specified.  The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "SERVICE" or "REQUEST".  "<xsl:value-of select="$requestNoServiceNoRequest" />" was returned instead.</ctl:message>
                        <ctl:fail />
                    </xsl:if>
                </xsl:if>
                <xsl:if test="$requestNoService/*">
                    <ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($requestNoService)" /></ctl:message>
                    <ctl:message>Checking the validity of the response to a GetCapabilities request with no service parameter.</ctl:message>
                    <xsl:variable name="isCorrect">
                        <ctl:call-function name="spsFunctions:checkExceptionReport">
                            <ctl:with-param name="exceptionReport" select="$requestNoService" />
                            <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                            <ctl:with-param name="locatorToCheck" select="string('Service')" />
                        </ctl:call-function>
                    </xsl:variable>
                    <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                    <xsl:if test="not(xsd:boolean($isCorrect))">
                        <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetCapabilities request with no service parameter specified.  The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "SERVICE".  "<xsl:value-of select="$requestNoService" />" was returned instead.</ctl:message>
                        <ctl:fail />
                    </xsl:if>
                </xsl:if>
                <xsl:if test="$requestNoRequest/*">
                    <ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($requestNoRequest)" /></ctl:message>
                    <ctl:message>Checking the validity of the response to a GetCapabilities request with no request parameter.</ctl:message>
                    <xsl:variable name="isCorrect">
                        <ctl:call-function name="spsFunctions:checkExceptionReport">
                            <ctl:with-param name="exceptionReport" select="$requestNoRequest" />
                            <ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
                            <ctl:with-param name="locatorToCheck" select="string('Request')" />
                        </ctl:call-function>
                    </xsl:variable>
                    <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                    <xsl:if test="not(xsd:boolean($isCorrect))">
                        <ctl:message>FAILURE:  The server did not return the expected exception report response to a GetCapabilities request with no request parameter specified.  The response was expected to be an ExceptionReport with an exceptionCode of "MissingParameterValue" and a locator of "REQUEST".  "<xsl:value-of select="$requestNoRequest" />" was returned instead.</ctl:message>
                        <ctl:fail />
                    </xsl:if>
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.GetCapabilities-KVPRequestServiceParameterHandling.1">
      <ctl:param name="serviceURL" />
      <ctl:assertion>The server returns a valid error report message with an exception code of InvalidParameterValue when the service key value is not SPS. </ctl:assertion>
      <ctl:comment>Pass if the exception report is valid and the exceptionCode parameter contains InvalidParameterValue; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server handles invalid service key values correctly.">docs/SPS%201.0%20ATS.html#SPS.GetCapabilities-KVPRequestServiceParameterHandling</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  HTTP GET request with a service parameter that contains a value other than SPS
                -->
        <xsl:variable name="invalidServiceParameterValue" select="string('kaldsfjlksdajf')" />
        <ctl:message>Issuing a GetCapabilities request with an invalid service value of "<xsl:value-of select="$invalidServiceParameterValue" />"</ctl:message>
        <xsl:variable name="requestInvalidServiceKeyValue">
            <ctl:request>
                <ctl:url>
                    <xsl:value-of select="$serviceURL" />
                </ctl:url>
                <ctl:method>get</ctl:method>
                <ctl:param name="request">GetCapabilities</ctl:param>
                <ctl:param name="service"><xsl:value-of select="$invalidServiceParameterValue" /></ctl:param>
                <!--Parser to get response-->
                <ctl:call-function name="spsFunctions:validateExceptionReport" />
            </ctl:request>
        </xsl:variable>
        <ctl:message>The server returned the following response:  <xsl:value-of select="$requestInvalidServiceKeyValue/*" /></ctl:message>
        <xsl:choose>
            <xsl:when test="not($requestInvalidServiceKeyValue/*)">
                <ctl:message>FAILURE:  The server did not return or a response, or the response was not a valid exception report.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($requestInvalidServiceKeyValue)" /></ctl:message>
                <ctl:message>Checking the validity of the response to a GetCapabilities request with an invalid service value.</ctl:message>
                <xsl:variable name="isCorrect">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$requestInvalidServiceKeyValue" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('Service')" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                <xsl:if test="not(xsd:boolean($isCorrect))">
                    <ctl:message>FAILURE:  The response to a GetCapabilities request with an invalid service parameter (<xsl:value-of select="$invalidServiceParameterValue" />) does not match the expected response.  The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" and a locator value of "SERVICE".</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.GetCapabilities-KVPRequestRequestParameterHandling.1">
      <ctl:param name="serviceURL" />
      <ctl:assertion>The server returns a valid error report message with an exception code of InvalidParameterValue or OperationNotSupported when the request key value is not GetCapabilities. </ctl:assertion>
      <ctl:comment>Pass if the exception report is valid and the exceptionCode parameter contains InvalidParameterValue or OperationNotSupported; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server handles invalid request key values correctly.">docs/SPS%201.0%20ATS.html#SPS.GetCapabilities-KVPRequestRequestParameterHandling</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  HTTP GET request with a request parameter that contains a value other than GetCapabilities
                -->
        <xsl:variable name="invalidRequestParameterValue" select="string('lkasjflksadjflkjasdf')" />
        <ctl:message>Issuing a GetCapabilities request with an invalid request value of "<xsl:value-of select="$invalidRequestParameterValue" />"</ctl:message>
        <xsl:variable name="requestInvalidRequestKeyValue">
            <ctl:request>
                <ctl:url>
                    <xsl:value-of select="$serviceURL" />
                </ctl:url>
                <ctl:method>get</ctl:method>
                <ctl:param name="request"><xsl:value-of select="$invalidRequestParameterValue" /></ctl:param>
                <ctl:param name="service">SPS</ctl:param>
                <!--Parser to get response-->
                <ctl:call-function name="spsFunctions:validateExceptionReport" />
            </ctl:request>
        </xsl:variable>
        <ctl:message>The server returned the following response:  <xsl:value-of select="$requestInvalidRequestKeyValue/*" /></ctl:message>
        <xsl:choose>
            <xsl:when test="not($requestInvalidRequestKeyValue/*)">
                <ctl:message>FAILURE:  The server did not return or a response, or the response was not a valid exception report.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($requestInvalidRequestKeyValue)" /></ctl:message>
                <ctl:message>Checking the validity of the response to a GetCapabilities request with an invalid request value.</ctl:message>
                <xsl:variable name="isCorrect1">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$requestInvalidRequestKeyValue" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('Request')" />
                    </ctl:call-function>
                </xsl:variable>
                <xsl:variable name="isCorrect2">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$requestInvalidRequestKeyValue" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('OperationNotSupported')" />
                        <ctl:with-param name="locatorToCheck" select="$invalidRequestParameterValue" />
                    </ctl:call-function>
                </xsl:variable>
                <xsl:variable name="isCorrect" select="$isCorrect1 or $isCorrect2" />
                <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                <xsl:if test="not(xsd:boolean($isCorrect))">
                    <ctl:message>FAILURE:  The response to a GetCapabilities request with an invalid request parameter (<xsl:value-of select="$invalidRequestParameterValue" />) does not match the expected response.  The response was expected to be an ExceptionReport with an exceptionCode of "InvalidParameterValue" or "OperationNotSupported".</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.GetCapabilities-ResponseMain.1">
        <ctl:param name="serviceURL" />
        <ctl:assertion>All assertions related to an SPS GetCapabilities response are valid.</ctl:assertion>
        <ctl:comment>Executes a GetCapabilities request and checks the response for validity</ctl:comment>
        <ctl:link></ctl:link>
        <ctl:code>
            <!--PUT TEST CODE HERE-->
            <!--
                            1.)  Valid HTTP GET request for GetCapabilities.  Store response in a variable.
                            2.) Validate response against the GetCapabilities schema.  Call sps:general-SPS.General-ValidResponse.1
                            3.) Loop through the operations listed in the OperationsMetadata section of the GetCapabilities response and store the URL for each operation (if it exists) for use in later tests.  Fail if one of the mandatory operations is missing.
                        -->
              <ctl:message>Issuing a valid GetCapabilities request to <xsl:value-of select="$serviceURL" /></ctl:message>
              <xsl:variable name="getCapabilitiesResponse">
                <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$serviceURL" />
                    </ctl:url>
                    <ctl:method>get</ctl:method>
                    <ctl:param name="request">GetCapabilities</ctl:param>
                    <ctl:param name="service">SPS</ctl:param>
                    <!--Parser to get response-->
                    <ctl:call-function name="spsFunctions:validateGetCapabilitiesResponseNoExceptionReport" />
                </ctl:request>
              </xsl:variable>
              <ctl:message>The server responded to a valid GetCapabilities request with the following message:  <xsl:value-of select="$getCapabilitiesResponse/*" /></ctl:message>
              <xsl:choose>
                <xsl:when test="not($getCapabilitiesResponse/*)">
                    <ctl:message>FAILURE:  The server did not return a response to a valid GetCapabilities request, or the response was not a valid SPS Capabilities document.</ctl:message>
                    <ctl:fail />
                </xsl:when>
                <xsl:otherwise>
                    <xsl:choose>
                        <xsl:when test="$getCapabilitiesResponse//ows:ExceptionReport">
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="sps:core-SPS.GetCapabilities-ValidException.1">
                                <ctl:with-param name="getCapabilitiesDocument" select="$getCapabilitiesResponse" />
                            </ctl:call-test>
                            <ctl:message>FAILURE:  The response to a GetCapabilities request was expected to a Capabilities document; an ExceptionReport was returned instead.</ctl:message>
                            <ctl:fail />
                        </xsl:when>
                        <xsl:otherwise>
                            <!--Check for mandatory operations-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseOperationMetadataMandatoryOperations.1">
                                <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                            </ctl:call-test>
                            <!--Check for optional operations-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseOperationMetadataOptionalOperations.1">
                                <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                            </ctl:call-test>
                            <!--Check for valid SensorOffering elements-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseContentsSensorOfferings.1">
                                <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                            </ctl:call-test>
                            <!--Check for valid SensorDefinition elements-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseContentsSensorOfferingsValidSensorDefinition.1">
                                <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                            </ctl:call-test>
                            <!--Check for valid PhenomenonOffering elements-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="sps:core-SPS.GetCapabilities-ResponseContentsPhenomenonOfferings.1">
                                <ctl:with-param name="getCapabilitiesResponse" select="$getCapabilitiesResponse" />
                            </ctl:call-test>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>
              <xsl:value-of select="$getCapabilitiesResponse/*" />
        </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.GetCapabilities-ResponseOperationMetadataMandatoryOperations.1">
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:assertion>The OperationsMetadata section lists the mandatory operations of the SPS.</ctl:assertion>
      <ctl:comment>Pass if the service lists the GetCapabilities, DescribeTasking, Submit, and DescribeResultAccess operations with the proper bindings in the OperationsMetadata section; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the OperationsMetadata section advertises the mandatory operations of the SPS.">docs/SPS%201.0%20ATS.html#SPS.GetCapabilities-ResponseOperationMetadataMandatoryOperations</ctl:link>
      <ctl:code>
                <xsl:variable name="getCapabilitiesElement" select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='GetCapabilities']" />
                <xsl:variable name="getCapabilitiesGetHref">
                    <xsl:value-of select="$getCapabilitiesElement/ows:DCP/ows:HTTP/ows:Get/@xlink:href" />
                </xsl:variable>
                <xsl:variable name="describeTaskingElement" select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='DescribeTasking']" />
                <xsl:variable name="describeTaskingPostHref">
                    <xsl:value-of select="$describeTaskingElement/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
                </xsl:variable>
                <xsl:variable name="submitElement" select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='Submit']" />
                <xsl:variable name="submitPostHref">
                    <xsl:value-of select="$submitElement/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
                </xsl:variable>
                <xsl:variable name="describeResultAccessElement" select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation[@name='DescribeResultAccess']" />
                <xsl:variable name="describeResultAccessPostHref">
                    <xsl:value-of select="$describeResultAccessElement/ows:DCP/ows:HTTP/ows:Post/@xlink:href" />
                </xsl:variable>
                <!--Check for a GetCapabilities operation-->
                <ctl:message>Checking for a GetCapabilities operation...</ctl:message>
                <xsl:if test="not($getCapabilitiesElement/*)">
                    <ctl:message>FAILURE:  The GetCapabilities operation is a mandatory operation.  Therefore, it must be listed in the OperationsMetadata section of the GetCapabilities document.</ctl:message>
                    <ctl:fail />
                </xsl:if>
                <xsl:if test="not($getCapabilitiesGetHref) or string-length(normalize-space($getCapabilitiesGetHref))=0">
                    <ctl:message>FAILURE:  The GetCapabilities operation is a mandatory operation.  Therefore, a URL must be supplied for the HTTP GET binding for this operation.  No URL was supplied for this binding.</ctl:message>
                    <ctl:fail />
                </xsl:if>
                <!--Check for a DescribeTasking operation--> 
                <ctl:message>Checking for a DescribeTasking operation...</ctl:message>
                <xsl:if test="not($describeTaskingElement/*)">
                    <ctl:message>FAILURE:  The DescribeTasking operation is a mandatory operation.  Therefore, it must be listed in the OperationsMetadata section of the GetCapabilities document.</ctl:message>
                    <ctl:fail />
                </xsl:if>
                <xsl:if test="not($describeTaskingPostHref) or string-length(normalize-space($describeTaskingPostHref))=0">
                    <ctl:message>FAILURE:  The DescribeTasking operation is a mandatory operation.  Therefore, a URL must be supplied for the HTTP POST binding for this operation.  No URL was supplied for this binding.</ctl:message>
                    <ctl:fail />
                </xsl:if>
                <!--Check for a Submit operation-->
                <ctl:message>Checking for a Submit operation...</ctl:message>
                <xsl:if test="not($submitElement/*)">
                    <ctl:message>FAILURE:  The Submit operation is a mandatory operation.  Therefore, it must be listed in the OperationsMetadata section of the GetCapabilities document.</ctl:message>
                    <ctl:fail />
                </xsl:if>
                <xsl:if test="not($submitPostHref) or string-length(normalize-space($submitPostHref))=0">
                    <ctl:message>FAILURE:  The Submit operation is a mandatory operation.  Therefore, a URL must be supplied for the HTTP POST binding for this operation.  No URL was supplied for this binding.</ctl:message>
                    <ctl:fail />
                </xsl:if>
                <!--Check for a DescribeResultAccess operation-->
                <ctl:message>Checking for a DescribeResultAccess operation...</ctl:message>                
                <xsl:if test="not($describeResultAccessElement/*)">
                    <ctl:message>FAILURE:  The DescribeResultAccess operation is a mandatory operation.  Therefore, it must be listed in the OperationsMetadata section of the GetCapabilities document.</ctl:message>
                    <ctl:fail />
                </xsl:if>
                <xsl:if test="not($describeResultAccessPostHref) or string-length(normalize-space($describeResultAccessPostHref))=0">
                    <ctl:message>FAILURE:  The DescribeResultAccess operation is a mandatory operation.  Therefore, a URL must be supplied for the HTTP POST binding for this operation.  No URL was supplied for this binding.</ctl:message>
                    <ctl:fail />
                </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.GetCapabilities-ResponseOperationMetadataOptionalOperations.1">
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:assertion>Any non-mandatory operations advertised in the OperationsMetadata section have valid SPS method names.</ctl:assertion>
      <ctl:comment>Pass if the service lists operations in addition to the mandatory operations, and each of the advertised operations has a valid SPS operation name; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that any non-mandatory operations listed in the OperationsMetadata section are valid SPS operation names.  This is still up for debate and will probably not be part of the final tests.">docs/SPS%201.0%20ATS.html#SPS.GetCapabilities-ResponseOperationMetadataOptionalOperations</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  Using the GetCapabilities response from above, check to see if the additional methods listed in the OperationsMetadata section are valid SPS method names.
                -->
        <xsl:variable name="spsOperations">
            <spsTesting:SPSOperations>
                <spsTesting:Operation>GetCapabilities</spsTesting:Operation>
                <spsTesting:Operation>DescribeTasking</spsTesting:Operation>
                <spsTesting:Operation>Submit</spsTesting:Operation>
                <spsTesting:Operation>DescribeResultAccess</spsTesting:Operation>
                <spsTesting:Operation>GetFeasibility</spsTesting:Operation>
                <spsTesting:Operation>GetStatus</spsTesting:Operation>
                <spsTesting:Operation>Update</spsTesting:Operation>
                <spsTesting:Operation>Cancel</spsTesting:Operation>
            </spsTesting:SPSOperations>
        </xsl:variable>
        <xsl:variable name="spsOperationsSet" select="$spsOperations//spsTesting:Operation" />
        <ctl:message>Verifying that the provided operations have valid SPS operation names.</ctl:message>
        <xsl:for-each select="$getCapabilitiesResponse//ows:OperationsMetadata/ows:Operation/@name">
            <ctl:message>Checking "<xsl:value-of select="." />" for validity.</ctl:message>
            <xsl:choose>
                <xsl:when test="empty(index-of($spsOperationsSet,.))">
                    <ctl:message>FAILURE:  The "<xsl:value-of select="." />" operation is not listed in the SPS specification.</ctl:message>
                    <ctl:fail />
                </xsl:when>
                <xsl:otherwise>
                    <ctl:message><xsl:value-of select="." /> is a valid SPS operation name.</ctl:message>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.GetCapabilities-ResponseContentsSensorOfferings.1">
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:assertion>Each SensorOffering sub-element (AreaOfService, Phenomenon, SensorDefinition, and SensorID) has a value.</ctl:assertion>
      <ctl:comment>Pass if each sub-element of a SensorOffering element has a value; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that each SensorOffering has appropriate values for its sub-elements.">docs/SPS%201.0%20ATS.html#SPS.GetCapabilities-ResponseContentsSensorOfferings</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  Using the GetCapabilities response from above, loop through the SensorOffering sub-elements to ensure that each sub-element contains a value.
                -->
        <xsl:for-each select="$getCapabilitiesResponse//sps:Contents/sps:SensorOfferingList/sps:SensorOffering">
            <xsl:variable name="areaOfService" select="sps:AreaOfService" />
            <xsl:variable name="phenomenon" select="normalize-space(sps:Phenomenon)" />
            <xsl:variable name="sensorDefinition" select="normalize-space(sps:SensorDefinition)" />
            <xsl:variable name="sensorID" select="normalize-space(sps:SensorID)" />
            <!--Check AreaOfService (for a child element or more?)-->
            <xsl:choose>
                <xsl:when test="not($areaOfService/*)">
                    <ctl:message>FAILURE:  The AreaOfService value for SensorOffering with SensorID <xsl:value-of select="$sensorID" /> is null.</ctl:message>
                    <ctl:fail />
                </xsl:when>
                <xsl:otherwise>
                    <ctl:message>Checking AreaOfService value for validity...</ctl:message>
                    <xsl:choose>
                        <xsl:when test="$areaOfService/ows:WGS84BoundingBox">
                            <ctl:message>ows:WGS84BoundingBox element found.  Performing ows:WGS84BoundingBox related tests.</ctl:message>
                            <xsl:variable name="wgs84BoundingBox" select="$areaOfService/ows:WGS84BoundingBox" />
                            <ctl:message>Checking "<xsl:value-of select="spsFunctions:printBoundingBox($wgs84BoundingBox)" />" for validity...</ctl:message>
                            <xsl:variable name="isWGS84BoundingBoxValid">
                                <ctl:call-function name="spsFunctions:checkWGS84BoundingBox">
                                    <ctl:with-param name="wgs84BoundingBoxToCheck" select="$wgs84BoundingBox" />
                                </ctl:call-function>
                            </xsl:variable>
                            <ctl:message>The ows:WGS84BoundingBox validity check returned:  <xsl:value-of select="$isWGS84BoundingBoxValid" /></ctl:message>
                            <xsl:if test="not(xsd:boolean($isWGS84BoundingBoxValid))">
                                <ctl:message>FAILURE:  The WGS84BoundingBox provided in the AreaOfService element for sensorID "<xsl:value-of select="$sensorID" />" is not a valid WGS84BoundingBox.</ctl:message>
                                <ctl:fail />
                            </xsl:if>
                        </xsl:when>
                        <xsl:when test="$areaOfService/ows:BoundingBox">
                            <ctl:message>ows:BoundingBox element found.  Performing ows:BoundingBox related tests.</ctl:message>
                            <xsl:variable name="boundingBox" select="$areaOfService/ows:BoundingBox" />
                            <ctl:message>Checking "<xsl:value-of select="spsFunctions:printBoundingBox($boundingBox)" />" for validity...</ctl:message>
                            <xsl:variable name="isBoundingBoxValid">
                                <ctl:call-function name="spsFunctions:checkBoundingBox">
                                    <ctl:with-param name="boundingBoxToCheck" select="$boundingBox" />
                                </ctl:call-function>
                            </xsl:variable>
                            <ctl:message>The ows:BoundingBox validity check returned:  <xsl:value-of select="$isBoundingBoxValid" /></ctl:message>
                            <xsl:if test="not(xsd:boolean($isBoundingBoxValid))">
                                <ctl:message>FAILURE:  The BoundingBox provided in the AreaOfService element for sensorID "<xsl:value-of select="$sensorID" />" is not a valid BoundingBox.</ctl:message>
                                <ctl:fail />
                            </xsl:if>
                        </xsl:when>
                        <xsl:when test="$areaOfService/gml:Polygon">
                            <ctl:message>gml:Polygon element found.  Performing gml:Polygon related tests.</ctl:message>
                            <xsl:for-each select="$areaOfService/gml:Polygon//gml:pos">
                                <xsl:variable name="pos" select="." />
                                <ctl:message>Checking "<xsl:value-of select="$pos" />" for validity...</ctl:message>
                                <xsl:variable name="isPosValid">
                                    <ctl:call-function name="spsFunctions:checkPosition">
                                        <ctl:with-param name="positionToCheck" select="$pos" />
                                    </ctl:call-function>
                                </xsl:variable>
                                <ctl:message>The validity check for <xsl:value-of select="$pos" /> returned:  <xsl:value-of select="$isPosValid" /></ctl:message>
                                <xsl:if test="not(xsd:boolean($isPosValid))">
                                    <ctl:message>FAILURE:  The gml:pos element provided in the AreaOfService element for sensorID "<xsl:value-of select="$sensorID" />" is not in a valid format.</ctl:message>
                                    <ctl:fail />
                                </xsl:if>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:when test="$areaOfService/gml:pos">
                            <ctl:message>gml:pos element found.  Performing gml:pos related tests.</ctl:message>
                            <xsl:variable name="pos" select="$areaOfService/gml:pos" />
                            <ctl:message>Checking "<xsl:value-of select="$pos" />" for validity...</ctl:message>
                            <xsl:variable name="isPosValid">
                                <ctl:call-function name="spsFunctions:checkPosition">
                                    <ctl:with-param name="positionToCheck" select="$pos" />
                                </ctl:call-function>
                            </xsl:variable>
                            <ctl:message>The gml:pos validity check returned:  <xsl:value-of select="$isPosValid" /></ctl:message>
                            <xsl:if test="not(xsd:boolean($isPosValid))">
                                <ctl:message>FAILURE:  The gml:pos element provided in the AreaOfService element for sensorID "<xsl:value-of select="$sensorID" />" is not in a valid format.</ctl:message>
                                <ctl:fail />
                            </xsl:if>
                        </xsl:when>
                        <xsl:otherwise>
                            <!--This is a gml:Solid; only check gml:pos elements for validity-->
                            <ctl:message>gml:Solid element found.  Performing gml:Solid related tests.</ctl:message>
                            <xsl:for-each select="$areaOfService/gml:Solid//gml:pos">
                                <xsl:variable name="pos" select="." />
                                <ctl:message>Checking "<xsl:value-of select="$pos" />" for validity...</ctl:message>
                                <xsl:variable name="isPosValid">
                                    <ctl:call-function name="spsFunctions:checkPosition">
                                        <ctl:with-param name="positionToCheck" select="$pos" />
                                    </ctl:call-function>
                                </xsl:variable>
                                <ctl:message>The validity check for <xsl:value-of select="$pos" /> returned:  <xsl:value-of select="$isPosValid" /></ctl:message>
                                <xsl:if test="not(xsd:boolean($isPosValid))">
                                    <ctl:message>FAILURE:  The gml:pos element provided in the AreaOfService element for sensorID "<xsl:value-of select="$sensorID" />" is not in a valid format.</ctl:message>
                                    <ctl:fail />
                                </xsl:if>
                            </xsl:for-each>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:otherwise>
            </xsl:choose>
            <!--Check Phenomenon (for an empty string or an invalid URN?)-->
            <ctl:message>Checking Phenomenon <xsl:value-of select="$phenomenon" /> for validity...</ctl:message>
            <xsl:if test="string-length($phenomenon)=0 or not(xsd:boolean(spsFunctions:validateURN($phenomenon)))">
                <ctl:message>FAILURE:  The Phenomenon value for SensorOffering with SensorID <xsl:value-of select="$sensorID" /> is null or is not a valid URN.</ctl:message>
                <ctl:fail />
            </xsl:if>
            <!--Check SensorDefinition (for an empty string)-->
            <ctl:message>Checking SensorDefinition <xsl:value-of select="$sensorDefinition" /> for validity...</ctl:message>
            <xsl:if test="string-length($sensorDefinition)=0">
                <ctl:message>FAILURE:  The SensorDefinition value for SensorOffering with SensorID <xsl:value-of select="$sensorID" /> is null.</ctl:message>
                <ctl:fail />
            </xsl:if>
            <!--Check SensorID (for an empty string or an invalid URN?)-->
            <ctl:message>Checking SensorID <xsl:value-of select="$sensorID" /> for validity...</ctl:message>
            <xsl:if test="string-length($sensorID)=0 or not(xsd:boolean(spsFunctions:validateGenericURN($sensorID)))">
                <ctl:message>FAILURE:  A SensorID value is null or is not a valid URN.</ctl:message>
                <ctl:fail />
            </xsl:if>
        </xsl:for-each>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.GetCapabilities-ResponseContentsSensorOfferingsValidSensorDefinition.1">
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:assertion>The SensorDefinition element of each SensorOffering element links to a valid SensorML or TML document.</ctl:assertion>
      <ctl:comment>Pass if the SensorDefinition element of each SensorOffering element links to a valid SensorML or TML document; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the value provided in the SensorDefinition field of each SensorOffering links to a valid SensorML or TML document.">docs/SPS%201.0%20ATS.html#SPS.GetCapabilities-ResponseContentsSensorOfferingsValidSensorDefinition</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  Using the GetCapabilities response from above, obtain the value of each SensorDefinition element using a loop.
                    2.)  Store the value of the SensorDefinition element in a variable.
                    3.)  Request (HTTP) the value in the SensorDefinition variable if a value exists, else fail.
                    4.)  If a response is returned, then validate the response against the appropriate schema (SensorML or TML), else fail.
                    5.)  If the response validates against its associated schema then pass, else fail.
                    6.)  Check if the sensorID in the SensorML or TML document matches the requested SensorID?
                -->
        <xsl:for-each select="$getCapabilitiesResponse//sps:Contents/sps:SensorOfferingList/sps:SensorOffering">
            <!--Store the associated SensorID element value for later use-->
            <xsl:variable name="sensorID" select="sps:SensorID" />
            <xsl:variable name="sensorDefinition" select="normalize-space(sps:SensorDefinition)" />
            <!--Create a request based on the value in the SensorDefiniton element and store the response in a variable-->
            <ctl:message>Issuing a request for the sensor definition of "<xsl:value-of select="$sensorID" />" to the following URL:  <xsl:value-of select="$sensorDefinition" /></ctl:message>
            <xsl:variable name="sensorDefinitionResponse">
                <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$sensorDefinition" />
                    </ctl:url>
                    <ctl:method>get</ctl:method>
                    <!--Parser to get response-->
                    <ctl:call-function name="spsFunctions:validateSensorDescription" />
                </ctl:request>
            </xsl:variable>
            <ctl:message>The server returned the following response:  <xsl:value-of select="$sensorDefinitionResponse/*" /></ctl:message>
            <xsl:choose>
                <xsl:when test="not($sensorDefinitionResponse/*)">
                    <ctl:message>FAILURE:  The advertised value in the SensorDefinition element for <xsl:value-of select="$sensorID" /> did not return a response or did not link to a valid SensorML or TML document.</ctl:message>
                    <ctl:fail />
                </xsl:when>
                <xsl:otherwise>
                    <!--TODO:  Verify that the ID of the sensor matches the requested sensorID-->
                    <ctl:message>A valid SensorML or TML response was returned.</ctl:message>
                    <ctl:message>Checking the sensorID of the SensorML or TML response for validity...</ctl:message>
                    <xsl:choose>
                        <xsl:when test="$sensorDefinitionResponse//sml:SensorML | $sensorDefinitionResponse//sml1:SensorML">
                            <ctl:message>A SensorML document was returned.  Checking for the existence of a sensorID and verifying that an existing sensorID is valid.</ctl:message>
                            <xsl:variable name="responseSensorID" select="$sensorDefinitionResponse//sml:identifier/sml:Term[ends-with(lower-case(@definition),':uniqueid')]/sml:value | $sensorDefinitionResponse//sml1:identifier/sml1:Term[ends-with(lower-case(@definition),':uniqueid')]/sml1:value" />
                            <ctl:message>The test discovered the following sensorID:  <xsl:value-of select="$responseSensorID" /></ctl:message>
                            <xsl:if test="string-length(normalize-space($responseSensorID))=0">
                                <ctl:message>FAILURE:  There was no sensorID specified in the returned SensorML document.</ctl:message>
                                <ctl:fail />
                            </xsl:if>
                            <xsl:if test="not($responseSensorID=$sensorID)">
                                <ctl:message>FAILURE:  The sensorID in the returned SensorML document (<xsl:value-of select="$responseSensorID" />) does not match the sensorID specified in the SensorOffering (<xsl:value-of select="$sensorID" />).</ctl:message>
                                <ctl:fail />
                            </xsl:if>
                        </xsl:when>
                        <xsl:when test="$sensorDefinitionResponse//tml:tml">
                            <ctl:message>A TML document was returned.  Checking for the existence of a sensorID and verifying that an existing sensorID is valid.</ctl:message>
                            <!--TODO:  This needs to be verified with an actual example-->
                            <xsl:variable name="responseSensorID"> 
                                <xsl:value-of select="$sensorDefinitionResponse//tml:identification/tml:uid" />
                            </xsl:variable>
                            <xsl:if test="string-length(normalize-space($responseSensorID))=0">
                                <ctl:message>FAILURE:  There was no sensorID specified in the returned TML document.</ctl:message>
                                <ctl:fail />
                            </xsl:if>
                            <xsl:if test="not($responseSensorID=$sensorID)">
                                <ctl:message>FAILURE:  The sensorID in the returned TML document (<xsl:value-of select="$responseSensorID" />) does not match the sensorID specified in the SensorOffering (<xsl:value-of select="$sensorID" />).</ctl:message>
                                <ctl:fail />
                            </xsl:if>   
                        </xsl:when>
                        <xsl:otherwise>
                            <ctl:message>FAILURE:  The unique identifier for the requested sensor could not be determined from the returned sensor definition document.</ctl:message>
                            <ctl:fail />
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.GetCapabilities-ResponseContentsPhenomenonOfferings.1">
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:assertion>Each PhenomenonOffering sub-element (Phenomenon and SensorID) has a value.</ctl:assertion>
      <ctl:comment>Pass if each PhenomenonOffering sub-element has a value; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that each PhenomenonOffering has appropriate values for its sub-elements.">docs/SPS%201.0%20ATS.html#SPS.GetCapabilities-ResponseContentsPhenomenonOfferings</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  Using the GetCapabilities response from above, loop through each sub-element of each PhenomenonOffering
                    2.)  Check to ensure that each sub-element's inner text property has a value.  Pass if each sub-element has a value, fail otherwise.
                -->
        <xsl:for-each select="$getCapabilitiesResponse//sps:Contents/sps:PhenomenonOfferingList/sps:PhenomenonOffering">
            <!--Check the Phenomenon element (ensure that each Phenomenon listed matches a Phenomenon listed in a SensorOffering element?)-->
            <!--NOTE:  This check is most likely handled through schema validation, but the check will remain just in case-->
            <xsl:variable name="phenomenon" select="normalize-space(sps:Phenomenon)" />
            <ctl:message>Checking the following phenomenon for validity:  <xsl:value-of select="$phenomenon" /></ctl:message>
            <xsl:choose>
                <xsl:when test="string-length($phenomenon)=0 or not(xsd:boolean(spsFunctions:validateURN($phenomenon)))"><!--Check to see if this Phenomenon is in a URN format?-->
                    <ctl:message>FAILURE:  The Phenomenon element value for a PhenomenonOffering is an empty string or is not a valid URN.</ctl:message>
                    <ctl:fail />
                </xsl:when>
                <xsl:otherwise>
                    <!--This is probably unnecessary, since this is most likely handled by schema validation-->
                    <ctl:message>Checking for the existence of a matching phenomenon element in the SensorOfferings...</ctl:message>
                    <xsl:variable name="sensorDefPhenomenonElement" select="$getCapabilitiesResponse//sps:Contents/sps:SensorOfferingList/sps:SensorOffering/sps:Phenomenon[text()=$phenomenon]" />
                    <xsl:variable name="phenomenonElementExists" select="string-length($sensorDefPhenomenonElement)>0" />
                    <ctl:message>The check returned:  <xsl:value-of select="$phenomenonElementExists" /></ctl:message>
                    <xsl:if test="not(xsd:boolean($phenomenonElementExists))">
                        <ctl:message>FAILURE:  The Phenomenon element value "<xsl:value-of select="$phenomenon" />" is listed in a PhenomenonOffering, but this phenomenon is not listed in at least one SensorOffering for this service.</ctl:message>
                        <ctl:fail />
                    </xsl:if>
                </xsl:otherwise>
            </xsl:choose>
            <!--Check each SensorID element (ensure that each SensorID element listed matches a SensorID listed in the SensorOffering element?)-->
            <!--NOTE:  This check is most likely handled through schema validation, but the check will remain just in case-->
            <xsl:for-each select="sps:SensorID">
                <xsl:variable name="sensorID" select="normalize-space(.)" />
                <ctl:message>Checking the following sensorID for validity:  <xsl:value-of select="$sensorID" /></ctl:message>
                <xsl:choose>
                    <xsl:when test="string-length($sensorID)=0 or not(xsd:boolean(spsFunctions:validateGenericURN($sensorID)))">
                        <ctl:message>FAILURE:  The SensorID element value for the "<xsl:value-of select="$phenomenon" />" PhenomenonOffering is an empty string or is not a valid URN.</ctl:message>
                        <ctl:fail />
                    </xsl:when>
                    <xsl:otherwise>
                        <!--This is probably unnecessary, since this is most likely handled by schema validation-->
                        <ctl:message>Checking for the existence of a matching sensorID element in the SensorOfferings...</ctl:message>
                        <xsl:variable name="sensorDefSensorIDElement" select="$getCapabilitiesResponse//sps:Contents/sps:SensorOfferingList/sps:SensorOffering/sps:SensorID[text()=$sensorID]" />
                        <xsl:variable name="sensorIDElementExists" select="string-length($sensorDefSensorIDElement)>0" />
                        <ctl:message>The check returned:  <xsl:value-of select="$sensorIDElementExists" /></ctl:message>
                        <xsl:if test="not(xsd:boolean($sensorIDElementExists))">
                            <ctl:message>FAILURE:  The SensorID element value "<xsl:value-of select="$sensorID" />" from the "<xsl:value-of select="$phenomenon" />" PhenomenonOffering is not listed in at least one SensorOffering for this service.</ctl:message>
                            <ctl:fail />
                        </xsl:if>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </xsl:for-each>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.GetCapabilities-ValidException.1">
      <ctl:param name="getCapabilitiesDocument" />
      <ctl:assertion>An exception message returned by the server is a valid exception message for the GetCapabilities operation.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid exception message for the GetCapabilities operation; fail otherwise</ctl:comment>
      <ctl:link title="Verify that any exception message returned by the server is a valid exception message for the GetCapabilities operation.">docs/SPS%201.0%20ATS.html#SPS.GetCapabilities-ValidException</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <xsl:variable name="validExceptionCodes">
            <spsTesting:ExceptionCodes>
                <spsTesting:exceptionCode>OperationNotSupported</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>MissingParameterValue</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>InvalidParameterValue</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>UnknownSensorID</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>TaskIDExpired</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>NoApplicableCode</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>InvalidRequest</spsTesting:exceptionCode>
            </spsTesting:ExceptionCodes>
        </xsl:variable>
        <xsl:variable name="isValid">
            <ctl:call-function name="spsFunctions:verifyExceptionCode">
                <ctl:with-param name="operationName" select="string('GetCapabilities')" />
                <ctl:with-param name="validExceptionCodes" select="$validExceptionCodes" />
                <ctl:with-param name="exceptionReport" select="$getCapabilitiesDocument" />
            </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$getCapabilitiesDocument//ows:ExceptionReport and not(xsd:boolean($isValid))">
            <ctl:message>FAILURE:  The exception report returned is not a valid exception report for the GetCapabilities operation.</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
    
    <!--DescribeTasking tests-->
    <ctl:test name="sps:core-SPS.DescribeTasking-RequestInvalidSensorIDs.1">
      <ctl:param name="describeTaskingURL" />
      <ctl:assertion>The server returns a valid error report message with a value of UnknownSensorID for the exceptionCode parameter and a list of the unknown sensor IDs in the locator parameter when one or more invalid sensor ID(s) are supplied in the request.</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid error report message with an exceptionCode parameter of UnknownSensorID and a list of the unknown sensor IDs in the locator parameter; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server handles invalid sensor ID(s) correctly.">docs/SPS%201.0%20ATS.html#SPS.DescribeTasking-RequestInvalidSensorIDs</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  HTTP POST DescribeTasking request with one random sensorID.
                    2.)  Validate response against ExceptionReport schema.
                    3.)  If response validates, then check that the exceptionCode parameter is "UnknownSensorID" and that the requested sensorID is listed in the locator parameter.
                    4.)  Repeat 1 - 3 with a set of random sensor IDs to test how the server handles multiple sensorIDs
                -->
        <xsl:variable name="sensorIDs" select="string('This is an invalid sensorID 1...,This is an invalid sensorID 2...,This is an invalid sensorID 3...,This is an invalid sensorID 4...')" />
        <ctl:message>Sending a DescribeTasking request with the following sensorID elements:  <xsl:value-of select="$sensorIDs" /></ctl:message>
        <xsl:variable name="describeTaskingResponse">
            <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeTaskingURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeTasking xmlns="http://www.opengis.net/sps/1.0" service="SPS" version="1.0.0">
                            <xsl:for-each select="tokenize($sensorIDs,',')">
                                <sensorID><xsl:value-of select="." /></sensorID>
                            </xsl:for-each>
                        </DescribeTasking>
                    </ctl:body>
                    <ctl:call-function name="spsFunctions:validateDescribeTaskingResponse" />
                </ctl:request>
        </xsl:variable>
        <ctl:message>The DescribeTasking request produced the following response:  "<xsl:value-of select="$describeTaskingResponse/*" />"</ctl:message>
        <xsl:choose>
            <xsl:when test="not($describeTaskingResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response to an invalid DescribeTasking request or the response was not a valid exception.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeTaskingResponse)" /></ctl:message>
                <ctl:message>Checking this response for validity...</ctl:message>
                <xsl:for-each select="$describeTaskingResponse//ows:ExceptionReport/ows:Exception">
                    <xsl:variable name="locatorValue">
                        <xsl:value-of select="@locator" />
                    </xsl:variable>
                    <xsl:variable name="exceptionCode">
                        <xsl:value-of select="@exceptionCode" />
                    </xsl:variable>
                    <ctl:message>Exception locator:  <xsl:value-of select="$locatorValue" /></ctl:message>
                    <ctl:message>Exception exceptionCode:  <xsl:value-of select="$exceptionCode" /></ctl:message>
                    <xsl:if test="not($exceptionCode='UnknownSensorID')">
                        <ctl:message>FAILURE:  An exceptionCode of UnknownSensorID was expected in the response.  "<xsl:value-of select="@exceptionCode" />" was provided instead.</ctl:message>
                        <ctl:fail />
                    </xsl:if>
                    <xsl:variable name="sensorIDSequence" select="tokenize($sensorIDs,',')" />
                    <xsl:variable name="locatorSequence" select="tokenize($locatorValue,',')" />
                    <xsl:for-each select="$sensorIDSequence">
                        <xsl:variable name="currentItem" select="." />
                        <xsl:if test="empty(index-of($locatorSequence,$currentItem))">
                            <ctl:message>FAILURE:  The locator value was expected to contain "<xsl:value-of select="$currentItem" />".</ctl:message>
                            <ctl:fail />
                        </xsl:if>
                    </xsl:for-each>
                </xsl:for-each>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeTasking-RequestNullSensorID.1">
      <ctl:param name="describeTaskingURL" />
      <ctl:assertion>The server returns a valid error report message with a value of InvalidParameterValue for the exceptionCode parameter when no SensorID value is supplied in the request.</ctl:assertion>
      <ctl:comment>Pass if the server returns a valid error report message with an exceptionCode parameter of InvalidParameterValue; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server handles a request with a null SensorID correctly.">docs/SPS%201.0%20ATS.html#SPS.DescribeTasking-RequestNullSensorID</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  HTTP POST DescribeTasking request with an empty sensorID.
                    2.)  Validate response against ExceptionReport schema.
                    3.)  If response validates, then check that the exceptionCode parameter is "InvalidParameterValue".
                -->
        <ctl:message>Sending a DescribeTasking request with a null sensorID...</ctl:message>
        <xsl:variable name="describeTaskingResponse">
            <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeTaskingURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeTasking xmlns="http://www.opengis.net/sps/1.0" service="SPS" version="1.0.0">
                            <sensorID><xsl:value-of select="string('')" /></sensorID>
                        </DescribeTasking>
                    </ctl:body>
                    <ctl:call-function name="spsFunctions:validateDescribeTaskingResponse" />
                </ctl:request>
        </xsl:variable>
        <xsl:choose>
            <xsl:when test="not($describeTaskingResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response to an invalid DescribeTasking request or the response was not a valid exception.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeTaskingResponse)" /></ctl:message>
                <ctl:message>Checking the response for validity...</ctl:message>
                <xsl:variable name="isCorrect">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$describeTaskingResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('sensorID')" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                <xsl:if test="not(xsd:boolean($isCorrect))">
                    <ctl:message>FAILURE:  The returned exception report was expected to contain an exceptionCode of InvalidParameterValue and a locator of sensorID.</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeTasking-ResponseMain.1">
      <ctl:param name="describeTaskingURL" />
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:assertion>The response to a DescribeTasking request is valid.</ctl:assertion>
      <ctl:comment>Pass if each InputDescriptor element contains values for each of its sub-elements and these sub-element values appear to be valid; fail otherwise.</ctl:comment>
      <ctl:link title="Verify a DescribeTasking response."></ctl:link>
      <ctl:code>
        <!--Loop through the SensorID values in the Capabilities document-->
        <ctl:message>Iterating through the sensorID elements in the Capabilities document and verifying that a DescribeTasking request produces a valid response for each sensorID...</ctl:message>
        <xsl:for-each select="$getCapabilitiesResponse//sps:Contents/sps:SensorOfferingList/sps:SensorOffering/sps:SensorID">
            <!--Call DescribeTasking for each SensorID-->
            <xsl:variable name="sensorID" select="." />
            <ctl:message>Sending DescribeTasking request with sensorID "<xsl:value-of select="$sensorID" />"</ctl:message>
            <xsl:variable name="describeTaskingResponse">
                <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeTaskingURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeTasking xmlns="http://www.opengis.net/sps/1.0" service="SPS" version="1.0.0">
                            <sensorID><xsl:value-of select="$sensorID" /></sensorID>
                        </DescribeTasking>
                    </ctl:body>
                    <ctl:call-function name="spsFunctions:validateDescribeTaskingResponse" />
                </ctl:request>
            </xsl:variable>
            <xsl:choose>
                <xsl:when test="not($describeTaskingResponse/*)">
                    <ctl:message>FAILURE:  No response was returned from the server for a DescribeTasking request with sensorID "<xsl:value-of select="$sensorID" />", or the response did not validate according to the DescribeTasking schema.</ctl:message>
                    <ctl:fail />
                </xsl:when>
                <xsl:otherwise>
                    <xsl:choose>
                        <xsl:when test="$describeTaskingResponse//ows:ExceptionReport">
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:message>The service returned an ExceptionReport.  Checking if this ExceptionReport is a valid ExceptionReport for the DescribeTasking operation...</ctl:message>
                            <ctl:call-test name="sps:core-SPS.DescribeTasking-ValidException.1">
                                <ctl:with-param name="describeTaskingResponse" select="$describeTaskingResponse" />
                            </ctl:call-test>
                            <ctl:message>FAILURE:  The response to a DescribeTasking request was expected to a DescribeTaskingRequestResponse document; an ExceptionReport was returned instead.</ctl:message>
                            <ctl:fail />
                        </xsl:when>
                        <xsl:otherwise>
                            <ctl:message>Checking the elements of the DescribeTasking response...</ctl:message>
                            <!--Using the DescribeTasking response, ensure that the values in the sub-elements are valid by calling sub-tests-->
                            <!--Ensure that the SensorID in the response matches the SensorID provided in the request-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="sps:core-SPS.DescribeTasking-ResponseMatchingSensorIDs.1">
                                <ctl:with-param name="requestedSensorID" select="$sensorID" />
                                <ctl:with-param name="describeTaskingResponse" select="$describeTaskingResponse" />
                            </ctl:call-test>
                            <!--Ensure that the InputDescriptor elements contain values for their sub-elements-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="sps:core-SPS.DescribeTasking-ResponseValidInputDescriptor.1">
                                <ctl:with-param name="requestedSensorID" select="$sensorID" />
                                <ctl:with-param name="describeTaskingResponse" select="$describeTaskingResponse" />
                            </ctl:call-test>
                            <!--Ensure that the parameterID of each InputDescriptor contains a value and that the parameterID is unique-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="sps:core-SPS.DescribeTasking-ResponseValidInputDescriptorParameterID.1">
                                <ctl:with-param name="requestedSensorID" select="$sensorID" />
                                <ctl:with-param name="describeTaskingResponse" select="$describeTaskingResponse" />
                            </ctl:call-test>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeTasking-ResponseMatchingSensorIDs.1">
      <ctl:param name="requestedSensorID" />
      <ctl:param name="describeTaskingResponse" />
      <ctl:assertion>The sensorID field of each TaskingDescriptor element is one of the SensorID values provided in the request.</ctl:assertion>
      <ctl:comment>Pass if the SensorID value in each TaskingDescriptor element is one of the SensorID values supplied in the DescribeTasking request; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the sensorID field of each TaskingDescriptor element is one of the SensorID values provided in the request.">docs/SPS%201.0%20ATS.html#SPS.DescribeTasking-ResponseMatchingSensorIDs</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  HTTP POST valid DescribeTasking request with one or more valid sensorID(s).  Get each advertised SensorID from the Capabilities document.
                    2.) Validate response against DescribeTaskingResponse schema.
                    3.)  If the reponse validates, then check that the SensorID value in each of the TaskingDescriptor elements matches one the request sensorID(s).
                -->
        <xsl:variable name="responseSensorID" select="$describeTaskingResponse//sps:sensorID" />
        <ctl:message>Comparing the requested sensorID "<xsl:value-of select="$requestedSensorID" />" with the sensorID in the response "<xsl:value-of select="$responseSensorID" />"...</ctl:message>
        <xsl:if test="not($responseSensorID=$requestedSensorID)">
            <ctl:message>FAILURE:  The sensorID of the response "<xsl:value-of select="$responseSensorID" />" does not match the sensorID in the request "<xsl:value-of select="$requestedSensorID" />".</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeTasking-ResponseValidInputDescriptor.1">
      <ctl:param name="requestedSensorID" />
      <ctl:param name="describeTaskingResponse" />
      <ctl:assertion>Each InputDescriptor element contains appropriate values for its sub-elements.</ctl:assertion>
      <ctl:comment>Pass if each InputDescriptor element contains values for each of its sub-elements and these sub-element values appear to be valid; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that each InputDescriptor element contains appropriate values for its sub-elements.  This is probably tested through schema validation, so this test may be unnecessary.">docs/SPS%201.0%20ATS.html#SPS.DescribeTasking-ResponseValidInputDescriptor</ctl:link>
      <ctl:code>
        <!--Each attribute, if specified should have a value-->
        <ctl:message>Checking all attributes of the DescribeTasking response for validity...</ctl:message>
        <xsl:for-each select="$describeTaskingResponse//@*">
            <xsl:variable name="attributeValue" select="." />
            <xsl:variable name="attributeName" select="name()" />
            <xsl:if test="string-length(normalize-space($attributeValue))=0">
                <ctl:message>The "<xsl:value-of select="$attributeName" />" attribute value is null.</ctl:message>
                <ctl:fail />
            </xsl:if>
            <!--An xlink:href attribute should be a valid URL or URN-->
            <xsl:if test="$attributeName='href' or $attributeName='definition'">
                <xsl:variable name="isValidURL" select="spsFunctions:validateURL($attributeValue)" />
                <xsl:variable name="isValidURN" select="spsFunctions:validateURN($attributeValue)" />
                <xsl:if test="not(xsd:boolean($isValidURL) or xsd:boolean($isValidURN))">
                    <ctl:message>The "<xsl:value-of select="$attributeName" />" attribute value is not a valid URL or OGC URN (i.e. starts with urn:ogc).</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:if>
            <!--A definiton or referenceFrame attribute should be a URL or a definition URN-->
            <xsl:if test="$attributeName='referenceFrame'">
                <xsl:variable name="isValidURL" select="spsFunctions:validateURL($attributeValue)" />
                <xsl:variable name="isValidURN" select="spsFunctions:isValidDefinitionURN($attributeValue)" />
                <xsl:if test="not(xsd:boolean($isValidURL) or xsd:boolean($isValidURN))">
                    <ctl:message>The "<xsl:value-of select="$attributeName" />" attribute value is not a valid URL or OGC definition URN (i.e. starts with urn:ogc:def).</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:if>
        </xsl:for-each>
        <ctl:message>Checking the InputDescriptor constraints for validity...</ctl:message>
        <xsl:for-each select="$describeTaskingResponse//sps:InputDescriptor">
            <xsl:variable name="parameterID">
                <xsl:value-of select="@parameterID" />
            </xsl:variable>
            <ctl:message>Checking the constraints for "<xsl:value-of select="$parameterID" />"</ctl:message>
            <!--Loop through the constraints and check for null values.  valueList is the only element that is not checked by schema validation, but the other elements will be left in just in case-->
            <xsl:for-each select="//swe:constraint//swe:min | //swe:constraint//swe:max | //swe:constraint//swe:interval | //swe:constraint//swe:valueList">
                <xsl:if test="string-length(normalize-space(.))=0">
                    <ctl:message>The "<xsl:value-of select="$parameterID" />" parameter has one or more invalid constraints.</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:for-each>
            <!--Determine if an interval constraint is valid for this InputDescriptor-->
            <xsl:variable name="isConstraintValid" select="spsFunctions:checkIntervalConstraint(.)" />
            <xsl:if test="not(xsd:boolean($isConstraintValid))">
                <ctl:message>The "<xsl:value-of select="$parameterID" />" parameter has one or more invalid values for the interval specified in its constraints.</ctl:message>
                <ctl:fail />
            </xsl:if>
        </xsl:for-each>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeTasking-ResponseValidInputDescriptorParameterID.1">
      <ctl:param name="requestedSensorID" />
      <ctl:param name="describeTaskingResponse" />
      <ctl:assertion>The parameterID of each InputDescriptor element contains a value.</ctl:assertion>
      <ctl:comment>Pass if the parameterID element of each InputDescriptor element contains a value and each parameterID element has a unique value; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the parameterID of each InputDescriptor element contains a value.">docs/SPS%201.0%20ATS.html#SPS.DescribeTasking-ResponseValidInputDescriptorParameterID</ctl:link>
      <ctl:code>
        <!--
                    1.)  Store the parameterID values in a variable
                    2.)  Store the distinct parameterID values in a variable
                    3.)  Loop through each parameterID value and ensure that it is not null
                    4.)  Compare the distinct parameterID values with the initial parameterID values to ensure that they match
                -->
        <ctl:message><xsl:value-of select="count($describeTaskingResponse//sps:InputDescriptor/@parameterID)" /> parameter(s) discovered.  Checking parameters...</ctl:message>
        <!--Determine the distinct parameterID values-->
        <xsl:variable name="distinctParameterIDs" select="distinct-values($describeTaskingResponse//sps:InputDescriptor/@parameterID)" />
        <!--Loop through the parameterID values in the response to ensure that each is not null-->
        <xsl:for-each select="$describeTaskingResponse//sps:InputDescriptor/@parameterID">
            <ctl:message>Checking parameterID:  <xsl:value-of select="." /></ctl:message>
            <xsl:if test="string-length(normalize-space())=0">
                <ctl:message>FAILURE:  A parameterID for <xsl:value-of select="$requestedSensorID" /> is null.</ctl:message>
                <ctl:fail />
            </xsl:if>
        </xsl:for-each>
        <!--Compare the parameterID values with the distinctParameterID values to ensure that all parameterID values are distinct-->
        <xsl:if test="count($describeTaskingResponse//sps:InputDescriptor/@parameterID)>count($distinctParameterIDs)">
            <ctl:message>FAILURE:  One or more parameterID values for <xsl:value-of select="$requestedSensorID" /> are not unique</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeTasking-ValidException.1">
      <ctl:param name="describeTaskingResponse" />
      <ctl:assertion>An exception message returned by the server is a valid exception message for the DescribeTasking operation.</ctl:assertion>
      <ctl:comment>Pass if a returned exception message is a valid exception report and has an exceptionCode value that is valid for the DescribeTasking operation; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that any exception message returned by the server is a valid exception message for the DescribeTasking operation">docs/SPS%201.0%20ATS.html#SPS.DescribeTasking-ValidException</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <xsl:variable name="validExceptionCodes">
            <spsTesting:ExceptionCodes>
                <spsTesting:exceptionCode>OperationNotSupported</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>MissingParameterValue</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>InvalidParameterValue</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>UnknownSensorID</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>NoApplicableCode</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>InvalidRequest</spsTesting:exceptionCode>
            </spsTesting:ExceptionCodes>
        </xsl:variable>
        <xsl:variable name="isValid">
            <ctl:call-function name="spsFunctions:verifyExceptionCode">
                <ctl:with-param name="operationName" select="string('DescribeTasking')" />
                <ctl:with-param name="validExceptionCodes" select="$validExceptionCodes" />
                <ctl:with-param name="exceptionReport" select="$describeTaskingResponse" />
            </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$describeTaskingResponse//ows:ExceptionReport and not(xsd:boolean($isValid))">
            <ctl:message>FAILURE:  The exception report returned is not a valid exception report for the DescribeTasking operation.</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
    
    <!--Submit tests-->
    <ctl:test name="sps:core-SPS.Submit-RequestMain.1">
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="describeTaskingURL" />
      <ctl:param name="submitURL" />
      <ctl:param name="describeResultAccessURL" />
      <ctl:param name="allowUserSpecifiedTimeFrame" />
      <ctl:assertion>All Submit request assertions are satisfied.</ctl:assertion>
      <ctl:comment>Pass if all Submit request assertions are satisfied; fail otherwise.</ctl:comment>
      <ctl:link title=""></ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--
                    1.)  DescribeTasking request/response.
                    2.)  Based on response generate form
                    3.)  User clicks Submit button after filling in form values
                    4.)  Generate Submit request
                    5.)  Retrieve SumbitRequestResponse from the server
                    6.)  Valid SubmitRequestResponse
                -->
        <!--Get the SensorID values from the Capabilities document-->
        <xsl:variable name="sensorIDs" select="$getCapabilitiesResponse//sps:SensorOffering/sps:SensorID" />
        <ctl:message><xsl:value-of select="count($sensorIDs)" /> sensorID values were discovered from the Capabilities document.</ctl:message>
        <!--Provide a form to the user allowing them to pick a sensor for which Submit requests will be posted-->
        <!--OR, don't let the user pick the sensor and loop through each sensor behind the SPS?-->
        <xsl:variable name="chooseSensorForm">
            <ctl:form height="640" width="800">
               <body>
                  <h2>Please choose a sensor for performing Submit operation tests.</h2>
                    <blockquote>
                     <table border="1" padding="4" bgcolor="#99ccff">
                        <tr>
                           <td align="left"><b>Sensor ID:</b></td>                        
                           <td align="center">
                              <select name="sensorIDDropDown">
                                <xsl:for-each select="$sensorIDs">
                                    <xsl:variable name="sensorID" select="." />
                                    <option><xsl:attribute name="value"><xsl:value-of select="$sensorID" /></xsl:attribute><xsl:value-of select="$sensorID" /></option> 
                                </xsl:for-each>
                              </select>
                           </td>
                        </tr>
                     </table>
                    </blockquote>
                  <input type="submit" value="Select"/>
               </body>
            </ctl:form>
        </xsl:variable>
        <!--Get the user selected sensorID-->
        <xsl:variable name="selectedSensorID" select="$chooseSensorForm/values/value[@key='sensorIDDropDown']" />
        <!--Call DescribeTasking for this sensorID-->
        <ctl:message>Executing a DescribeTasking request for:  <xsl:value-of select="$selectedSensorID" /></ctl:message>
        <xsl:variable name="describeTaskingResponse">
            <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeTaskingURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeTasking xmlns="http://www.opengis.net/sps/1.0" service="SPS" version="1.0.0">
                            <sensorID><xsl:value-of select="$selectedSensorID" /></sensorID>
                        </DescribeTasking>
                    </ctl:body>
                    <ctl:call-function name="spsFunctions:validateDescribeTaskingResponse" />
            </ctl:request>
        </xsl:variable>
        <xsl:choose>
            <xsl:when test="not($describeTaskingResponse/*)">
                <ctl:message>FAILURE:  Unable to construct a Submit request form containing taskable parameters, since the server did not return a valid response to the DescribeTasking request for "<xsl:value-of select="$selectedSensorID" />".</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>A valid DescribeTasking response was returned.  Generating a user input form based on the taskable parameters for <xsl:value-of select="$selectedSensorID" />...</ctl:message>
                <!--Check to see if the MissingRequiredParameters test should be run.  The DescribeTasking response must have at least one required parameter and one optional parameter in order for the MissingRequiredParameters test to be run.-->
                <xsl:variable name="requiredParametersCount" select="count($describeTaskingResponse//sps:InputDescriptor[@use='optional'])" />
                <xsl:variable name="optionalParametersCount" select="count($describeTaskingResponse//sps:InputDescriptor[@use='required'])" />
                <xsl:variable name="runMissingRequiredParametersTest" select="($requiredParametersCount + $optionalParametersCount)>=2" />
                <xsl:variable name="complexInputParameters" select="$describeTaskingResponse//sps:InputDescriptor/sps:definition/swe:ConditionalData | $describeTaskingResponse//sps:InputDescriptor/sps:definition/swe:ConditionalValue | 
                                                                    $describeTaskingResponse//sps:InputDescriptor/sps:definition/swe:DataRecord | $describeTaskingResponse//sps:InputDescriptor/sps:definition/swe:Envelope | 
                                                                    $describeTaskingResponse//sps:InputDescriptor/sps:definition/swe:GeoLocationArea | $describeTaskingResponse//sps:InputDescriptor/sps:definition/swe:NormalizedCurve |
                                                                    $describeTaskingResponse//sps:InputDescriptor/sps:definition/swe:Position/swe:time | $describeTaskingResponse//sps:InputDescriptor/sps:definition/swe:Position/swe:orientation |
                                                                    $describeTaskingResponse//sps:InputDescriptor/sps:definition/swe:Position/swe:velocity | $describeTaskingResponse//sps:InputDescriptor/sps:definition/swe:Position/swe:angularVelocity |
                                                                    $describeTaskingResponse//sps:InputDescriptor/sps:definition/swe:Position/swe:acceleration | $describeTaskingResponse//sps:InputDescriptor/sps:definition/swe:Position/swe:angularAcceleration |
                                                                    $describeTaskingResponse//sps:InputDescriptor/sps:definition/swe:Position/swe:state | $describeTaskingResponse//sps:InputDescriptor/sps:definition/swe:SimpleDataRecord |
                                                                    $describeTaskingResponse//sps:InputDescriptor/sps:definition/swe:Vector | $describeTaskingResponse//sps:InputDescriptor/sps:definition/swe:Curve |
                                                                    $describeTaskingResponse//sps:InputDescriptor/sps:definition/swe:DataArray | $describeTaskingResponse//sps:InputDescriptor/sps:definition/swe:SquareMatrix |
                                                                    $describeTaskingResponse//sps:InputDescriptor/sps:definition/sps:TaskMessageDefinition | $describeTaskingResponse//sps:InputDescriptor/sps:definition/sps:GeometryDefinition |
                                                                    $describeTaskingResponse//sps:InputDescriptor/sps:definition/sps:TemporalDefinition" />
                <xsl:variable name="unhandledInputParameters" select="count($complexInputParameters)>0" />
                <!--Display a form allowing the user to enter in values for the taskable parameters for the selected sensor-->
                <xsl:variable name="enterTaskingOptionsForm">
                    <ctl:form height="640" width="800">
                       <body>
                          <h2>
                          This form allows you to provide values for the parameters of the Submit request that will be sent to <i><xsl:value-of select="$selectedSensorID" /></i>.
                          Please provide valid values for all required fields (and optional fields as appropriate).  In addition, please provide a value for one or more optional fields if optional fields are available.  
                          If valid values are not provided, then the service being tested may fail subsequent Submit tests.
                          </h2>
                          <p>
                          <h2>Please enter values for a WNS URL and User ID (<span style="color: Red; font-weight: bold;">required</span>)</h2>
                          
                             <table border="1" padding="4" bgcolor="#99ccff">
                                    <tr>
                                        <td><b>WNS URL:</b></td>
                                        <td><input name="wnsURL" type="text" /></td>
                                    </tr>
                                    <tr>
                                        <td><b>WNS User ID:</b></td>
                                        <td><input name="wnsUserID" type="text" /></td>
                                    </tr>
                             </table>
                          </p>
                          <p>
                          <xsl:choose>
                              <xsl:when test="not(xsd:boolean($unhandledInputParameters))">
                                  <h2>Please enter valid values for the available taskable parameters for <i><xsl:value-of select="$selectedSensorID" /></i></h2>
                                  
                                     <table border="1" padding="4" bgcolor="#99ccff">
                                        <thead>
                                            <tr>
                                                <th><b>Parameter ID</b></th>
                                                <th><b>Description</b></th>
                                                <th><b>Use</b></th>
                                                <th><b>Type</b></th>
                                                <th><b>Definition</b></th>
                                                <th><b>Units</b></th>
                                                <th><b>Min</b></th>
                                                <th><b>Max</b></th>
                                                <th><b>Value</b></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                        <xsl:for-each select="$describeTaskingResponse//sps:InputDescriptor">
                                            <xsl:variable name="parameterID">
                                                <xsl:value-of select="@parameterID" />
                                            </xsl:variable>
                                            <xsl:variable name="definitionNode" select="sps:definition/*/*[1]" /><!--Replaced sps:commonData with *-->
                                            <xsl:variable name="definitionNodeName" select="local-name-from-QName(node-name($definitionNode))" />
                                            <xsl:variable name="constraintNode" select="$definitionNode/swe:constraint" />
                                            <xsl:variable name="min" select="$constraintNode//swe:min" />
                                            <xsl:variable name="max" select="$constraintNode//swe:max" />
                                            <xsl:variable name="interval" select="$constraintNode//swe:interval" />
                                            <xsl:variable name="intervalParts" select="tokenize($interval,'\s+')" />
                                            <xsl:variable name="intervalMin" select="$intervalParts[1]" />
                                            <xsl:variable name="intervalMax" select="$intervalParts[2]" />
                                            <xsl:variable name="allowedTokens" select="$constraintNode/swe:AllowedTokens//swe:tokenList" />
                                            <xsl:variable name="allowedTokens2" select="$constraintNode/swe:AllowedTokens/swe:valueList" />
                                            <xsl:variable name="allowedTokens2Sequence" select="tokenize($allowedTokens2,'\s+')" />
                                            <xsl:variable name="locationVector" select="$definitionNode//swe:location/swe:Vector" />
                                            <xsl:variable name="coordinates" select="$locationVector//swe:coordinate" />
                                            <tr><xsl:attribute name="id"><xsl:value-of select="concat($parameterID,'_Row')" /></xsl:attribute>
                                                <td><b><i><xsl:attribute name="id"><xsl:value-of select="concat($parameterID,'_ID')" /></xsl:attribute><xsl:value-of select="$parameterID" /></i></b></td>
                                                <td><xsl:attribute name="id"><xsl:value-of select="concat($parameterID,'_Description')" /></xsl:attribute><xsl:value-of select="gml:description" /></td>
                                                <td><xsl:attribute name="id"><xsl:value-of select="concat($parameterID,'_Use')" /></xsl:attribute>
                                                    <xsl:choose>
                                                        <xsl:when test="@use='required'">
                                                            <p style="color: Red; font-weight: bold;"><xsl:value-of select="@use" /></p>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <xsl:value-of select="@use" />
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </td>
                                                <td><xsl:attribute name="id"><xsl:value-of select="concat($parameterID,'_Type')" /></xsl:attribute><xsl:value-of select="$definitionNodeName" /></td>
                                                <td><xsl:attribute name="id"><xsl:value-of select="concat($parameterID,'_Definition')" /></xsl:attribute><xsl:value-of select="$definitionNode/@definition" /></td>
                                                <td><xsl:attribute name="id"><xsl:value-of select="concat($parameterID,'_Units')" /></xsl:attribute><xsl:value-of select="$definitionNode/swe:uom/@code" /></td>
                                                <td><xsl:attribute name="id"><xsl:value-of select="concat($parameterID,'_Min')" /></xsl:attribute>
                                                    <xsl:if test="string-length($min)>0">
                                                        <xsl:value-of select="$min" />
                                                    </xsl:if>
                                                    <xsl:if test="string-length($intervalMin)>0">
                                                        <xsl:value-of select="$intervalMin" />
                                                    </xsl:if>
                                                </td>
                                                <td><xsl:attribute name="id"><xsl:value-of select="concat($parameterID,'_Max')" /></xsl:attribute>
                                                    <xsl:if test="string-length($max)>0">
                                                        <xsl:value-of select="$max" />
                                                    </xsl:if>
                                                    <xsl:if test="string-length($intervalMax)>0">
                                                        <xsl:value-of select="$intervalMax" />
                                                    </xsl:if>
                                                </td>
                                                <td>
                                                    <xsl:choose>
                                                        <xsl:when test="$definitionNodeName='Boolean'">
                                                            <select><xsl:attribute name="name"><xsl:value-of select="concat($parameterID,'_Value')" /></xsl:attribute>
                                                                <option value="true">true</option>
                                                                <option value="false">false</option>
                                                            </select>
                                                        </xsl:when>
                                                        <xsl:when test="$definitionNodeName='Point' or $definitionNodeName='Line' or $definitionNodeName='Polygon'">
                                                            <textarea width="80" height="40"><xsl:attribute name="name"><xsl:value-of select="concat($parameterID,'_Value')" /></xsl:attribute>Enter GML <xsl:value-of select="$definitionNodeName" /> XML here...</textarea>
                                                        </xsl:when>
                                                        <xsl:when test="count($allowedTokens)>0">
                                                            <select><xsl:attribute name="name"><xsl:value-of select="concat($parameterID,'_Value')" /></xsl:attribute>
                                                                <xsl:for-each select="$allowedTokens">
                                                                    <option><xsl:attribute name="value"><xsl:value-of select="." /></xsl:attribute><xsl:value-of select="." /></option>
                                                                </xsl:for-each>
                                                            </select>
                                                        </xsl:when>
                                                        <xsl:when test="count($allowedTokens2Sequence)>0">
                                                            <select><xsl:attribute name="name"><xsl:value-of select="concat($parameterID,'_Value')" /></xsl:attribute>
                                                                <xsl:for-each select="$allowedTokens2Sequence">
                                                                    <option><xsl:attribute name="value"><xsl:value-of select="." /></xsl:attribute><xsl:value-of select="." /></option>
                                                                </xsl:for-each>
                                                            </select>
                                                        </xsl:when>
                                                        <xsl:when test="count($coordinates)>0">
                                                            <xsl:for-each select="$coordinates">
                                                                <xsl:variable name="coordinateInputID" select="concat($parameterID,'_',translate(@name,' ','_'),'_Value')" />
                                                                <xsl:value-of select="concat(@name,':  ')" /><input type="text"><xsl:attribute name="name"><xsl:value-of select="$coordinateInputID" /></xsl:attribute></input>
                                                            </xsl:for-each>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                            <input type="text"><xsl:attribute name="name"><xsl:value-of select="concat($parameterID,'_Value')" /></xsl:attribute></input>
                                                        </xsl:otherwise>
                                                    </xsl:choose>
                                                </td>
                                            </tr>
                                        </xsl:for-each>
                                        </tbody>
                                     </table>
                                  
                              </xsl:when>
                              <xsl:otherwise>
                                  <p>
                                  Please enter valid XML InputParameter elements for the parameters section of a Submit request.  These InputParameters will be used in subsequent Submit tests for testing how the
                                  SPS implementation handles various valid and invalid Submit requests.  Please use the following namespaces in your XML:  <i>sps</i> for SPS schema elements, <i>swe</i> for 
                                  SWE Common schema elements, and <i>gml</i> for GML elements.  An example InputParameter element appears below.
                                  
                                  <p>
                                    <blockquote>
                                        <pre>
&lt;sps:InputParameter parameterID="parameter1"&gt;
    &lt;sps:value&gt;
        &lt;swe:Boolean&gt;
            &lt;swe:value&gt;true&lt;/swe:value&gt;
        &lt;/swe:Boolean&gt;
    &lt;/sps:value&gt;
&lt;/sps:InputParameter&gt;
                                        </pre>
                                    </blockquote>
                                  </p>
                                  </p>
                                  <table border="1" padding="4" bgcolor="#99ccff">
                                    <tr>
                                        <td>
                                            Valid Submit InputParameters (<span style="color: Red; font-weight: bold;">required</span>):
                                        </td>
                                        <td>
                                            <textarea name="validInputParameters" rows="10" cols="50">
                                            </textarea>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            Submit InputParameters (Invalid Parameters) (<span style="color: Red; font-weight: bold;">required</span>):
                                        </td>
                                        <td>
                                            <textarea name="invalidInputParameters" rows="10" cols="50">
                                            </textarea>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            Submit InputParameters (Missing Required Parameters) (<span style="color: Red; font-weight: bold;">required</span>):
                                        </td>
                                        <td>
                                            <textarea name="missingRequiredInputParameters" rows="10" cols="50">
                                            </textarea>
                                        </td>
                                    </tr>
                                  </table>
                              </xsl:otherwise>
                          </xsl:choose>
                          </p>
                          <xsl:variable name="visibilityValue">
                              <xsl:choose>
                                <xsl:when test="xsd:boolean($allowUserSpecifiedTimeFrame)">
                                    <xsl:value-of select="string('visible')" />
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="string('hidden')" />
                                </xsl:otherwise>
                              </xsl:choose>
                          </xsl:variable>
                          <xsl:variable name="displayValue">
                            <xsl:choose>
                                <xsl:when test="xsd:boolean($allowUserSpecifiedTimeFrame)">
                                    <xsl:value-of select="string('inline')" />
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="string('none')" />
                                </xsl:otherwise>
                            </xsl:choose>
                          </xsl:variable>
                            <p>
                                <h2><xsl:attribute name="style"><xsl:value-of select="concat('visibility: ',$visibilityValue,';','display: ',$displayValue,';')" /></xsl:attribute>
                                    Please choose a time frame for this tasking.  The time frame should be a time that occurs in the future; otherwise, your tasking will most likely be rejected.
                                    The supplied value must be an ISO 8601 compliant date/time value (i.e. 2007-12-01T13:21:55.555Z) or duration (i.e. PT5M).  
                                    <i>
                                    NOTE:  The default value that appears below is one hour past the current time, so this value may be used without modification.
                                    </i>
                                </h2>
                            </p>
                            <p>
                             <table border="1" padding="4" bgcolor="#99ccff"><xsl:attribute name="style"><xsl:value-of select="concat('visibility: ',$visibilityValue,';','display: ',$displayValue,';')" /></xsl:attribute>
                                <tr>
                                    <td>timeFrame:</td>
                                    <td><input type="text" name="timeFrame"><xsl:attribute name="value" select="xsd:dateTime(current-dateTime()) + xsd:dayTimeDuration('P0DT1H0M0S')" /></input></td>
                                </tr>
                             </table>
                            </p>
                            <p>
                                <input type="submit" value="Submit"/>
                            </p>
                       </body>
                    </ctl:form>
                </xsl:variable>
                <!--Create a valid Submit request based on user input from the previously displayed form-->
                <xsl:variable name="submitRequest">
                    <ctl:call-function name="spsFunctions:buildSubmitRequest">
                        <ctl:with-param name="sensorID" select="$selectedSensorID" />
                        <ctl:with-param name="describeTaskingResponse" select="$describeTaskingResponse" />
                        <ctl:with-param name="enterTaskingOptionsForm" select="$enterTaskingOptionsForm" />
                        <ctl:with-param name="invalidNotificationTarget" select="false()" />
                        <ctl:with-param name="invalidParameters" select="false()" />
                        <ctl:with-param name="missingRequiredParameters" select="false()" />
                        <ctl:with-param name="invalidTimeFrame" select="false()" />
                        <ctl:with-param name="unhandledInputParameters" select="$unhandledInputParameters" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>Valid Submit request constructed:  <xsl:copy-of select="$submitRequest" /></ctl:message>
                <!--Construct a Submit request with an invalid notificationTarget element-->
                <xsl:variable name="submitRequestInvalidNotificationTarget">
                    <ctl:call-function name="spsFunctions:buildSubmitRequest">
                        <ctl:with-param name="sensorID" select="$selectedSensorID" />
                        <ctl:with-param name="describeTaskingResponse" select="$describeTaskingResponse" />
                        <ctl:with-param name="enterTaskingOptionsForm" select="$enterTaskingOptionsForm" />
                        <ctl:with-param name="invalidNotificationTarget" select="true()" />
                        <ctl:with-param name="invalidParameters" select="false()" />
                        <ctl:with-param name="missingRequiredParameters" select="false()" />
                        <ctl:with-param name="invalidTimeFrame" select="false()" />
                        <ctl:with-param name="unhandledInputParameters" select="$unhandledInputParameters" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>Submit request constructed with an invalid notificationTarget element:  <xsl:copy-of select="$submitRequestInvalidNotificationTarget/*" /></ctl:message>
                <!--Construct a Submit request with an invalid sensorID element-->
                <xsl:variable name="invalidSensorID" select="string('This is an invalid sensorID...')" />
                <xsl:variable name="submitRequestInvalidSensorID">
                    <ctl:call-function name="spsFunctions:buildSubmitRequest">
                        <ctl:with-param name="sensorID" select="$invalidSensorID" />
                        <ctl:with-param name="describeTaskingResponse" select="$describeTaskingResponse" />
                        <ctl:with-param name="enterTaskingOptionsForm" select="$enterTaskingOptionsForm" />
                        <ctl:with-param name="invalidNotificationTarget" select="false()" />
                        <ctl:with-param name="invalidParameters" select="false()" />
                        <ctl:with-param name="missingRequiredParameters" select="false()" />
                        <ctl:with-param name="invalidTimeFrame" select="false()" />
                        <ctl:with-param name="unhandledInputParameters" select="$unhandledInputParameters" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>Submit request constructed with an invalid sensorID element:  <xsl:copy-of select="$submitRequestInvalidSensorID/*" /></ctl:message>
                <!--Construct a Submit request with an invalid parameter elements-->
                <xsl:variable name="submitRequestInvalidParameters">
                    <ctl:call-function name="spsFunctions:buildSubmitRequest">
                        <ctl:with-param name="sensorID" select="$selectedSensorID" />
                        <ctl:with-param name="describeTaskingResponse" select="$describeTaskingResponse" />
                        <ctl:with-param name="enterTaskingOptionsForm" select="$enterTaskingOptionsForm" />
                        <ctl:with-param name="invalidNotificationTarget" select="false()" />
                        <ctl:with-param name="invalidParameters" select="true()" />
                        <ctl:with-param name="missingRequiredParameters" select="false()" />
                        <ctl:with-param name="invalidTimeFrame" select="false()" />
                        <ctl:with-param name="unhandledInputParameters" select="$unhandledInputParameters" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>Submit request constructed with invalid parameters:  <xsl:copy-of select="$submitRequestInvalidParameters/*" /></ctl:message>
                <!--Construct a Submit request with a missing required parameter elements-->
                <xsl:variable name="submitRequestMissingRequiredParameters">
                    <ctl:call-function name="spsFunctions:buildSubmitRequest">
                        <ctl:with-param name="sensorID" select="$selectedSensorID" />
                        <ctl:with-param name="describeTaskingResponse" select="$describeTaskingResponse" />
                        <ctl:with-param name="enterTaskingOptionsForm" select="$enterTaskingOptionsForm" />
                        <ctl:with-param name="invalidNotificationTarget" select="false()" />
                        <ctl:with-param name="invalidParameters" select="false()" />
                        <ctl:with-param name="missingRequiredParameters" select="true()" />
                        <ctl:with-param name="invalidTimeFrame" select="false()" />
                        <ctl:with-param name="unhandledInputParameters" select="$unhandledInputParameters" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>Submit request constructed with missing required parameters:  <xsl:copy-of select="$submitRequestMissingRequiredParameters/*" /></ctl:message>
                <!--Construct a Submit request with an invalid timeFrame element-->
                <xsl:variable name="submitRequestInvalidTimeFrame">
                    <ctl:call-function name="spsFunctions:buildSubmitRequest">
                        <ctl:with-param name="sensorID" select="$selectedSensorID" />
                        <ctl:with-param name="describeTaskingResponse" select="$describeTaskingResponse" />
                        <ctl:with-param name="enterTaskingOptionsForm" select="$enterTaskingOptionsForm" />
                        <ctl:with-param name="invalidNotificationTarget" select="false()" />
                        <ctl:with-param name="invalidParameters" select="false()" />
                        <ctl:with-param name="missingRequiredParameters" select="false()" />
                        <ctl:with-param name="invalidTimeFrame" select="true()" />
                        <ctl:with-param name="unhandledInputParameters" select="$unhandledInputParameters" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>Submit request constructed with an invalid timeFrame element:  <xsl:copy-of select="$submitRequestInvalidTimeFrame/*" /></ctl:message>
                <!--Submit requests with invalid parameters-->
                <!--These tests were moved above the valid Submit request to ensure that service actually checks for invalid parameters.  If these tests appeared after the valid Submit request, then the tests might fail due to unexpected results (i.e. a rejected response since the sensor is in use)-->
                <ctl:message>**********************************************************************</ctl:message>
                <ctl:call-test name="sps:core-SPS.Submit-RequestInvalidNotificationTarget.1">
                    <ctl:with-param name="submitURL" select="$submitURL" />
                    <ctl:with-param name="submitRequest" select="$submitRequestInvalidNotificationTarget" />
                </ctl:call-test>
                <ctl:message>**********************************************************************</ctl:message>
                <ctl:call-test name="sps:core-SPS.Submit-RequestSensorParamInvalidSensorID.1">
                  <ctl:with-param name="submitURL" select="$submitURL" />
                  <ctl:with-param name="submitRequest" select="$submitRequestInvalidSensorID" />
                  <ctl:with-param name="invalidSensorID" select="$invalidSensorID" />
                </ctl:call-test>
                <ctl:message>**********************************************************************</ctl:message>
                <ctl:call-test name="sps:core-SPS.Submit-RequestSensorParamInvalidParameters.1">
                  <ctl:with-param name="submitURL" select="$submitURL" />
                  <ctl:with-param name="submitRequest" select="$submitRequestInvalidParameters" />
                </ctl:call-test>
                <!--Only execute the MissingRequiredParameters test if the service advertises required parameters-->
                <xsl:if test="xsd:boolean($runMissingRequiredParametersTest)">
                    <ctl:message>**********************************************************************</ctl:message>
                    <ctl:call-test name="sps:core-SPS.Submit-RequestSensorParamParametersMissingRequiredParameters.1">
                      <ctl:with-param name="submitURL" select="$submitURL" />
                      <ctl:with-param name="submitRequest" select="$submitRequestMissingRequiredParameters" />
                    </ctl:call-test>
                </xsl:if>
                <ctl:message>**********************************************************************</ctl:message>
                <ctl:call-test name="sps:core-SPS.Submit-RequestValidTimeFrame.1">
                  <ctl:with-param name="submitURL" select="$submitURL" />
                  <ctl:with-param name="submitRequest" select="$submitRequestInvalidTimeFrame" />
                </ctl:call-test>
                <ctl:message>Issuing a valid Submit request...</ctl:message>
                <!--Execute the valid Submit request-->
                <xsl:variable name="submitResponse">
                    <ctl:request>
                        <ctl:url>
                            <xsl:value-of select="$submitURL" />
                        </ctl:url>
                        <ctl:method>post</ctl:method>
                        <ctl:body>
                            <xsl:copy-of select="$submitRequest" />
                        </ctl:body>
                        <ctl:call-function name="spsFunctions:validateSubmitResponse" />
                    </ctl:request>
                </xsl:variable>
                <!--Get the approximate time the request was submitted.  This will be used for later tests-->
                <xsl:variable name="submitTime">
                    <!--<ctl:call-function name="spsFunctions:getCurrentDateTime" />-->
                    <xsl:value-of select="current-dateTime()" />
                </xsl:variable>
                <ctl:message>**********************************************************************</ctl:message>
                <ctl:message>Valid Submit request submitted at:  <xsl:value-of select="$submitTime" /></ctl:message>
                <!--Call the response tests using the Submit response from the user input-->
                <ctl:message>**********************************************************************</ctl:message>
                <ctl:call-test name="sps:core-SPS.Submit-ResponseMain.1">
                    <ctl:with-param name="submitURL" select="$submitURL" />
                    <ctl:with-param name="submitRequest" select="$submitRequest" />
                    <ctl:with-param name="submitResponse" select="$submitResponse" />
                    <ctl:with-param name="submitTime" select="$submitTime" />
                    <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                </ctl:call-test>
                <!--Call the other request tests using the Submit request that was constructed previously-->
                <ctl:message>**********************************************************************</ctl:message>
                <ctl:call-test name="sps:core-SPS.Submit-RequestSensorParamParametersExpectedResponse.1">
                  <ctl:with-param name="submitURL" select="$submitURL" />
                  <ctl:with-param name="submitRequest" select="$submitRequest" />
                  <ctl:with-param name="submitResponse" select="$submitResponse" />
                </ctl:call-test>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-RequestInvalidNotificationTarget.1">
      <ctl:param name="submitURL" />
      <ctl:param name="submitRequest" />
      <ctl:assertion>Invalid data in the notificationTarget element of a Submit request produces a valid exception message.</ctl:assertion>
      <ctl:comment>Pass if a returned exception message is a valid exception report and has an exceptionCode value that is valid for the Submit operation; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server handles invalid notification target information correctly.  This includes notificationID being null and notificationURL being unresolvable to a valid WNS.">docs/SPS%201.0%20ATS.html#SPS.Submit-RequestInvalidNotificationTarget</ctl:link>
      <ctl:code>
        <!--Replace the notificationID in a valid request with an invalid notificationID-->
        <!--Replace the notificationURL in a valid request with an invalid notificationURL-->
        <!--Replace the notificationID and notificationURL in a valid request with invalid values-->
        <ctl:message>Sending a Submit request with an invalid notificationTarget element...</ctl:message>
        <xsl:variable name="submitResponse">
                    <ctl:request>
                        <ctl:url>
                            <xsl:value-of select="$submitURL" />
                        </ctl:url>
                        <ctl:method>post</ctl:method>
                        <ctl:body>
                            <xsl:copy-of select="$submitRequest" />
                        </ctl:body>
                        <ctl:call-function name="spsFunctions:validateSubmitResponse" />
                    </ctl:request>
        </xsl:variable>
        <ctl:message>Response:  <xsl:copy-of select="$submitResponse" /></ctl:message>
        <xsl:choose>
            <xsl:when test="not($submitResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response or the response was not valid according to the expected schema when a Submit request with an invalid notificationTarget element was submitted.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($submitResponse)" /></ctl:message>
                <ctl:message>Checking the validity of the response to a Submit request with an invalid notificationTarget element.</ctl:message>
                <xsl:variable name="isCorrect1">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$submitResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('notificationID')" />
                    </ctl:call-function>
                </xsl:variable>
                <xsl:variable name="isCorrect2">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$submitResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('notificationURL')" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>The validity check returned:  <xsl:value-of select="xsd:boolean($isCorrect1) or xsd:boolean($isCorrect2)" /></ctl:message>
                <xsl:if test="not(xsd:boolean($isCorrect1) or xsd:boolean($isCorrect2))">
                    <ctl:message>FAILURE:  An exception report with an exceptionCode value of "InvalidParameterValue" and a locator value of "notificationTarget" was expected.  "<xsl:value-of select="$submitResponse" />" was returned instead.</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-RequestSensorParamInvalidSensorID.1">
      <ctl:param name="submitURL" />
      <ctl:param name="submitRequest" />
      <ctl:param name="invalidSensorID" />
      <ctl:assertion>The server returns a valid exception message with a value of UnknownSensorID for the exceptionCode and the unknown sensorID for the locator. </ctl:assertion>
      <ctl:comment>Pass if a returned exception message is a valid exception report and has an exceptionCode value of UnknownSensorID and a locator value listing the unknown sensorID; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server returns a valid exception message when an invalid sensorID is provided in the request.">docs/SPS%201.0%20ATS.html#SPS.Submit-RequestSensorParamInvalidSensorID</ctl:link>
      <ctl:code>
        <!--Replace the sensorID in a valid request with an invalid value-->
        <ctl:message>Sending a Submit request with an invalid sensorID element...</ctl:message>
        <xsl:variable name="submitResponse">
                    <ctl:request>
                        <ctl:url>
                            <xsl:value-of select="$submitURL" />
                        </ctl:url>
                        <ctl:method>post</ctl:method>
                        <ctl:body>
                            <xsl:copy-of select="$submitRequest" />
                        </ctl:body>
                        <ctl:call-function name="spsFunctions:validateSubmitResponse" />
                    </ctl:request>
        </xsl:variable>
        <ctl:message>Response:  <xsl:copy-of select="$submitResponse" /></ctl:message>
        <xsl:choose>
            <xsl:when test="not($submitResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response or the response was not valid according to the expected schema when a Submit request with an invalid sensorID element was submitted.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($submitResponse)" /></ctl:message>
                <ctl:message>Checking the validity of the response to a Submit request with an invalid sensorID element.</ctl:message>
                <xsl:variable name="isCorrect">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$submitResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('UnknownSensorID')" />
                        <ctl:with-param name="locatorToCheck" select="$invalidSensorID" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                <xsl:if test="not(xsd:boolean($isCorrect))">
                    <ctl:message>FAILURE:  An exception report with an exceptionCode value of "UnknownSensorID" and a locator value of "" was expected.  "<xsl:value-of select="$submitResponse" />" was returned instead.</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-RequestSensorParamInvalidParameters.1">
      <ctl:param name="submitURL" />
      <ctl:param name="submitRequest" />
      <ctl:assertion>The server returns a valid Submit response with a status element value of rejected when invalid parameter values are supplied in the request. </ctl:assertion>
      <ctl:comment>Pass if a returned Submit response is valid and the status element has a value of rejected; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server returns a Submit response of rejected when invalid parameter values are supplied in the request.">docs/SPS%201.0%20ATS.html#SPS.Submit-RequestSensorParamInvalidParameters</ctl:link>
      <ctl:code>
        <!--Replace the parameterID value(s) in a valid Submit request with invalid values-->
        <ctl:message>Sending a Submit request with an invalid parameters...</ctl:message>
        <xsl:variable name="submitResponse">
                    <ctl:request>
                        <ctl:url>
                            <xsl:value-of select="$submitURL" />
                        </ctl:url>
                        <ctl:method>post</ctl:method>
                        <ctl:body>
                            <xsl:copy-of select="$submitRequest" />
                        </ctl:body>
                        <ctl:call-function name="spsFunctions:validateSubmitResponse" />
                    </ctl:request>
        </xsl:variable>
        <ctl:message>Response:  <xsl:copy-of select="$submitResponse" /></ctl:message>
        <xsl:choose>
            <xsl:when test="not($submitResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response, or the response was not valid according to the expected schema when a Submit request with invalid parameter values was submitted.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                        <xsl:when test="$submitResponse//ows:ExceptionReport">
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="sps:core-SPS.Submit-ValidException.1">
                                <ctl:with-param name="submitResponse" select="$submitResponse" />
                            </ctl:call-test>
                            <ctl:message>FAILURE:  The response to a Submit request was expected to be a SubmitRequestResponse document; an ExceptionReport was returned instead.</ctl:message>
                            <ctl:fail />
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:variable name="status" select="$submitResponse//sps:status" />
                            <xsl:if test="not($status='rejected')">
                                <ctl:message>FAILURE:  The server returned a valid Submit response, but the status element was expected to be "rejected" instead of "<xsl:value-of select="$status" />".</ctl:message>
                                <ctl:fail />
                            </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-RequestSensorParamParametersMissingRequiredParameters.1">
      <ctl:param name="submitURL" />
      <ctl:param name="submitRequest" />
      <ctl:assertion>The server returns a valid Submit response with a status element value of incomplete request when required parameters are missing from the request.</ctl:assertion>
      <ctl:comment>Pass if a returned Submit response is valid and the status element has a value of incomplete request; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server returns a Submit response of incomplete request when required parameters are missing from the request.">docs/SPS%201.0%20ATS.html#SPS.Submit-RequestSensorParamParametersMissingRequiredParameters</ctl:link>
      <ctl:code>
        <!--Eliminate one or more required parameters from a valid Submit request-->
        <ctl:message>Sending a Submit request with missing required parameters...</ctl:message>
        <xsl:variable name="submitResponse">
                    <ctl:request>
                        <ctl:url>
                            <xsl:value-of select="$submitURL" />
                        </ctl:url>
                        <ctl:method>post</ctl:method>
                        <ctl:body>
                            <xsl:copy-of select="$submitRequest" />
                        </ctl:body>
                        <ctl:call-function name="spsFunctions:validateSubmitResponse" />
                    </ctl:request>
        </xsl:variable>
        <ctl:message>Response:  <xsl:copy-of select="$submitResponse" /></ctl:message>
        <xsl:choose>
            <xsl:when test="not($submitResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response or the response was not valid according to the expected schema when a Submit request with missing required parameters was submitted.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                        <xsl:when test="$submitResponse//ows:ExceptionReport">
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="sps:core-SPS.Submit-ValidException.1">
                                <ctl:with-param name="submitResponse" select="$submitResponse" />
                            </ctl:call-test>
                            <ctl:message>FAILURE:  The response to a Submit request was expected to a SubmitRequestResponse document; an ExceptionReport was returned instead.</ctl:message>
                            <ctl:fail />
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:variable name="status" select="$submitResponse//sps:status" />
                            <xsl:if test="not($status='incomplete request')">
                                <ctl:message>FAILURE:  The server returned a valid Submit response, but the status element was expected to be "incomplete request" instead of "<xsl:value-of select="$status" />".</ctl:message>
                                <ctl:fail />
                            </xsl:if>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-RequestSensorParamParametersExpectedResponse.1">
      <ctl:param name="submitURL" />
      <ctl:param name="submitRequest" />
      <ctl:param name="submitResponse" />
      <ctl:assertion>The server returns a valid Submit response with expected values given the parameter values supplied in the request.</ctl:assertion>
      <ctl:comment>Pass if a returned Submit response is valid and the values for the parameters are expected based on the request; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server returns an expected Submit response given the parameter values in the request.  Test various parameter combinations.">docs/SPS%201.0%20ATS.html#SPS.Submit-RequestSensorParamParametersExpectedResponse</ctl:link>
      <ctl:code>
        <xsl:choose>
            <xsl:when test="not($submitResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response or the response was not valid according to the expected schema when a Submit request with invalid parameter values was submitted.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <xsl:variable name="submitResponseForm">
                    <ctl:form height="640" width="800">
                        <body>
                            <p>
                                <h2>The server returned the following response to the valid Submit request you created earlier:</h2>
                                <table id="submitResponseTable" border="1" padding="4" bgcolor="#99ccff">
                                <xsl:choose>
                                    <xsl:when test="$submitResponse//ows:Exception">
                                        <caption>Exception Report</caption>
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Value</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td>
                                                    exceptionCode:
                                                </td>
                                                <td>
                                                    <xsl:value-of select="$submitResponse//ows:Exception/@exceptionCode" />
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    locator:
                                                </td>
                                                <td>
                                                    <xsl:value-of select="$submitResponse//ows:Exception/@locator" />
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    Exception Text:
                                                </td>
                                                <td>
                                                    <xsl:value-of select="$submitResponse//ows:Exception/ows:ExceptionText" />
                                                </td>
                                            </tr>
                                        </tbody>
                                    </xsl:when>
                                    <xsl:otherwise>
                                            <thead>
                                                <tr>
                                                    <th>Name</th>
                                                    <th>Value</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr>
                                                    <td>taskID:</td>
                                                    <td><xsl:value-of select="$submitResponse//sps:taskID" /></td>
                                                </tr>
                                                <tr>
                                                    <td>status:</td>
                                                    <td>
                                                            <xsl:variable name="status" select="$submitResponse//sps:status/text()"/>
                                                            <span>
                                                                <xsl:choose>
                                                                    <xsl:when test="$status='confirmed'">
                                                                        <xsl:attribute name="style"><xsl:value-of select="string('color: Green; font-weight: bold;')" /></xsl:attribute>
                                                                    </xsl:when>
                                                                    <xsl:otherwise>
                                                                        <xsl:attribute name="style"><xsl:value-of select="string('color: Red; font-weight: bold;')" /></xsl:attribute>
                                                                    </xsl:otherwise>
                                                                </xsl:choose>
                                                                <xsl:value-of select="$status" />
                                                            </span>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td>description:</td>
                                                    <td><xsl:value-of select="$submitResponse//gml:description" /></td>
                                                </tr>
                                                <tr>
                                                    <td>estimatedToC:</td>
                                                    <td><xsl:value-of select="$submitResponse//sps:estimatedToC" /></td>
                                                </tr>
                                                <tr>
                                                    <td>alternative:</td>
                                                    <td>
                                                        <xsl:for-each select="$submitResponse//sps:alternative">
                                                            <p><xsl:value-of select="." /></p>
                                                        </xsl:for-each>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td>LatestResponseTime:</td>
                                                    <td><xsl:value-of select="$submitResponse//sps:LatestResponseTime" /></td>
                                                </tr>
                                            </tbody>
                                    </xsl:otherwise>
                                </xsl:choose>
                                </table>
                                <h2>Is this the expected response?</h2>
                                <input type="submit" name="answer" value="yes" />
                                <input type="submit" name="answer" value="no" />
                            </p>
                        </body>
                    </ctl:form>
                </xsl:variable>
                <xsl:if test="$submitResponseForm//values/value[@key='answer']='no'">
                    <ctl:message>FAILURE:  The response to a valid Submit request was not what the user expected.</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-RequestValidTimeFrame.1">
      <ctl:param name="submitURL" />
      <ctl:param name="submitRequest" />
      <ctl:assertion>The server returns a valid Submit response with a status element value of rejected when an invalid time value (before the current time, etc.) is supplied in the timeFrame parameter.</ctl:assertion>
      <ctl:comment>Pass if a returned Submit response is valid and the status element has a value of "rejected"; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the server returns a Submit response of rejected when an invalid time value is supplied in the timeFrame parameter.">docs/SPS%201.0%20ATS.html#SPS.Submit-RequestValidTimeFrame</ctl:link>
      <ctl:code>
        <!--Modify the timeFrame value to occur in the past-->
        <ctl:message>Sending a Submit request with an invalid timeFrame element...</ctl:message>
        <xsl:variable name="submitResponse">
                    <ctl:request>
                        <ctl:url>
                            <xsl:value-of select="$submitURL" />
                        </ctl:url>
                        <ctl:method>post</ctl:method>
                        <ctl:body>
                            <xsl:copy-of select="$submitRequest" />
                        </ctl:body>
                        <ctl:call-function name="spsFunctions:validateSubmitResponse" />
                    </ctl:request>
        </xsl:variable>
        <ctl:message>Response:  <xsl:copy-of select="$submitResponse" /></ctl:message>
        <xsl:choose>
            <xsl:when test="not($submitResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response or the response was not valid according to the expected schema when a Submit request with an invalid timeFrame element was submitted.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                    <xsl:when test="$submitResponse//ows:ExceptionReport">
                        <ctl:message>**********************************************************************</ctl:message>
                        <ctl:call-test name="sps:core-SPS.Submit-ValidException.1">
                            <ctl:with-param name="submitResponse" select="$submitResponse" />
                        </ctl:call-test>
                        <ctl:message>FAILURE:  The response to a Submit request was expected to a SubmitRequestResponse document; an ExceptionReport was returned instead.</ctl:message>
                        <ctl:fail />
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:variable name="status" select="$submitResponse//sps:status" />
                        <ctl:message>Checking for a value in the status element.  The following value was returned:  "<xsl:value-of select="$status" />".</ctl:message>
                        <xsl:if test="not($status='rejected')">
                            <ctl:message>FAILURE:  The server returned a valid Submit response, but the status element value was expected to be "rejected" instead of "<xsl:value-of select="$status" />".</ctl:message>
                            <ctl:fail />
                        </xsl:if>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-ResponseMain.1">
      <ctl:param name="submitURL" />
      <ctl:param name="submitRequest" />
      <ctl:param name="submitResponse" />
      <ctl:param name="submitTime" />
      <ctl:param name="describeResultAccessURL" />
      <ctl:assertion>The response to a valid Submit request contains valid values for its sub-elements</ctl:assertion>
      <ctl:comment>Pass if the response is a valid SubmitRequestResponse document and the values of the sub-elements are valid</ctl:comment>
      <ctl:link title="">docs/SPS%201.0%20ATS.html#SPS.Submit-ResponseMain</ctl:link>
      <ctl:code>
        <xsl:choose>
            <xsl:when test="not($submitResponse/*)">
                <ctl:message>FAILURE:  The server did not return a response for the Submit request, or the response was not valid according to the SubmitRequestResponse schema</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <xsl:choose>
                        <xsl:when test="$submitResponse//ows:ExceptionReport">
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="sps:core-SPS.Submit-ValidException.1">
                                <ctl:with-param name="submitResponse" select="$submitResponse" />
                            </ctl:call-test>
                            <ctl:message>FAILURE:  The response to a Submit request was expected to a SubmitRequestResponse document; an ExceptionReport was returned instead.</ctl:message>
                            <ctl:fail />
                        </xsl:when>
                        <xsl:otherwise>
                            <ctl:message>The Submit response contains the following elements:</ctl:message>
                            <xsl:for-each select="$submitResponse/*">
                                <ctl:message>Element name:  <xsl:value-of select="local-name-from-QName(node-name(.))" /> (namespace:  <xsl:value-of select="namespace-uri-from-QName(node-name(.))" />)</ctl:message>
                            </xsl:for-each>
                            <ctl:message>Checking these elements for validity...</ctl:message>
                            <!--Validate taskID in the response-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="sps:core-SPS.Submit-ResponseValidTaskID.1">
                                <ctl:with-param name="submitResponse" select="$submitResponse" />
                                <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                            </ctl:call-test>
                            <!--Validate estimatedToC in the response-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="sps:core-SPS.Submit-ResponseValidEstimatedToC.1">
                                <ctl:with-param name="submitResponse" select="$submitResponse" />
                                <ctl:with-param name="submitTime" select="$submitTime" />
                            </ctl:call-test>
                            <!--Validate taskID in the response-->
                            <xsl:if test="$submitResponse//sps:status[text()='rejected, alternatives available'] or count($submitResponse//sps:alternative)>0">
                                <ctl:message>**********************************************************************</ctl:message>
                                <ctl:call-test name="sps:core-SPS.Submit-ResponseCorrectUseOfAlternative.1">
                                    <ctl:with-param name="submitResponse" select="$submitResponse" />
                                </ctl:call-test>
                            </xsl:if>
                            <!--Validate LatestResponseTime in the response-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="sps:core-SPS.Submit-ResponseValidLatestResponseTime.1">
                                <ctl:with-param name="submitResponse" select="$submitResponse" />
                                <ctl:with-param name="submitTime" select="$submitTime" />
                            </ctl:call-test>
                        </xsl:otherwise>
                </xsl:choose>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-ResponseValidTaskID.1">
      <ctl:param name="submitResponse" />
      <ctl:param name="describeResultAccessURL" />
      <ctl:assertion>The taskID parameter of a Submit response contains a value.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid Submit response and the taskID parameter of the response contains a value; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the taskID parameter of a Submit response contains a value.">docs/SPS%201.0%20ATS.html#SPS.Submit-ResponseValidTaskID</ctl:link>
      <ctl:code>
        <xsl:variable name="taskID" select="$submitResponse//sps:taskID" />
        <ctl:message>Checking for a value in the taskID element.  The following value was returned "<xsl:value-of select="$taskID" />".</ctl:message>
        <xsl:choose>
            <xsl:when test="string-length(normalize-space($taskID))=0">
                <ctl:message>FAILURE:  The taskID in the response for the Submit request was null.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>**********************************************************************</ctl:message>
                <ctl:message>The returned taskID "<xsl:value-of select="$taskID" />" is valid.  Executing DescribeResultAccess tests with this taskID...</ctl:message>
                <ctl:call-test name="sps:core-SPS.DescribeResultAccess-ResponseMain-TaskID.1">
                    <ctl:with-param name="describeResultAccessURL" select="$describeResultAccessURL" />
                    <ctl:with-param name="validTaskID" select="$taskID" />
                </ctl:call-test>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-ResponseValidEstimatedToC.1">
      <ctl:param name="submitResponse" />
      <ctl:param name="submitTime" />
      <ctl:assertion>If the estimatedToC element appears in the response, then this element contains a value that is a valid time value that occurs after the time the request was submitted.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid Submit response and the estimatedToC parameter of the response contains a value that is a valid time value and occurs after the time the request was submitted; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the estimatedToC parameter of a Submit response occurs after the time the request was submitted.">docs/SPS%201.0%20ATS.html#SPS.Submit-ResponseValidEstimatedToC</ctl:link>
      <ctl:code>
        <xsl:choose>
            <xsl:when test="$submitResponse//sps:estimatedToC">
                <xsl:variable name="estimatedToC" select="$submitResponse//sps:estimatedToC/gml:TimeInstant/*" />
                <xsl:choose>
                    <xsl:when test="string-length(normalize-space($estimatedToC))>0">
                        <ctl:message>Checking "<xsl:value-of select="$estimatedToC" />" for validity...</ctl:message>
                        <xsl:variable name="isTimeValid">
                            <ctl:call-function name="spsFunctions:checkTime">
                                <ctl:with-param name="timeToCheck" select="$estimatedToC" />
                                <ctl:with-param name="compareTime" select="$submitTime" />
                            </ctl:call-function>
                        </xsl:variable>
                        <ctl:message>The validity check returned:  <xsl:value-of select="$isTimeValid" /></ctl:message>
                        <xsl:if test="not(xsd:boolean($isTimeValid))">
                            <ctl:message>FAILURE:  The value in the estimatedToC element (<xsl:value-of select="$estimatedToC" />) is an invalid time value or does not occur after the time the Submit request was submitted (<xsl:value-of select="$submitTime" />)</ctl:message>
                            <ctl:fail />
                        </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                            <ctl:message>FAILURE:  The value in the estimatedToC element is null.</ctl:message>
                            <ctl:fail />
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>An estimatedToC element was not found in the Submit response; therefore, nothing will be tested.</ctl:message>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-ResponseCorrectUseOfAlternative.1">
      <ctl:param name="submitResponse" />
      <ctl:assertion>If the status value is rejected, alternatives available, then a valid value is provided for the alternative parameter.  If a value is provided for the alternative parameter, then the status value is rejected, alternatives available.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid Submit response with a status of "rejected, alternatives available" and the alternative parameter is provided and has a value; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the alternative parameter of a Submit response is used only when the status is rejected, alternatives available.">docs/SPS%201.0%20ATS.html#SPS.Submit-ResponseCorrectUseOfAlternative</ctl:link>
      <ctl:code>
        <xsl:variable name="status">
            <xsl:value-of select="$submitResponse//sps:status" />
        </xsl:variable>
        <xsl:variable name="isStatusRejected" select="$status='rejected, alternatives available'" />
        <xsl:variable name="alternativeElement" select="$submitResponse//sps:alternative/*" />
        <xsl:if test="($isStatusRejected and not($alternativeElement)) or (not($isStatusRejected) and $alternativeElement)">
            <ctl:message>FAILURE:  When the status is "rejected, alternatives available", at least one alternative element should be supplied; when one or more alternative elements are supplied, then the status should be "rejected, alternatives available".</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-ResponseValidLatestResponseTime.1">
      <ctl:param name="submitResponse" />
      <ctl:param name="submitTime" />
      <ctl:assertion>The LatestResponseTime value of the Submit response is a valid time value that occurs after the time the request was submitted.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid Submit response with a LatestResponseTime parameter value time occuring after the time the request was submitted; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that the LatestResponseTime parameter of a Submit response occurs after the time the request was submitted.">docs/SPS%201.0%20ATS.html#SPS.Submit-ResponseValidLatestResponseTime</ctl:link>
      <ctl:code>
        <xsl:variable name="latestResponseTime">
            <xsl:value-of select="$submitResponse//sps:LatestResponseTime/gml:TimeInstant/*" />
        </xsl:variable>
        <xsl:choose>
            <xsl:when test="string-length(normalize-space($latestResponseTime))>0">
                <ctl:message>Checking "<xsl:value-of select="$latestResponseTime" />" for validity...</ctl:message>
                <xsl:variable name="isTimeValid">
                    <ctl:call-function name="spsFunctions:checkTime">
                        <ctl:with-param name="timeToCheck" select="$latestResponseTime" />
                        <ctl:with-param name="compareTime" select="$submitTime" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>The validity check returned:  <xsl:value-of select="$isTimeValid" /></ctl:message>
                <xsl:if test="not(xsd:boolean($isTimeValid))">
                    <ctl:message>FAILURE:  The value in the LatestResponseTime element (<xsl:value-of select="$latestResponseTime" />) is an invalid time value or does not occur after the time the Submit request was submitted (<xsl:value-of select="$submitTime" />)</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>FAILURE:  The value in the LatestResponseTime element is null.</ctl:message>
                <ctl:fail />
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.Submit-ValidException.1">
      <ctl:param name="submitResponse" />
      <ctl:assertion>An exception message returned by the server is a valid exception message for the Submit operation.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid exception message for the Submit operation; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that any exception message returned by the server is a valid exception message for the Submit operation.">docs/SPS%201.0%20ATS.html#SPS.Submit-ValidException</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <xsl:variable name="validExceptionCodes">
            <spsTesting:ExceptionCodes>
                <spsTesting:exceptionCode>OperationNotSupported</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>MissingParameterValue</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>InvalidParameterValue</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>UknownSensorID</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>NoApplicableCode</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>FeasibilityIDExpired</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>InvalidRequest</spsTesting:exceptionCode>
            </spsTesting:ExceptionCodes>
        </xsl:variable>
        <xsl:variable name="isValid">
            <ctl:call-function name="spsFunctions:verifyExceptionCode">
                <ctl:with-param name="operationName" select="string('Submit')" />
                <ctl:with-param name="validExceptionCodes" select="$validExceptionCodes" />
                <ctl:with-param name="exceptionReport" select="$submitResponse" />
            </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$submitResponse//ows:ExceptionReport and not(xsd:boolean($isValid))">
            <ctl:message>FAILURE:  The exception report returned is not a valid exception report for the Submit operation.</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
    
    <!--DescribeResultAccess tests-->
    <ctl:test name="sps:core-SPS.DescribeResultAccess-RequestNullSensorID.1">
      <ctl:param name="describeResultAccessURL" />
      <ctl:assertion>A null sensorID in the request produces a valid exception message of InvalidParameterValue with sensorID listed in the locator field.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid exception message with an exceptionCode value of InvalidParameterValue and sensorID listed in the locator field; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that a null sensorID in the request produces a valid exception message of InvalidParameterValue.">docs/SPS%201.0%20ATS.html#SPS.DescribeResultAccess-RequestNullSensorID</ctl:link>
      <ctl:code>
        <!--
                    1.)  Issue a DescribeResultAccess request
                    2.)  Validate the response against the ExceptionReport schema
                    3.)  Check the values in the response
                -->
        <ctl:message>Issuing a DescribeResultAccess request with a null sensorID...</ctl:message>
        <xsl:variable name="describeResultAccessRequestResponse">
            <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeResultAccessURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeResultAccess xmlns="http://www.opengis.net/sps/1.0" service="SPS" version="1.0.0">
                            <sensorID></sensorID>
                        </DescribeResultAccess>
                    </ctl:body>
                    <ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
                </ctl:request>
        </xsl:variable>
        <ctl:message>Response:  <xsl:copy-of select="$describeResultAccessRequestResponse" /></ctl:message>
        <xsl:choose>
            <xsl:when test="not($describeResultAccessRequestResponse/*)">
                <ctl:message>FAILURE:  Sending a DescribeResultAccess request with a null sensorID parameter did not return a response or the response was not valid according to the expected schema.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeResultAccessRequestResponse)" /></ctl:message>
                <ctl:message>Checking the validity of the response to a DescribeResultAccess request with a null sensorID parameter.</ctl:message>
                <xsl:variable name="isCorrect">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$describeResultAccessRequestResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('sensorID')" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                <xsl:if test="not(xsd:boolean($isCorrect))">
                    <ctl:message>FAILURE:  The response to a DescribeResultAccess request with a null sensorID parameter was expected to be an exception report with an exceptionCode of "InvalidParameterValue" and a locator value of "sensorID".</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeResultAccess-RequestInvalidSensorID.1">
      <ctl:param name="describeResultAccessURL" />
      <ctl:assertion>An invalid sensorID in the request produces a valid exception message of UnknownSensorID.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid exception message with an exceptionCode value of UnknownSensorID and the unknown sensorID listed in the locator field; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that an invalid sensorID in the request produces a valid exception message of UnknownSensorID.">docs/SPS%201.0%20ATS.html#SPS.DescribeResultAccess-RequestInvalidSensorID</ctl:link>
      <ctl:code>
        <xsl:variable name="sensorID" select="string('This is an invalid sensorID...')" />
        <ctl:message>Issuing a DescribeResultAccess request with the following sensorID:  "<xsl:value-of select="$sensorID" />"...</ctl:message>
        <xsl:variable name="describeResultAccessRequestResponse">
            <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeResultAccessURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeResultAccess xmlns="http://www.opengis.net/sps/1.0" service="SPS" version="1.0.0">
                            <sensorID><xsl:value-of select="$sensorID" /></sensorID>
                        </DescribeResultAccess>
                    </ctl:body>
                    <ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
                </ctl:request>
        </xsl:variable>
        <ctl:message>Response:  <xsl:copy-of select="$describeResultAccessRequestResponse" /></ctl:message>
        <xsl:choose>
            <xsl:when test="not($describeResultAccessRequestResponse/*)">
                <ctl:message>FAILURE:  Sending a DescribeResultAccess request with a sensorID parameter of "<xsl:value-of select="$sensorID" />" did not return a response or the response was not valid according to the expected schema.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeResultAccessRequestResponse)" /></ctl:message>
                <ctl:message>Checking the validity of the response to a DescribeResultAccess request with an unknown sensorID parameter.</ctl:message>
                <xsl:variable name="isCorrect">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$describeResultAccessRequestResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('UnknownSensorID')" />
                        <ctl:with-param name="locatorToCheck" select="$sensorID" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                <xsl:if test="not(xsd:boolean($isCorrect))">
                    <ctl:message>FAILURE:  The response to a DescribeResultAccess request with a sensorID parameter of "<xsl:value-of select="$sensorID" />" was expected to be an exception report with an exceptionCode of "UnknownSensorID" and a locator value of "<xsl:value-of select="$sensorID" />".</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeResultAccess-RequestNullTaskID.1">
      <ctl:param name="describeResultAccessURL" />
      <ctl:assertion>A null taskID in the request produces a valid exception message of InvalidParameterValue.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid exception message with an exceptionCode value of InvalidParameterValue and taskID listed in the locator field; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that a null taskID in the request produces a valid exception message of InvalidParameterValue.">docs/SPS%201.0%20ATS.html#SPS.DescribeResultAccess-RequestNullTaskID</ctl:link>
      <ctl:code>
        <ctl:message>Issuing a DescribeResultAccess request with a null taskID...</ctl:message>
        <xsl:variable name="describeResultAccessRequestResponse">
            <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeResultAccessURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeResultAccess xmlns="http://www.opengis.net/sps/1.0" service="SPS" version="1.0.0">
                            <taskID></taskID>
                        </DescribeResultAccess>
                    </ctl:body>
                    <ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
                </ctl:request>
        </xsl:variable>
        <ctl:message>Response:  <xsl:copy-of select="$describeResultAccessRequestResponse" /></ctl:message>
        <xsl:choose>
            <xsl:when test="not($describeResultAccessRequestResponse/*)">
                <ctl:message>FAILURE:  Sending a DescribeResultAccess request with a null taskID parameter did not return a response or the response was not valid according to the expected schema.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeResultAccessRequestResponse)" /></ctl:message>
                <ctl:message>Checking the validity of the response to a DescribeResultAccess request with a null taskID parameter.</ctl:message>
                <xsl:variable name="isCorrect">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$describeResultAccessRequestResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('InvalidParameterValue')" />
                        <ctl:with-param name="locatorToCheck" select="string('taskID')" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                <xsl:if test="not(xsd:boolean($isCorrect))">
                    <ctl:message>FAILURE:  The response to a DescribeResultAccess request with a null taskID parameter was expected to be an exception report with an exceptionCode of "InvalidParameterValue" and a locator value of "taskID".</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeResultAccess-RequestInvalidTaskID.1">
      <ctl:param name="describeResultAccessURL" />
      <ctl:assertion>An invalid taskID in the request produces a valid exception message of TaskIDExpired.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid exception message with an exceptionCode value TaskIDExpired; fail otherwise.</ctl:comment>
      <ctl:link title="Verify that an invalid taskID in the request produces a valid exception message of TaskIDExpired.">docs/SPS%201.0%20ATS.html#SPS.DescribeResultAccess-RequestInvalidTaskID</ctl:link>
      <ctl:code>
        <xsl:variable name="taskID" select="string('This is an invalid taskID...')" />
        <ctl:message>Issuing a DescribeResultAccess request with the following taskID:  "<xsl:value-of select="$taskID" />"...</ctl:message>
        <xsl:variable name="describeResultAccessRequestResponse">
            <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeResultAccessURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeResultAccess xmlns="http://www.opengis.net/sps/1.0" service="SPS" version="1.0.0">
                            <taskID><xsl:value-of select="$taskID" /></taskID>
                        </DescribeResultAccess>
                    </ctl:body>
                    <ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
                </ctl:request>
        </xsl:variable>
        <ctl:message>Response:  <xsl:copy-of select="$describeResultAccessRequestResponse" /></ctl:message>
        <xsl:choose>
            <xsl:when test="not($describeResultAccessRequestResponse/*)">
                <ctl:message>FAILURE:  Sending a DescribeResultAccess request with a taskID parameter of "<xsl:value-of select="$taskID" />" did not return a response or the response was not valid according to the expected schema.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <ctl:message>The response was:  <xsl:value-of select="spsFunctions:getExceptionInfo($describeResultAccessRequestResponse)" /></ctl:message>
                <ctl:message>Checking the validity of the response to a DescribeResultAccess request with an unknown taskID parameter.</ctl:message>
                <xsl:variable name="isCorrect">
                    <ctl:call-function name="spsFunctions:checkExceptionReport">
                        <ctl:with-param name="exceptionReport" select="$describeResultAccessRequestResponse" />
                        <ctl:with-param name="exceptionCodeToCheck" select="string('TaskIDExpired')" />
                        <ctl:with-param name="locatorToCheck" select="string('*')" />
                    </ctl:call-function>
                </xsl:variable>
                <ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
                <xsl:if test="not(xsd:boolean($isCorrect))">
                    <ctl:message>FAILURE:  The response to a DescribeResultAccess request with a taskID parameter of "<xsl:value-of select="$taskID" />" was expected to be an exception report with an exceptionCode of "TaskIDExpired".</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeResultAccess-ResponseMain.1">
      <ctl:param name="getCapabilitiesResponse" />
      <ctl:param name="describeResultAccessURL" />
      <ctl:assertion>All assertions applicable to a DescribeResultAccess response are satisfied.</ctl:assertion>
      <ctl:comment>Fail if any of the DescribeResultAccess response assertions fail; pass otherwise.</ctl:comment>
      <ctl:link title="Verify that a valid request containing a sensorID parameter produces a valid response other than DataNotAvailable.">docs/SPS%201.0%20ATS.html#SPS.DescribeResultAccess-ResponseSensorIDValidResponse</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--Call each of the DescribeResultAccess sub-tests using SensorID values from the Capabilities document-->
        <xsl:for-each select="$getCapabilitiesResponse/sps:Contents//sps:SensorOffering/sps:SensorID">
            <xsl:variable name="sensorID" select="." />
            <ctl:message>Executing a DescribeResultAccess request for the following sensorID:  "<xsl:value-of select="$sensorID" />"...</ctl:message>
            <xsl:variable name="describeResultAccessRequestResponse">
                <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeResultAccessURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeResultAccess xmlns="http://www.opengis.net/sps/1.0" service="SPS" version="1.0.0">
                            <sensorID><xsl:value-of select="$sensorID" /></sensorID>
                        </DescribeResultAccess>
                    </ctl:body>
                    <ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
                </ctl:request>
            </xsl:variable>
            <ctl:message>Response:  <xsl:copy-of select="$describeResultAccessRequestResponse" /></ctl:message>
            <xsl:choose>
                <xsl:when test="not($describeResultAccessRequestResponse/*)">
                    <ctl:message>FAILURE:  Sending a valid DescribeResultAccess request with a sensorID parameter of "<xsl:value-of select="$sensorID" />" did not return a response or the response was not valid according to the expected schema.</ctl:message>
                    <ctl:fail />
                </xsl:when>
                <xsl:otherwise>
                    <xsl:choose>
                        <xsl:when test="$describeResultAccessRequestResponse//ows:ExceptionReport">
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="sps:core-SPS.DescribeResultAccess-ValidException.1">
                                <ctl:with-param name="describeResultAccessDocument" select="$describeResultAccessRequestResponse" />
                            </ctl:call-test>
                            <ctl:message>FAILURE:  The response to a DescribeResultAccess request was expected to a DescribeResultAccessRequestResponse document; an ExceptionReport was returned instead.</ctl:message>
                            <ctl:fail />
                        </xsl:when>
                        <xsl:otherwise>
                            <!--Check that the response is not a DataNotAvailable response-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="sps:core-SPS.DescribeResultAccess-ResponseSensorIDValidResponse.1">
                                <ctl:with-param name="requestedSensorID" select="$sensorID" />
                                <ctl:with-param name="describeResultAccessResponse" select="$describeResultAccessRequestResponse" />
                            </ctl:call-test>
                            <!--Check that the ServiceType is valid-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="sps:core-SPS.DescribeResultAccess-ResponseValidServiceType.1">
                                <ctl:with-param name="requestedID" select="$sensorID" />
                                <ctl:with-param name="requestedType" select="'sensorID'" />
                                <ctl:with-param name="describeResultAccessResponse" select="$describeResultAccessRequestResponse" />
                            </ctl:call-test>
                            <!--Check that the ServiceURL is valid-->
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="sps:core-SPS.DescribeResultAccess-ResponseValidServiceURL.1">
                                <ctl:with-param name="requestedID" select="$sensorID" />
                                <ctl:with-param name="requestedType" select="'sensorID'" />
                                <ctl:with-param name="describeResultAccessResponse" select="$describeResultAccessRequestResponse" />
                            </ctl:call-test>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeResultAccess-ResponseMain-TaskID.1">
      <ctl:param name="describeResultAccessURL" />
      <ctl:param name="validTaskID" />
      <ctl:assertion>All assertions applicable to a DescribeResultAccess response are satisfied using a DescribeResultAccess request with a taskID parameter.</ctl:assertion>
      <ctl:comment>Fail if any of the DescribeResultAccess response assertions fail; pass otherwise.</ctl:comment>
      <ctl:link title="Verify that a valid request containing a sensorID parameter produces a valid response other than DataNotAvailable.">docs/SPS%201.0%20ATS.html#SPS.DescribeResultAccess-ResponseSensorIDValidResponse</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <!--Call each of the DescribeResultAccess sub-tests using SensorID values from the Capabilities document-->
            <ctl:message>Executing a DescribeResultAccess request for taskID:  "<xsl:value-of select="$validTaskID" />"...</ctl:message>
            <xsl:variable name="describeResultAccessRequestResponse">
                <ctl:request>
                    <ctl:url>
                        <xsl:value-of select="$describeResultAccessURL" />
                    </ctl:url>
                    <ctl:method>post</ctl:method>
                    <ctl:body>
                        <DescribeResultAccess xmlns="http://www.opengis.net/sps/1.0" service="SPS" version="1.0.0">
                            <taskID><xsl:value-of select="$validTaskID" /></taskID>
                        </DescribeResultAccess>
                    </ctl:body>
                    <ctl:call-function name="spsFunctions:validateDescribeResultAccessResponse" />
                </ctl:request>
            </xsl:variable>
            <ctl:message>Response:  <xsl:copy-of select="$describeResultAccessRequestResponse" /></ctl:message>
            <xsl:choose>
                <xsl:when test="not($describeResultAccessRequestResponse/*)">
                    <ctl:message>FAILURE:  Sending a valid DescribeResultAccess request with a taskID parameter of "<xsl:value-of select="$validTaskID" />" did not return a response or the response was not valid according to the expected schema.</ctl:message>
                    <ctl:fail />
                </xsl:when>
                <xsl:otherwise>
                    <xsl:choose>
                        <xsl:when test="$describeResultAccessRequestResponse//ows:ExceptionReport">
                            <ctl:message>**********************************************************************</ctl:message>
                            <ctl:call-test name="sps:core-SPS.DescribeResultAccess-ValidException.1">
                                <ctl:with-param name="describeResultAccessDocument" select="$describeResultAccessRequestResponse" />
                            </ctl:call-test>
                            <xsl:variable name="isTaskIDExpiredResponse">
                                <ctl:call-function name="spsFunctions:checkExceptionReport">
                                    <ctl:with-param name="exceptionReport" select="$describeResultAccessRequestResponse" />
                                    <ctl:with-param name="exceptionCodeToCheck" select="string('TaskIDExpired')" />
                                    <ctl:with-param name="locatorToCheck" select="string('*')" />
                                </ctl:call-function>
                            </xsl:variable>
                            <xsl:if test="not(xsd:boolean($isTaskIDExpiredResponse))">
                                <ctl:message>FAILURE:  The response to a DescribeResultAccess request was expected to a DescribeResultAccessRequestResponse document or an ExceptionReport with an exceptionCode of TaskIDExpired; an ExceptionReport with an exceptionCode other than TaskIDExpired was returned instead.</ctl:message>
                                <ctl:fail />
                            </xsl:if>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:choose>
                                <xsl:when test="$describeResultAccessRequestResponse//sps:DataNotAvailable">
                                    <ctl:message>**********************************************************************</ctl:message>
                                    <ctl:message>DataNotAvailable response encountered.  Checking this response for validity...</ctl:message>
                                    <ctl:call-test name="sps:core-SPS.DescribeResultAccess-ResponseValidDataNotAvailable.1">
                                        <ctl:with-param name="describeResultAccessResponse" select="$describeResultAccessRequestResponse" />
                                    </ctl:call-test>
                                </xsl:when>
                                <xsl:otherwise>
                                    <!--Check that the ServiceType is valid-->
                                    <ctl:message>One or more service response elements encountered.  Checking service element(s) for validity...</ctl:message>
                                    <xsl:for-each select="$describeResultAccessRequestResponse//sps:service">
                                        <ctl:message>**********************************************************************</ctl:message>
                                        <ctl:call-test name="sps:core-SPS.DescribeResultAccess-ResponseValidServiceType.1">
                                            <ctl:with-param name="requestedID" select="$validTaskID" />
                                            <ctl:with-param name="requestedType" select="'taskID'" />
                                            <ctl:with-param name="describeResultAccessResponse" select="." />
                                        </ctl:call-test>
                                        <!--Check that the ServiceURL is valid-->
                                        <ctl:message>**********************************************************************</ctl:message>
                                        <ctl:call-test name="sps:core-SPS.DescribeResultAccess-ResponseValidServiceURL.1">
                                            <ctl:with-param name="requestedID" select="$validTaskID" />
                                            <ctl:with-param name="requestedType" select="'taskID'" />
                                            <ctl:with-param name="describeResultAccessResponse" select="." />
                                        </ctl:call-test>
                                    </xsl:for-each>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:otherwise>
                    </xsl:choose>
                </xsl:otherwise>
            </xsl:choose>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeResultAccess-ResponseSensorIDValidResponse.1">
      <ctl:param name="requestedSensorID" />
      <ctl:param name="describeResultAccessResponse" />
      <ctl:assertion>A valid sensorID in the request does not produce a DataNotAvailable response.</ctl:assertion>
      <ctl:comment>Fail if the response is a DataNotAvailable response when the request contained a valid sensorID; pass otherwise.</ctl:comment>
      <ctl:link title="Verify that a valid request containing a sensorID parameter produces a valid response other than DataNotAvailable.">docs/SPS%201.0%20ATS.html#SPS.DescribeResultAccess-ResponseSensorIDValidResponse</ctl:link>
      <ctl:code>
        <!--Check for a DataNotAvailable response-->
        <xsl:if test="$describeResultAccessResponse//sps:DataNotAvailable">
            <ctl:message>FAILURE:  A DescribeResultAccess request with a sensorID value of "<xsl:value-of select="$requestedSensorID" />" produced a DataNotAvailable response.  A DataNotAvailable response should only be produced for taskID requests.</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeResultAccess-ResponseValidServiceType.1">
      <ctl:param name="requestedID" />
      <ctl:param name="requestedType" />
      <ctl:param name="describeResultAccessResponse" />
      <ctl:assertion>The ServiceType value in the response contains a value.</ctl:assertion>
      <ctl:comment>Pass if the ServiceType in the response contains a value; fail otherwise</ctl:comment>
      <ctl:link title="Verify that the ServiceType in the response contains a value.">docs/SPS%201.0%20ATS.html#SPS.DescribeResultAccess-ResponseValidServiceType</ctl:link>
      <ctl:code>
        <!--Check to see if the ServiceType element contains a value-->
        <xsl:variable name="serviceType" select="$describeResultAccessResponse//sps:ServiceType" />
        <ctl:message>Checking the ServiceType of the response: "<xsl:value-of select="$serviceType" />"...</ctl:message>
        <xsl:if test="string-length(normalize-space($serviceType))=0">
            <ctl:message>FAILURE:  The ServiceType value in a DescribeResultAccess response for <xsl:value-of select="concat($requestedType,' ')" /> <xsl:value-of select="$requestedID" /> is null.</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeResultAccess-ResponseValidServiceURL.1">
      <ctl:param name="requestedID" />
      <ctl:param name="requestedType" />
      <ctl:param name="describeResultAccessResponse" />
      <ctl:assertion>The ServiceURL value in the response contains a value and is resolvable.</ctl:assertion>
      <ctl:comment>Pass if the ServiceType in the response contains a value and is resolvable; fail otherwise</ctl:comment>
      <ctl:link title="Verify that the ServiceURL in the response contains a value and that value is resolvable.">docs/SPS%201.0%20ATS.html#SPS.DescribeResultAccess-ResponseValidServiceURL</ctl:link>
      <ctl:code>
        <!--Check to see if the ServiceURL is valid-->
        <xsl:variable name="serviceURL" select="$describeResultAccessResponse//sps:ServiceURL" />
        <ctl:message>Checking the ServiceURL of the response:  "<xsl:value-of select="$serviceURL" />"...</ctl:message>
        <ctl:message>Determining if the ServiceURL has a valid URL format...</ctl:message>
        <xsl:variable name="isValidURL">
            <ctl:call-function name="spsFunctions:validateURL">
                <ctl:with-param name="urlString" select="$serviceURL" />
            </ctl:call-function>
        </xsl:variable>
        <ctl:message>The validity check returned:  <xsl:value-of select="$isValidURL" /></ctl:message>
        <xsl:choose>
            <xsl:when test="not(xsd:boolean($isValidURL))">
                <ctl:message>FAILURE:  The ServiceURL value in a DescribeResultAccess response for <xsl:value-of select="concat($requestedType,' ')" /> <xsl:value-of select="$requestedID" /> is either null or does not have the proper syntax for a URL.</ctl:message>
                <ctl:fail />
            </xsl:when>
            <xsl:otherwise>
                <!--Ensure that the service identified through the ServiceURL element is up and running-->
                <ctl:message>Checking that the ServiceURL is reachable...</ctl:message>
                <xsl:variable name="serviceURLResponse">
                    <ctl:request>
                        <ctl:url><xsl:value-of select="$serviceURL" /></ctl:url>
                        <ctl:method>get</ctl:method>
                        <parsers:HTTPParser/>
                    </ctl:request>
                </xsl:variable>
                <ctl:message>Sending a request to "<xsl:value-of select="$serviceURL" />" produced the following response:  <xsl:value-of select="$serviceURLResponse" /></ctl:message>
                <xsl:if test="not($serviceURLResponse//response/content/*)">
                    <ctl:message>FAILURE:  No response was returned from a request to "<xsl:value-of select="$serviceURL" />".</ctl:message>
                    <ctl:fail />
                </xsl:if>
                <xsl:variable name="statusCode">
                    <xsl:value-of select="$serviceURLResponse//response/status/@code" />
                </xsl:variable>
                <ctl:message>Determining if a status code of "<xsl:value-of select="$statusCode" />" indicates success...</ctl:message>
                <xsl:if test="not($statusCode=200)">
                    <ctl:message>FAILURE:  A response was returned from a request to "<xsl:value-of select="$serviceURL" />", but the status code of the response did not indicate success.</ctl:message>
                    <ctl:fail />
                </xsl:if>
            </xsl:otherwise>
        </xsl:choose>
        <!--TODO:  Check for request element?-->
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeResultAccess-ResponseValidDataNotAvailable.1">
      <ctl:param name="describeResultAccessResponse" />
      <ctl:assertion>A DataNotAvailable response is valid and contains values for each of the parameters.</ctl:assertion>
      <ctl:comment>Pass if the DataNotAvailable response is valid and contains a value for each of the parameters; fail otherwise</ctl:comment>
      <ctl:link title="Verify that a DataNotAvailable response is valid and contains values for each of the parameters.">docs/SPS%201.0%20ATS.html#SPS.DescribeResultAccess-ResponseValidDataNotAvailable</ctl:link>
      <ctl:code>
        <xsl:variable name="dataNotAvailableElement" select="$describeResultAccessResponse/sps:DataNotAvailable" />
        <xsl:variable name="reason" select="normalize-space($dataNotAvailableElement/sps:reason)" />
        <xsl:if test="string-length(normalize-space($reason))=0">
            <ctl:message>FAILURE:  The DescribeResultAccess request produced a DataNotAvailable response with an empty string for the reason element.</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
    <ctl:test name="sps:core-SPS.DescribeResultAccess-ValidException.1">
      <ctl:param name="describeResultAccessDocument" />
      <ctl:assertion>An exception message returned by the server is a valid exception message for the DescribeResultAccess operation.</ctl:assertion>
      <ctl:comment>Pass if the response is a valid exception message for the DescribeResultAccess operation; fail otherwise</ctl:comment>
      <ctl:link title="Verify that any exception message returned by the server is a valid exception message for the DescribeResultAccess operation.">docs/SPS%201.0%20ATS.html#SPS.DescribeResultAccess-ValidException</ctl:link>
      <ctl:code>
        <!--PUT TEST CODE HERE-->
        <xsl:variable name="validExceptionCodes">
            <spsTesting:ExceptionCodes>
                <spsTesting:exceptionCode>OperationNotSupported</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>MissingParameterValue</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>InvalidParameterValue</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>UnknownSensorID</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>TaskIDExpired</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>NoApplicableCode</spsTesting:exceptionCode>
                <spsTesting:exceptionCode>InvalidRequest</spsTesting:exceptionCode>
            </spsTesting:ExceptionCodes>
        </xsl:variable>
        <xsl:variable name="isValid">
            <ctl:call-function name="spsFunctions:verifyExceptionCode">
                <ctl:with-param name="operationName" select="string('DescribeResultAccess')" />
                <ctl:with-param name="validExceptionCodes" select="$validExceptionCodes" />
                <ctl:with-param name="exceptionReport" select="$describeResultAccessDocument" />
            </ctl:call-function>
        </xsl:variable>
        <xsl:if test="$describeResultAccessDocument//ows:ExceptionReport and not(xsd:boolean($isValid))">
            <ctl:message>FAILURE:  The exception report returned is not a valid exception report for the DescribeResultAccess operation.</ctl:message>
            <ctl:fail />
        </xsl:if>
      </ctl:code>
    </ctl:test>
  </ctl:package>
</ctl:package>
