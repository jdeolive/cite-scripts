<ctl:package xmlns:ctl="http://www.occamlab.com/ctl" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ows="http://www.opengis.net/ows/2.0" xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:wcs="http://www.opengis.net/wcs/2.0" xmlns:ctlp="http://www.occamlab.com/te/parsers" xmlns:wcs2="http://www.opengis.net/wcs/2.0" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:parsers="http://www.occamlab.com/te/parsers">
	<ctl:test name="wcs2:req25">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req25:Send a valid GetCoverage request to the server under test and check that the response is not an exception.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
					<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE]  ','CoverageId','does not exsist')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
						<ctl:call-test name="wcs2:get-kvp-core-req25">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
						<ctl:call-test name="wcs2:post-xml-core-req25">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
						<ctl:call-test name="wcs2:soap-core-req25">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:req26">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req26:Send a valid GetCoverage request to server under test which conforms to the references in the requirement. Check that the response is not an exception.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
					<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE]  ','CoverageId','does not exsist')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
						<ctl:call-test name="wcs2:get-kvp-core-req26">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
						<ctl:call-test name="wcs2:post-xml-core-req26">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
						<ctl:call-test name="wcs2:soap-core-req26">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:req27">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req27: Send valid GetCoverage requests to server under test addressing existing and non-existing coverages, resp. Check if appropriate results or excep-tions, resp., are delivered.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
					<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE]  ','CoverageId','does not exsist')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
						<ctl:call-test name="wcs2:get-kvp-core-req27">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
						<ctl:call-test name="wcs2:post-xml-core-req27">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
						<ctl:call-test name="wcs2:soap-core-req27">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:req28">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>Req28:If a GetCoverage request contains a format parameter then this parametershall contain a MIME type identifier occurring in somewcs:formatSupported element of the response to a successful GetCapabilities request to this server. </ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
					<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE]  ','CoverageId','does not exsist')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
						<ctl:call-test name="wcs2:get-kvp-core-req28">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
						<ctl:call-test name="wcs2:post-xml-core-req28">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
						<ctl:call-test name="wcs2:soap-core-req28">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:req29">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>Req29:If a GetCoverage request contains a mediaType parameter then this pa-rameter shall contain a MIME type identifier of fixed value “multi-part/related”. </ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
					<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE]  ','CoverageId','does not exsist')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
						<ctl:call-test name="wcs2:get-kvp-core-req29">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
						<ctl:call-test name="wcs2:post-xml-core-req29">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
						<ctl:call-test name="wcs2:soap-core-req29">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:req30">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req30:Every dimension value in a GetCoverage request shall be equal to one of the axisLabels dimension names specified in the gml:SRSInformationGroup of the coverage gml:Envelope, unless the server offers a WCS CRS extension which overrides this requirement.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
					<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE]  ','CoverageId','does not exsist')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
						<ctl:call-test name="wcs2:get-kvp-core-req30">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
						<ctl:call-test name="wcs2:post-xml-core-req30">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
						<ctl:call-test name="wcs2:soap-core-req30">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:req31">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req31:A GetCoverage request shall contain at most one subsetting operation for each of the dimensions of the coverage addressed.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
					<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE]  ','CoverageId','does not exsist')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
						<ctl:call-test name="wcs2:get-kvp-core-req31">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
						<ctl:call-test name="wcs2:post-xml-core-req31">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
						<ctl:call-test name="wcs2:soap-core-req31">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:req32">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req32:Send otherwise valid GetCoverage requests with matching and with violating trimming positions to server under test. Check if appropriate results are returned if and only if the requirement is fulfilled, and an exception other-wise. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
					<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE]  ','CoverageId','does not exsist')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
						<ctl:call-test name="wcs2:get-kvp-core-req32">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
						<ctl:call-test name="wcs2:post-xml-core-req32">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
						<ctl:call-test name="wcs2:soap-core-req32">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:req33">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req33:Send otherwise valid GetCoverage requests with matching and with violating slicing positions to server under test. Check if appropriate results are returned if and only if the requirement is fulfilled, and an exception otherwise. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
					<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE]  ','CoverageId','does not exsist')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
						<ctl:call-test name="wcs2:get-kvp-core-req33">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
						<ctl:call-test name="wcs2:post-xml-core-req33">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
						<ctl:call-test name="wcs2:soap-core-req33">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:req34">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req34:For each coverage offered by the server on hand, send a valid GetCoverage request to server under test. Check that the result validates against gmlcov:AbstractCoverage. Test passes if all individual tests pass.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
					<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE]  ','CoverageId','does not exsist')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
						<ctl:call-test name="wcs2:get-kvp-core-req34">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
						<ctl:call-test name="wcs2:post-xml-core-req34">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
						<ctl:call-test name="wcs2:soap-core-req34">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:req35">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req35:For each coverage encoding format (i.e., format encoding extension) supported by the server under test: Send a valid GetCoverage request to retrieve a coverage in this format. Check that the result is a valid instance of the format indicated. Do so for both complete and subsetted coverages. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
					<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE]  ','CoverageId','does not exsist')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
						<ctl:call-test name="wcs2:get-kvp-core-req35">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
						<ctl:call-test name="wcs2:post-xml-core-req35">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
						<ctl:call-test name="wcs2:soap-core-req35">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:req36">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>Req36:The contents of the response to a successful GetCoverage request shall beencoded as specified in GMLCOV [OGC 09-146r2] conformance classmultipart where the range set is encoded as specified by the format pa-rameter or, in its absence, the coverage’s Native Format. </ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
					<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE]  ','CoverageId','does not exsist')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
						<ctl:call-test name="wcs2:get-kvp-core-req36">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
						<ctl:call-test name="wcs2:post-xml-core-req36">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
						<ctl:call-test name="wcs2:soap-core-req36">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:req37">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req37:The response to a successful GetCoverage request with coverage identifier id shall consist of the coverage component of the OfferedCoverage identified by id, unless the server supports a WCS extension which over-rides this requirement.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
					<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE]  ','CoverageId','does not exsist')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
						<ctl:call-test name="wcs2:get-kvp-core-req37">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
						<ctl:call-test name="wcs2:post-xml-core-req37">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
						<ctl:call-test name="wcs2:soap-core-req37">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:req38">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req38:Send valid GetCoverage requests to the server under test with a single trimming as the only subsetting operation. Check correctness of the coverage response returned. Do so up to the maximum number of dimensions supported by the server and for subsetting dimensions at any position in the list of dimensions. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
					<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE]  ','CoverageId','does not exsist')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
						<ctl:call-test name="wcs2:get-kvp-core-req38">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
						<ctl:call-test name="wcs2:post-xml-core-req38">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
						<ctl:call-test name="wcs2:soap-core-req38">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:req39">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req39:Send valid GetCoverage requests to the server under test with a single slicing as the only subsetting operation. Check correctness of the coverage response returned. Do so up to the maximum number of dimensions supported by the server and for subsetting dimensions at any position in the list of dimensions. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
					<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE]  ','CoverageId','does not exsist')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
						<ctl:call-test name="wcs2:get-kvp-core-req39">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
						<ctl:call-test name="wcs2:post-xml-core-req39">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
						<ctl:call-test name="wcs2:soap-core-req39">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:req40">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req40:Pick some combination of trimming and slicing operations on a given coverage. Construct a set of GetCoverage requests by building all permutations of these subsetting operations. Compare the results of all requests whether the result returned is identical. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
					<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE]  ','CoverageId','does not exsist')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
						<ctl:call-test name="wcs2:get-kvp-core-req40">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
						<ctl:call-test name="wcs2:post-xml-core-req40">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
						<ctl:call-test name="wcs2:soap-core-req40">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:req41">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req41: When a WCS server encounters an error while performing a GetCoverage operation it shall return an exception report message as specified.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
					<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE]  ','CoverageId','does not exsist')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
						<ctl:call-test name="wcs2:get-kvp-core-req41">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
						<ctl:call-test name="wcs2:post-xml-core-req41">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
						<ctl:call-test name="wcs2:soap-core-req41">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:req42">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req42:For every coverage identifier returned in a GetCapabilities response, Describe Coverage and GetCoverage requests on such an identifier shall always deliver information about the same OfferedCoverage object.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
					<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE]  ','CoverageId','does not exsist')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
						<ctl:call-test name="wcs2:get-kvp-core-req42">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
						<ctl:call-test name="wcs2:post-xml-core-req42">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
						<ctl:call-test name="wcs2:soap-core-req42">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req25">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req25:Send a valid PostXML GetCoverage request to the server under test and check that the response is not an exception.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req25">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req25:Send a valid GetKVP GetCoverage request to the server under test and check that the response is not an exception.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:choose>
						<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
							<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE] ','wcs:CoverageSummary/wcs:CoverageId','does not exsist')"/>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="GetCoverage">
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$url"/>
									</ctl:url>
									<ctl:param name="service">WCS</ctl:param>
									<ctl:param name="VERSION">2.0.1</ctl:param>
									<ctl:param name="request">GetCoverage</ctl:param>
									<ctl:param name="coverageid">
										<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
									</ctl:param>
									<ctl:method>get</ctl:method>
									<parsers:HTTPParser>
										<parsers:parse mime="application/gml+xml">
											<parsers:XMLValidatingParser>
												<parsers:schemas>
													<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
												</parsers:schemas>
											</parsers:XMLValidatingParser>
										</parsers:parse>
									</parsers:HTTPParser>
								</ctl:request>
							</xsl:variable>
							<ctl:call-test name="wcs:getcoverage_not_exception">
								<ctl:with-param name="GetCoverage" select="$GetCoverage"/>
							</ctl:call-test>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs:getcoverage_not_exception">
		<ctl:param name="GetCoverage"/>
		<ctl:assertion>check getcoverage result.</ctl:assertion>
		<ctl:code>
			<xsl:if test="not(empty($GetCoverage//*[local-name()='Exception']))">
				<ctl:message>[FAILURE] The result should not contain an ows:Exception.</ctl:message>
				<ctl:fail/>
			</xsl:if>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs:getcoverage_exception">
		<ctl:param name="GetCoverage_exception"/>
		<ctl:assertion>check getcoverage result.</ctl:assertion>
		<ctl:code>
			<xsl:if test="empty($GetCoverage_exception//*[local-name()='Exception'])">
				<ctl:message>[FAILURE] The result should contain an ows:Exception.</ctl:message>
				<ctl:fail/>
			</xsl:if>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req25">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req25:Send a valid SOAP GetCoverage request to the server under test and check that the response is not an exception.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req26">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req26:Send a valid PostXML GetCoverage request to server under test which conforms to the references in the requirement. Check that the response is not an exception.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req26">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:param name="SupportsGML" />		
		<ctl:assertion>req26:Send a valid GetKVP GetCoverage request to server under test which conforms to the references in the requirement. Check that the response is not an exception.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:variable name="DescribeCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0.1</ctl:param>
							<ctl:param name="request">DescribeCoverage</ctl:param>
							<ctl:param name="coverageid">
								<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
							</ctl:param>
							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsAll.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>
						</ctl:request>
					</xsl:variable>
					<xsl:if test="empty($DescribeCoverage//wcs:CoverageDescriptions)">
						<ctl:message>[FAILURE] send a valid DescribeCoverage request, and the result should contain a wcs:CoverageDescriptions.</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0.1</ctl:param>
							<ctl:param name="request">GetCoverage</ctl:param>
							<ctl:param name="coverageid">
								<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
							</ctl:param>
							<xsl:call-template name="for-loop-get-kvp-core-req26">
								<xsl:with-param name="i">1</xsl:with-param>
								<xsl:with-param name="count">
									<xsl:value-of select="number($DescribeCoverage//*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/@srsDimension)"/>
								</xsl:with-param>
								<xsl:with-param name="axisLabels" select="$DescribeCoverage//*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels"/>
								<xsl:with-param name="low" select="$DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]"/>
								<xsl:with-param name="high" select="$DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='upperCorner'][1]"/>
							</xsl:call-template>
							<xsl:template name="for-loop-get-kvp-core-req26">
								<xsl:param name="i" as="xs:integer"/>
								<xsl:param name="count" as="xs:integer"/>
								<xsl:param name="axisLabels"/>
								<xsl:param name="low"/>
								<xsl:param name="high"/>
								<xsl:if test="$i &lt;= $count">
									<ctl:param name="subset">
										<xsl:value-of select="tokenize(normalize-space($axisLabels),' ')[$i]"/>(<xsl:value-of select="number(tokenize(normalize-space($low),' ')[$i])"/>,<xsl:value-of select="number(tokenize(normalize-space($high),' ')[$i])"/>)</ctl:param>
								</xsl:if>
								<xsl:if test="$i &lt;= $count">
									<xsl:call-template name="for-loop-get-kvp-core-req26">
										<xsl:with-param name="i">
											<xsl:value-of select="$i + 1"/>
										</xsl:with-param>
										<xsl:with-param name="count">
											<xsl:value-of select="$count"/>
										</xsl:with-param>
										<xsl:with-param name="axisLabels" select="$axisLabels"/>
										<xsl:with-param name="low" select="$low"/>
										<xsl:with-param name="high" select="$high"/>
									</xsl:call-template>
								</xsl:if>
							</xsl:template>
							<parsers:HTTPParser>
								<parsers:parse mime="application/gml+xml">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:parse>
							</parsers:HTTPParser>
						</ctl:request>
					</xsl:variable>
					<ctl:call-test name="wcs:getcoverage_not_exception">
						<ctl:with-param name="GetCoverage" select="$GetCoverage"/>
					</ctl:call-test>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req26">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req26:Send a valid SOAP GetCoverage request to server under test which conforms to the references in the requirement. Check that the response is not an exception.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req27">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req27: Send valid PostXML GetCoverage requests to server under test addressing existing and non-existing coverages, resp. Check if appropriate results or excep-tions, resp., are delivered.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req27">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req27: Send valid GetKVP GetCoverage requests to server under test addressing existing and non-existing coverages, resp. Check if appropriate results or excep-tions, resp., are delivered.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:choose>
						<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
							<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE] ', 'wcs:CoverageSummary/wcs:CoverageId','does not exsist')"/>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="GetCoverage">
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$url"/>
									</ctl:url>
									<ctl:method>get</ctl:method>
									<ctl:param name="service">WCS</ctl:param>
									<ctl:param name="VERSION">2.0.1</ctl:param>
									<ctl:param name="request">GetCoverage</ctl:param>
									<ctl:param name="CoverageId">
										<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
									</ctl:param>
									<parsers:HTTPParser>
										<parsers:parse mime="application/gml+xml">
											<parsers:XMLValidatingParser>
												<parsers:schemas>
													<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
												</parsers:schemas>
											</parsers:XMLValidatingParser>
										</parsers:parse>
									</parsers:HTTPParser>
								</ctl:request>
							</xsl:variable>
							<ctl:call-test name="wcs:getcoverage_not_exception">
								<ctl:with-param name="GetCoverage" select="$GetCoverage"/>
							</ctl:call-test>
						</xsl:otherwise>
					</xsl:choose>
					<xsl:choose>
						<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
							<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE] ','wcs:CoverageSummary/wcs:CoverageId','does not exsist')"/>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="GetCoverage_exception">
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$url"/>
									</ctl:url>
									<ctl:method>get</ctl:method>
									<ctl:param name="service">WCS</ctl:param>
									<ctl:param name="VERSION">2.0.1</ctl:param>
									<ctl:param name="request">GetCoverage</ctl:param>
									<ctl:param name="CoverageId">CoverageId_Bogus</ctl:param>
									<parsers:HTTPParser>
										<parsers:parse mime="application/gml+xml">
											<parsers:XMLValidatingParser>
												<parsers:schemas>
													<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
												</parsers:schemas>
											</parsers:XMLValidatingParser>
										</parsers:parse>
									</parsers:HTTPParser>
								</ctl:request>
							</xsl:variable>
							<ctl:call-test name="wcs:getcoverage_exception">
								<ctl:with-param name="GetCoverage_exception" select="$GetCoverage_exception"/>
							</ctl:call-test>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req27">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req27: Send valid SOAP GetCoverage requests to server under test addressing existing and non-existing coverages, resp. Check if appropriate results or excep-tions, resp., are delivered.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req28">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>Req28:If a GetCoverage request contains a format parameter then this parametershall contain a MIME type identifier occurring in somewcs:formatSupported element of the response to a successful GetCapabilities request to this server. </ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req28">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>Req28:If a GetCoverage request contains a format parameter then this parametershall contain a MIME type identifier occurring in somewcs:formatSupported element of the response to a successful GetCapabilities request to this server.  </ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:choose>
						<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
							<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE] ','wcs:CoverageSummary/wcs:CoverageId','does not exsist')"/>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="GetCoverage">
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$url"/>
									</ctl:url>
									<ctl:param name="service">WCS</ctl:param>
									<ctl:param name="VERSION">2.0.1</ctl:param>
									<ctl:param name="request">GetCoverage</ctl:param>
									<ctl:param name="coverageid">
										<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
									</ctl:param>
									<ctl:param name="format">
										<xsl:value-of select="$Capabilities//*[local-name()='ServiceMetadata']//*[local-name()='formatSupported'][1]"/>
									</ctl:param>
							
									<ctl:method>get</ctl:method>
									<parsers:HTTPParser>
										<parsers:parse mime="application/gml+xml">
											<parsers:XMLValidatingParser>
												<parsers:schemas>
													<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
												</parsers:schemas>
											</parsers:XMLValidatingParser>
										</parsers:parse>
									</parsers:HTTPParser>
								</ctl:request>
							</xsl:variable>
							<ctl:call-test name="wcs:getcoverage_not_exception">
								<ctl:with-param name="GetCoverage" select="$GetCoverage"/>
							</ctl:call-test>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:choose>
						<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
							<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE] ','wcs:CoverageSummary/wcs:CoverageId','does not exsist')"/>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="GetCoverage_exception">
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$url"/>
									</ctl:url>
									<ctl:param name="service">WCS</ctl:param>
									<ctl:param name="VERSION">2.0.1</ctl:param>
									<ctl:param name="request">GetCoverage</ctl:param>
									<ctl:param name="coverageid">
										<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
									</ctl:param>
									<ctl:param name="format">format_bogus</ctl:param>
									<ctl:method>get</ctl:method>
									<parsers:HTTPParser>
										<parsers:parse mime="application/gml+xml">
											<parsers:XMLValidatingParser>
												<parsers:schemas>
													<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
												</parsers:schemas>
											</parsers:XMLValidatingParser>
										</parsers:parse>
									</parsers:HTTPParser>
								</ctl:request>
							</xsl:variable>
							<ctl:call-test name="wcs:getcoverage_exception">
								<ctl:with-param name="GetCoverage_exception" select="$GetCoverage_exception"/>
							</ctl:call-test>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req28">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>Req28:If a GetCoverage request contains a format parameter then this parametershall contain a MIME type identifier occurring in somewcs:formatSupported element of the response to a successful GetCapabilities request to this server. </ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req29">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>Req29:If a GetCoverage request contains a mediaType parameter then this pa-rameter shall contain a MIME type identifier of fixed value “multi-part/related”. </ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req29">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>Req29:If a GetCoverage request contains a mediaType parameter then this pa-rameter shall contain a MIME type identifier of fixed value “multi-part/related”. </ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:choose>
						<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
							<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE] ','wcs:CoverageSummary/wcs:CoverageId','does not exsist')"/>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="GetCoverage">
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$url"/>
									</ctl:url>
									<ctl:param name="service">WCS</ctl:param>
									<ctl:param name="VERSION">2.0.1</ctl:param>
									<ctl:param name="request">GetCoverage</ctl:param>
									<ctl:param name="coverageid">
										<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
									</ctl:param>
									<ctl:param name="mediatype">"multipart/mixed</ctl:param>
									<ctl:method>get</ctl:method>
									<parsers:HTTPParser>
										<parsers:parse mime="application/gml+xml">
											<parsers:XMLValidatingParser>
												<parsers:schemas>
													<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
												</parsers:schemas>
											</parsers:XMLValidatingParser>
										</parsers:parse>
									</parsers:HTTPParser>
								</ctl:request>
							</xsl:variable>
							<ctl:call-test name="wcs:getcoverage_not_exception">
								<ctl:with-param name="GetCoverage" select="$GetCoverage"/>
							</ctl:call-test>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:choose>
						<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
							<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE] ','wcs:CoverageSummary/wcs:CoverageId','does not exsist')"/>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="GetCoverage_exception">
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$url"/>
									</ctl:url>
									<ctl:param name="service">WCS</ctl:param>
									<ctl:param name="VERSION">2.0.1</ctl:param>
									<ctl:param name="request">GetCoverage</ctl:param>
									<ctl:param name="coverageid">
										<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
									</ctl:param>

									<ctl:param name="mediatype">mediatype_bogus</ctl:param>
									<ctl:method>get</ctl:method>
									<ctlp:XMLValidatingParser>
										<ctlp:schemas>
											<ctlp:schema type="resource">wcs/2.0/wcsAll.xsd</ctlp:schema>
										</ctlp:schemas>
									</ctlp:XMLValidatingParser>
								</ctl:request>
							</xsl:variable>
							<ctl:call-test name="wcs:getcoverage_exception">
								<ctl:with-param name="GetCoverage_exception" select="$GetCoverage_exception"/>
							</ctl:call-test>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req29">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>Req29:If a GetCoverage request contains a mediaType parameter then this pa-rameter shall contain a MIME type identifier of fixed value “multi-part/related”.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req30">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req30:Every dimension value in a PostXML GetCoverage request shall be equal to one of the axisLabels dimension names specified in the gml:SRSInformationGroup of the coverage gml:Envelope, unless the server offers a WCS CRS extension which overrides this requirement.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req30">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req30:Every dimension value in a GetKVP GetCoverage request shall be equal to one of the axisLabels dimension names specified in the gml:SRSInformationGroup of the coverage gml:Envelope, unless the server offers a WCS CRS extension which overrides this requirement.</ctl:assertion>
		<ctl:code>
			<xsl:variable name="DescribeCoverage">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>get</ctl:method>
					<ctl:param name="service">WCS</ctl:param>
					<ctl:param name="VERSION">2.0.1</ctl:param>
					<ctl:param name="request">DescribeCoverage</ctl:param>
					<ctl:param name="coverageid">
						<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
					</ctl:param>
					<ctlp:XMLValidatingParser>
						<ctlp:schemas>
							<ctlp:schema type="resource">wcs/2.0/wcsAll.xsd</ctlp:schema>
						</ctlp:schemas>
					</ctlp:XMLValidatingParser>
				</ctl:request>
			</xsl:variable>
			<xsl:if test="empty($DescribeCoverage//wcs:CoverageDescriptions)">
				<ctl:message>[FAILURE] send a valid DescribeCoverage request, and the result should contain a wcs:CoverageDescriptions.</ctl:message>
				<ctl:fail/>
			</xsl:if>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0.1</ctl:param>
							<ctl:param name="request">GetCoverage</ctl:param>
							<ctl:param name="coverageid">
								<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
							</ctl:param>
							<xsl:call-template name="for-loop-get-kvp-core-req30">
								<xsl:with-param name="i">1</xsl:with-param>
								<xsl:with-param name="count">
									<xsl:value-of select="number($DescribeCoverage//*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/@srsDimension)"/>
								</xsl:with-param>
								<xsl:with-param name="axisLabels" select="$DescribeCoverage//*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels"/>
								<xsl:with-param name="low" select="$DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]"/>
								<xsl:with-param name="high" select="$DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='upperCorner'][1]"/>
							</xsl:call-template>
							<xsl:template name="for-loop-get-kvp-core-req30">
								<xsl:param name="i" as="xs:integer"/>
								<xsl:param name="count" as="xs:integer"/>
								<xsl:param name="axisLabels"/>
								<xsl:param name="low"/>
								<xsl:param name="high"/>
								<xsl:if test="$i &lt;= $count">
									<ctl:param name="subset">
										<xsl:value-of select="tokenize(normalize-space($axisLabels),' ')[$i]"/>(<xsl:value-of select="number(tokenize(normalize-space($low),' ')[$i])"/>,<xsl:value-of select="number(tokenize(normalize-space($high),' ')[$i])"/>)</ctl:param>
								</xsl:if>
								<xsl:if test="$i &lt;= $count">
									<xsl:call-template name="for-loop-get-kvp-core-req30">
										<xsl:with-param name="i">
											<xsl:value-of select="$i + 1"/>
										</xsl:with-param>
										<xsl:with-param name="count">
											<xsl:value-of select="$count"/>
										</xsl:with-param>
										<xsl:with-param name="axisLabels" select="$axisLabels"/>
										<xsl:with-param name="low" select="$low"/>
										<xsl:with-param name="high" select="$high"/>
									</xsl:call-template>
								</xsl:if>
							</xsl:template>
							<parsers:HTTPParser>
								<parsers:parse mime="application/gml+xml">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:parse>
							</parsers:HTTPParser>
						</ctl:request>
					</xsl:variable>
					<ctl:call-test name="wcs:getcoverage_not_exception">
						<ctl:with-param name="GetCoverage" select="$GetCoverage"/>
					</ctl:call-test>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:variable name="GetCoverage_exception">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0.1</ctl:param>
							<ctl:param name="request">GetCoverage</ctl:param>
							<ctl:param name="coverageid">
								<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
							</ctl:param>
							<ctl:param name="format">
								<xsl:value-of select="$Capabilities//*[local-name()='ServiceMetadata']//*[local-name()='formatSupported']"/>
							</ctl:param>
							<ctl:param name="mediatype">
								<xsl:value-of select="multipart/mixed"/>
							</ctl:param>
							<ctl:param name="subset">dimension_bogus(<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]),' ')[1])"/>,<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='upperCorner'][1]),' ')[1])"/>)</ctl:param>
							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsAll.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>
						</ctl:request>
					</xsl:variable>
					<ctl:call-test name="wcs:getcoverage_exception">
						<ctl:with-param name="GetCoverage_exception" select="$GetCoverage_exception"/>
					</ctl:call-test>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req30">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req30:Every dimension value in a SOAP GetCoverage request shall be equal to one of the axisLabels dimension names specified in the gml:SRSInformationGroup of the coverage gml:Envelope, unless the server offers a WCS CRS extension which overrides this requirement.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req31">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req31:A PostXML GetCoverage request shall contain at most one subsetting operation for each of the dimensions of the coverage addressed.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req31">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req31:A GetKVP GetCoverage request shall contain at most one subsetting operation for each of the dimensions of the coverage addressed.</ctl:assertion>
		<ctl:code>
			<xsl:variable name="DescribeCoverage">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>get</ctl:method>
					<ctl:param name="service">WCS</ctl:param>
					<ctl:param name="VERSION">2.0.1</ctl:param>
					<ctl:param name="request">DescribeCoverage</ctl:param>
					<ctl:param name="coverageid">
						<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
					</ctl:param>
					<ctlp:XMLValidatingParser>
						<ctlp:schemas>
							<ctlp:schema type="resource">wcs/2.0/wcsAll.xsd</ctlp:schema>
						</ctlp:schemas>
					</ctlp:XMLValidatingParser>
				</ctl:request>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0.1</ctl:param>
							<ctl:param name="request">GetCoverage</ctl:param>
							<ctl:param name="coverageid">
								<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
							</ctl:param>
							<ctl:param name="subset">
								<xsl:value-of select="tokenize(normalize-space($DescribeCoverage //*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels),' ')[1]"/>(<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]),' ')[1])"/>,<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='upperCorner'][1]),' ')[1])"/>)</ctl:param>
							<ctl:param name="subset">
								<xsl:value-of select="tokenize(normalize-space($DescribeCoverage //*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels),' ')[2]"/>(<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]),' ')[2])"/>)</ctl:param>
							<parsers:HTTPParser>
								<parsers:parse mime="application/gml+xml">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:parse>
							</parsers:HTTPParser>
						</ctl:request>
					</xsl:variable>
					<ctl:call-test name="wcs:getcoverage_not_exception">
						<ctl:with-param name="GetCoverage" select="$GetCoverage"/>
					</ctl:call-test>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:variable name="GetCoverage_exception">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0.1</ctl:param>
							<ctl:param name="request">GetCoverage</ctl:param>
							<ctl:param name="coverageid">
								<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
							</ctl:param>
							<ctl:param name="subset">
								<xsl:value-of select="tokenize(normalize-space($DescribeCoverage //*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels),' ')[1]"/>(<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]),' ')[1])"/>,<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='upperCorner'][1]),' ')[1])"/>)</ctl:param>
							<ctl:param name="subset">
								<xsl:value-of select="tokenize(normalize-space($DescribeCoverage //*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels),' ')[1]"/>(<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]),' ')[2])"/>)</ctl:param>
							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>
						</ctl:request>
					</xsl:variable>
					<ctl:call-test name="wcs:getcoverage_exception">
						<ctl:with-param name="GetCoverage_exception" select="$GetCoverage_exception"/>
					</ctl:call-test>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req31">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req31:A SOAP GetCoverage request shall contain at most one subsetting operation for each of the dimensions of the coverage addressed.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req32">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req32:Send otherwise valid PostXML GetCoverage requests with matching and with violat-ing trimming positions to server under test. Check if appropriate results are returned if and only if the requirement is fulfilled, and an exception other-wise. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req32">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:param name="SupportsGML" />		
		<ctl:assertion>req32:Send otherwise GetKVP valid GetCoverage requests with matching and with violat-ing trimming positions to server under test. Check if appropriate results are returned if and only if the requirement is fulfilled, and an exception other-wise. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<xsl:variable name="DescribeCoverage">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>get</ctl:method>
					<ctl:param name="service">WCS</ctl:param>
					<ctl:param name="VERSION">2.0.1</ctl:param>
					<ctl:param name="request">DescribeCoverage</ctl:param>
					<ctl:param name="coverageid">
						<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
					</ctl:param>
					<ctlp:XMLValidatingParser>
						<ctlp:schemas>
							<ctlp:schema type="resource">wcs/2.0/wcsAll.xsd</ctlp:schema>
						</ctlp:schemas>
					</ctlp:XMLValidatingParser>
				</ctl:request>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:variable name="DescribeCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0.1</ctl:param>
							<ctl:param name="request">DescribeCoverage</ctl:param>
							<ctl:param name="coverageid">
								<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
							</ctl:param>
							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsAll.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>
						</ctl:request>
					</xsl:variable>
					<xsl:if test="empty($DescribeCoverage//wcs:CoverageDescriptions)">
						<ctl:message>[FAILURE] send a valid DescribeCoverage request, and the result should contain a wcs:CoverageDescriptions.</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0.1</ctl:param>
							<ctl:param name="request">GetCoverage</ctl:param>
							<ctl:param name="coverageid">
								<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
							</ctl:param>
							<xsl:call-template name="for-loop-get-kvp-core-req32">
								<xsl:with-param name="i">1</xsl:with-param>
								<xsl:with-param name="count">
									<xsl:value-of select="number($DescribeCoverage//*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/@srsDimension)"/>
								</xsl:with-param>
								<xsl:with-param name="axisLabels" select="$DescribeCoverage//*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels"/>
								<xsl:with-param name="low" select="$DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]"/>
								<xsl:with-param name="high" select="$DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='upperCorner'][1]"/>
							</xsl:call-template>
							<xsl:template name="for-loop-get-kvp-core-req32">
								<xsl:param name="i" as="xs:integer"/>
								<xsl:param name="count" as="xs:integer"/>
								<xsl:param name="axisLabels"/>
								<xsl:param name="low"/>
								<xsl:param name="high"/>
								<xsl:if test="$i &lt;= $count">
									<ctl:param name="subset">
										<xsl:value-of select="tokenize(normalize-space($axisLabels),' ')[$i]"/>(<xsl:value-of select="number(tokenize(normalize-space($low),' ')[$i])"/>,<xsl:value-of select="number(tokenize(normalize-space($high),' ')[$i])"/>)</ctl:param>
								</xsl:if>
								<xsl:if test="$i &lt;= $count">
									<xsl:call-template name="for-loop-get-kvp-core-req32">
										<xsl:with-param name="i">
											<xsl:value-of select="$i + 1"/>
										</xsl:with-param>
										<xsl:with-param name="count">
											<xsl:value-of select="$count"/>
										</xsl:with-param>
										<xsl:with-param name="axisLabels" select="$axisLabels"/>
										<xsl:with-param name="low" select="$low"/>
										<xsl:with-param name="high" select="$high"/>
									</xsl:call-template>
								</xsl:if>
							</xsl:template>
							<parsers:HTTPParser>
								<parsers:parse mime="application/gml+xml">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:parse>
							</parsers:HTTPParser>
						</ctl:request>
					</xsl:variable>
					<ctl:call-test name="wcs:getcoverage_not_exception">
						<ctl:with-param name="GetCoverage" select="$GetCoverage"/>
					</ctl:call-test>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:variable name="GetCoverage_exception">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0.1</ctl:param>
							<ctl:param name="request">GetCoverage</ctl:param>
							<ctl:param name="coverageid">
								<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
							</ctl:param>
							<ctl:param name="subset">
								<xsl:value-of select="tokenize(normalize-space($DescribeCoverage //*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels),' ')[1]"/>(<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='upperCorner'][1]),' ')[1]) + 1"/>,<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='upperCorner'][1]),' ')[1]) + 2"/>)</ctl:param>
							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsAll.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>
						</ctl:request>
					</xsl:variable>
					<ctl:call-test name="wcs:getcoverage_exception">
						<ctl:with-param name="GetCoverage_exception" select="$GetCoverage_exception"/>
					</ctl:call-test>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req32">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req32:Send otherwise SOAP valid GetCoverage requests with matching and with violat-ing trimming positions to server under test. Check if appropriate results are returned if and only if the requirement is fulfilled, and an exception other-wise. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req33">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req33:Send otherwise valid PostXML GetCoverage requests with matching and with violating slicing positions to server under test. Check if appropriate results are returned if and only if the requirement is fulfilled, and an exception otherwise. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req33">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req33:Send otherwise valid GetKVP GetCoverage requests with matching and with violating slicing positions to server under test. Check if appropriate results are returned if and only if the requirement is fulfilled, and an exception otherwise. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<xsl:variable name="DescribeCoverage">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>get</ctl:method>
					<ctl:param name="service">WCS</ctl:param>
					<ctl:param name="VERSION">2.0.1</ctl:param>
					<ctl:param name="request">DescribeCoverage</ctl:param>
					<ctl:param name="coverageid">
						<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
					</ctl:param>
					<ctlp:XMLValidatingParser>
						<ctlp:schemas>
							<ctlp:schema type="resource">wcs/2.0/wcsAll.xsd</ctlp:schema>
						</ctlp:schemas>
					</ctlp:XMLValidatingParser>
				</ctl:request>
			</xsl:variable>
			<xsl:if test="empty($DescribeCoverage//wcs:CoverageDescriptions)">
				<ctl:message>[FAILURE] send a valid DescribeCoverage request, and the result should contain a wcs:CoverageDescriptions.</ctl:message>
				<ctl:fail/>
			</xsl:if>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0.1</ctl:param>
							<ctl:param name="request">GetCoverage</ctl:param>
							<ctl:param name="coverageid">
								<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
							</ctl:param>
							<xsl:call-template name="for-loop-get-kvp-core-req33">
								<xsl:with-param name="i">1</xsl:with-param>
								<xsl:with-param name="count">
									<xsl:value-of select="number($DescribeCoverage//*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/@srsDimension)"/>
								</xsl:with-param>
								<xsl:with-param name="axisLabels" select="$DescribeCoverage//*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels"/>
								<xsl:with-param name="low" select="$DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]"/>
								<xsl:with-param name="high" select="$DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='upperCorner'][1]"/>
							</xsl:call-template>
							<xsl:template name="for-loop-get-kvp-core-req33">
								<xsl:param name="i" as="xs:integer"/>
								<xsl:param name="count" as="xs:integer"/>
								<xsl:param name="axisLabels"/>
								<xsl:param name="low"/>
								<xsl:param name="high"/>
								<xsl:if test="$i &lt;= $count">
									<ctl:param name="subset">
										<xsl:value-of select="tokenize(normalize-space($axisLabels),' ')[$i]"/>(<xsl:value-of select="number(tokenize(normalize-space($low),' ')[$i])"/>,<xsl:value-of select="number(tokenize(normalize-space($high),' ')[$i])"/>)</ctl:param>
								</xsl:if>
								<xsl:if test="$i &lt;= $count">
									<xsl:call-template name="for-loop-get-kvp-core-req33">
										<xsl:with-param name="i">
											<xsl:value-of select="$i + 1"/>
										</xsl:with-param>
										<xsl:with-param name="count">
											<xsl:value-of select="$count"/>
										</xsl:with-param>
										<xsl:with-param name="axisLabels" select="$axisLabels"/>
										<xsl:with-param name="low" select="$low"/>
										<xsl:with-param name="high" select="$high"/>
									</xsl:call-template>
								</xsl:if>
							</xsl:template>
							<parsers:HTTPParser>
								<parsers:parse mime="application/gml+xml">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:parse>
							</parsers:HTTPParser>
						</ctl:request>
					</xsl:variable>
					<ctl:call-test name="wcs:getcoverage_not_exception">
						<ctl:with-param name="GetCoverage" select="$GetCoverage"/>
					</ctl:call-test>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:variable name="GetCoverage_exception">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0.1</ctl:param>
							<ctl:param name="request">GetCoverage</ctl:param>
							<ctl:param name="coverageid">
								<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
							</ctl:param>
							<ctl:param name="subset">
								<xsl:value-of select="tokenize(normalize-space($DescribeCoverage //*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels),' ')[1]"/>(<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='upperCorner'][1]),' ')[1]) + 1"/>)</ctl:param>
							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsAll.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>
						</ctl:request>
					</xsl:variable>
					<ctl:call-test name="wcs:getcoverage_exception">
						<ctl:with-param name="GetCoverage_exception" select="$GetCoverage_exception"/>
					</ctl:call-test>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req33">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req33:Send otherwise valid SOAP GetCoverage requests with matching and with violating slicing positions to server under test. Check if appropriate results are returned if and only if the requirement is fulfilled, and an exception otherwise. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req34">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req34:For each coverage offered by the server on hand, send a valid PostXML GetCoverage request to server under test. Check that the result validates against gmlcov:AbstractCoverage. Test passes if all individual tests pass.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req34">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:param name="SupportsGML" />		
		<ctl:assertion>req34:For each coverage offered by the server on hand, send a valid GetKVP GetCoverage request to server under test. Check that the result validates against gmlcov:AbstractCoverage. Test passes if all individual tests pass.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:choose>
						<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
							<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE] ','wcs:CoverageSummary/wcs:CoverageId','does not exsist')"/>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="GetCoverage">
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$url"/>
									</ctl:url>
									<ctl:param name="service">WCS</ctl:param>
									<ctl:param name="VERSION">2.0.1</ctl:param>
									<ctl:param name="request">GetCoverage</ctl:param>
									<ctl:param name="coverageid">
										<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
									</ctl:param>
									<ctl:method>get</ctl:method>
									<parsers:HTTPParser>
										<parsers:parse mime="application/gml+xml">
											<parsers:XMLValidatingParser>
												<parsers:schemas>
													<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
												</parsers:schemas>
											</parsers:XMLValidatingParser>
										</parsers:parse>
									</parsers:HTTPParser>
								</ctl:request>
							</xsl:variable>
							<ctl:call-test name="wcs:getcoverage_not_exception">
								<ctl:with-param name="GetCoverage" select="$GetCoverage"/>
							</ctl:call-test>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req34">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req34:For each coverage offered by the server on hand, send a valid SOAP GetCoverage request to server under test. Check that the result validates against gmlcov:AbstractCoverage. Test passes if all individual tests pass.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req35">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req35:For each coverage encoding format (i.e., format encoding extension) supported by the server under test: Send a valid PostXML GetCoverage request to retrieve a coverage in this format. Check that the result is a valid instance of the format indicated. Do so for both complete and subsetted coverages. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req35">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req35:For each coverage encoding format (i.e., format encoding extension) supported by the server under test: Send a valid GetKVP GetCoverage request to retrieve a coverage in this format. Check that the result is a valid instance of the format indicated. Do so for both complete and subsetted coverages. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<ctl:message>[MESSAGE] TBD in test suites of format encoding extensions.</ctl:message>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req35">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req35:For each coverage encoding format (i.e., format encoding extension) supported by the server under test: Send a valid SOAP GetCoverage request to retrieve a coverage in this format. Check that the result is a valid instance of the format indicated. Do so for both complete and subsetted coverages. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req36">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>Req36:The contents of the response to a successful GetCoverage request shall beencoded as specified in GMLCOV [OGC 09-146r2] conformance classmultipart where the range set is encoded as specified by the format pa-rameter or, in its absence, the coverage’s Native Format. </ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req36">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>Req36:The contents of the response to a successful GetCoverage request shall beencoded as specified in GMLCOV [OGC 09-146r2] conformance classmultipart where the range set is encoded as specified by the format pa-rameter or, in its absence, the coverage’s Native Format. </ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:choose>
						<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
							<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE] ','wcs:CoverageSummary/wcs:CoverageId','does not exsist')"/>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="GetCoverage">
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$url"/>
									</ctl:url>
									<ctl:param name="service">WCS</ctl:param>
									<ctl:param name="VERSION">2.0.1</ctl:param>
									<ctl:param name="request">GetCoverage</ctl:param>
									<ctl:param name="coverageid">
										<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
									</ctl:param>
									<ctl:param name="mediatype">multipart/mixed</ctl:param>
									<ctl:method>get</ctl:method>
									<parsers:HTTPParser>
										<parsers:parse mime="application/gml+xml"/>
										<parsers:parse>
											<parsers:XMLValidatingParser>
												<parsers:schemas>
													<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
												</parsers:schemas>
											</parsers:XMLValidatingParser>
										</parsers:parse>
									</parsers:HTTPParser>
								</ctl:request>
							</xsl:variable>
							<ctl:call-test name="wcs:getcoverage_not_exception">
								<ctl:with-param name="GetCoverage" select="$GetCoverage"/>
							</ctl:call-test>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:choose>
						<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
							<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE] ','wcs:CoverageSummary/wcs:CoverageId','does not exsist')"/>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="GetCoverage1">
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$url"/>
									</ctl:url>
									<ctl:param name="service">WCS</ctl:param>
									<ctl:param name="VERSION">2.0.1</ctl:param>
									<ctl:param name="request">GetCoverage</ctl:param>
									<ctl:param name="coverageid">
										<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
									</ctl:param>
									<ctl:param name="mediatype">
										<xsl:value-of select="multipart/mixed"/>
									</ctl:param>
									<ctl:method>get</ctl:method>
									<parsers:HTTPParser>
										<parsers:parse mime="application/gml+xml">
											<parsers:XMLValidatingParser>
												<parsers:schemas>
													<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
												</parsers:schemas>
											</parsers:XMLValidatingParser>
										</parsers:parse>
									</parsers:HTTPParser>
								</ctl:request>
							</xsl:variable>
							<ctl:call-test name="wcs:getcoverage_not_exception">
								<ctl:with-param name="GetCoverage" select="$GetCoverage1"/>
							</ctl:call-test>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req36">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>Req36:The contents of the response to a successful GetCoverage request shall beencoded as specified in GMLCOV [OGC 09-146r2] conformance classmultipart where the range set is encoded as specified by the format pa-rameter or, in its absence, the coverage’s Native Format. </ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req37">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req37:The response to a successful PostXML GetCoverage request with coverage identifier id shall consist of the coverage component of the OfferedCoverage identified by id, unless the server supports a WCS extension which over-rides this requirement.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req37">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req37:The response to a successful GetKVP GetCoverage request with coverage identifier id shall consist of the coverage component of the OfferedCoverage identified by id, unless the server supports a WCS extension which over-rides this requirement.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<ctl:message>[MESSAGE] TBD in test suites of format encoding extensions</ctl:message>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req37">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req37:The response to a successful SOAP GetCoverage request with coverage identifier id shall consist of the coverage component of the OfferedCoverage identified by id, unless the server supports a WCS extension which over-rides this requirement.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req38">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req38:Send valid PostXML GetCoverage requests to the server under test with a single trimming as the only subsetting operation. Check correctness of the coverage response returned. Do so up to the maximum number of dimensions supported by the server and for subsetting dimensions at any position in the list of dimensions. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req38">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req38:Send valid GetKVP GetCoverage requests to the server under test with a single trimming as the only subsetting operation. Check correctness of the coverage response returned. Do so up to the maximum number of dimensions supported by the server and for subsetting dimensions at any position in the list of dimensions. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<xsl:variable name="DescribeCoverage">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>get</ctl:method>
					<ctl:param name="service">WCS</ctl:param>
					<ctl:param name="VERSION">2.0.1</ctl:param>
					<ctl:param name="request">DescribeCoverage</ctl:param>
					<ctl:param name="coverageid">
						<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
					</ctl:param>
					<ctlp:XMLValidatingParser>
						<ctlp:schemas>
							<ctlp:schema type="resource">wcs/2.0/wcsAll.xsd</ctlp:schema>
						</ctlp:schemas>
					</ctlp:XMLValidatingParser>
				</ctl:request>
			</xsl:variable>
			<xsl:if test="empty($DescribeCoverage//wcs:CoverageDescriptions)">
				<ctl:message>[FAILURE] send a valid DescribeCoverage request, and the result should contain a wcs:CoverageDescriptions.</ctl:message>
				<ctl:fail/>
			</xsl:if>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0.1</ctl:param>
							<ctl:param name="request">GetCoverage</ctl:param>
							<ctl:param name="coverageid">
								<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
							</ctl:param>
							<xsl:call-template name="for-loop-get-kvp-core-req38">
								<xsl:with-param name="i">1</xsl:with-param>
								<xsl:with-param name="count">
									<xsl:value-of select="number($DescribeCoverage//*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/@srsDimension)"/>
								</xsl:with-param>
								<xsl:with-param name="axisLabels" select="$DescribeCoverage//*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels"/>
								<xsl:with-param name="low" select="$DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]"/>
								<xsl:with-param name="high" select="$DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='upperCorner'][1]"/>
							</xsl:call-template>
							<xsl:template name="for-loop-get-kvp-core-req38">
								<xsl:param name="i" as="xs:integer"/>
								<xsl:param name="count" as="xs:integer"/>
								<xsl:param name="axisLabels"/>
								<xsl:param name="low"/>
								<xsl:param name="high"/>
								<xsl:if test="$i &lt;= $count">
									<ctl:param name="subset">
										<xsl:value-of select="tokenize(normalize-space($axisLabels),' ')[$i]"/>(<xsl:value-of select="number(tokenize(normalize-space($low),' ')[$i])"/>,<xsl:value-of select="number(tokenize(normalize-space($low),' ')[$i])"/>)</ctl:param>
								</xsl:if>
								<xsl:if test="$i &lt;= $count">
									<xsl:call-template name="for-loop-get-kvp-core-req38">
										<xsl:with-param name="i">
											<xsl:value-of select="$i + 1"/>
										</xsl:with-param>
										<xsl:with-param name="count">
											<xsl:value-of select="$count"/>
										</xsl:with-param>
										<xsl:with-param name="axisLabels" select="$axisLabels"/>
										<xsl:with-param name="low" select="$low"/>
										<xsl:with-param name="high" select="$high"/>
									</xsl:call-template>
								</xsl:if>
							</xsl:template>
							<parsers:HTTPParser>
								<parsers:parse mime="application/gml+xml">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:parse>
							</parsers:HTTPParser>
						</ctl:request>
					</xsl:variable>
					<ctl:call-test name="wcs:getcoverage_not_exception">
						<ctl:with-param name="GetCoverage" select="$GetCoverage"/>
					</ctl:call-test>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:variable name="GetCoverage1">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0.1</ctl:param>
							<ctl:param name="request">GetCoverage</ctl:param>
							<ctl:param name="coverageid">
								<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
							</ctl:param>
							<ctl:param name="subset">
								<xsl:value-of select="tokenize(normalize-space($DescribeCoverage //*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels),' ')[1]"/>(<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]),' ')[1])"/>,<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='upperCorner'][1]),' ')[1])"/>)</ctl:param>
							<parsers:HTTPParser>
								<parsers:parse mime="application/gml+xml">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:parse>
							</parsers:HTTPParser>
						</ctl:request>
					</xsl:variable>
					<ctl:call-test name="wcs:getcoverage_not_exception">
						<ctl:with-param name="GetCoverage" select="$GetCoverage1"/>
					</ctl:call-test>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req38">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req38:Send valid SOAP GetCoverage requests to the server under test with a single trimming as the only subsetting operation. Check correctness of the coverage response returned. Do so up to the maximum number of dimensions supported by the server and for subsetting dimensions at any position in the list of dimensions. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req39">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req39:Send valid PostXML GetCoverage requests to the server under test with a single slicing as the only subsetting operation. Check correctness of the coverage response returned. Do so up to the maximum number of dimensions supported by the server and for subsetting dimensions at any position in the list of dimensions. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req39">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req39:Send valid GetKVP GetCoverage requests to the server under test with a single slicing as the only subsetting operation. Check correctness of the coverage response returned. Do so up to the maximum number of dimensions supported by the server and for subsetting dimensions at any position in the list of dimensions. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<xsl:variable name="DescribeCoverage">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>get</ctl:method>
					<ctl:param name="service">WCS</ctl:param>
					<ctl:param name="VERSION">2.0.1</ctl:param>
					<ctl:param name="request">DescribeCoverage</ctl:param>
					<ctl:param name="coverageid">
						<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
					</ctl:param>
					<ctlp:XMLValidatingParser>
						<ctlp:schemas>
							<ctlp:schema type="resource">wcs/2.0/wcsAll.xsd</ctlp:schema>
						</ctlp:schemas>
					</ctlp:XMLValidatingParser>
				</ctl:request>
			</xsl:variable>
			<xsl:if test="empty($DescribeCoverage//wcs:CoverageDescriptions)">
				<ctl:message>[FAILURE] send a valid DescribeCoverage request, and the result should contain a wcs:CoverageDescriptions.</ctl:message>
				<ctl:fail/>
			</xsl:if>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0.1</ctl:param>
							<ctl:param name="request">GetCoverage</ctl:param>
							<ctl:param name="coverageid">
								<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
							</ctl:param>
							<xsl:call-template name="for-loop-get-kvp-core-req38">
								<xsl:with-param name="i">1</xsl:with-param>
								<xsl:with-param name="count">
									<xsl:value-of select="number($DescribeCoverage//*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/@srsDimension)"/>
								</xsl:with-param>
								<xsl:with-param name="axisLabels" select="$DescribeCoverage//*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels"/>
								<xsl:with-param name="low" select="$DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]"/>
								<xsl:with-param name="high" select="$DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='upperCorner'][1]"/>
							</xsl:call-template>
							<xsl:template name="for-loop-get-kvp-core-req38">
								<xsl:param name="i" as="xs:integer"/>
								<xsl:param name="count" as="xs:integer"/>
								<xsl:param name="axisLabels"/>
								<xsl:param name="low"/>
								<xsl:param name="high"/>
								<xsl:if test="$i &lt;= $count">
									<ctl:param name="subset">
										<xsl:value-of select="tokenize(normalize-space($axisLabels),' ')[$i]"/>(<xsl:value-of select="number(tokenize(normalize-space($low),' ')[$i])"/>)</ctl:param>
								</xsl:if>
								<xsl:if test="$i &lt;= $count">
									<xsl:call-template name="for-loop-get-kvp-core-req38">
										<xsl:with-param name="i">
											<xsl:value-of select="$i + 1"/>
										</xsl:with-param>
										<xsl:with-param name="count">
											<xsl:value-of select="$count"/>
										</xsl:with-param>
										<xsl:with-param name="axisLabels" select="$axisLabels"/>
										<xsl:with-param name="low" select="$low"/>
										<xsl:with-param name="high" select="$high"/>
									</xsl:call-template>
								</xsl:if>
							</xsl:template>
							<parsers:HTTPParser>
								<parsers:parse mime="application/gml+xml">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:parse>
							</parsers:HTTPParser>
						</ctl:request>
					</xsl:variable>
					<ctl:call-test name="wcs:getcoverage_not_exception">
						<ctl:with-param name="GetCoverage" select="$GetCoverage"/>
					</ctl:call-test>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:variable name="GetCoverage1">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0.1</ctl:param>
							<ctl:param name="request">GetCoverage</ctl:param>
							<ctl:param name="coverageid">
								<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
							</ctl:param>
							<ctl:param name="subset">
								<xsl:value-of select="tokenize(normalize-space($DescribeCoverage //*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels),' ')[1]"/>(<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]),' ')[1])"/>)</ctl:param>
							<parsers:HTTPParser>
								<parsers:parse mime="application/gml+xml">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:parse>
							</parsers:HTTPParser>
						</ctl:request>
					</xsl:variable>
					<ctl:call-test name="wcs:getcoverage_not_exception">
						<ctl:with-param name="GetCoverage" select="$GetCoverage1"/>
					</ctl:call-test>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req39">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req39:Send valid SOAP GetCoverage requests to the server under test with a single slicing as the only subsetting operation. Check correctness of the coverage response returned. Do so up to the maximum number of dimensions supported by the server and for subsetting dimensions at any position in the list of dimensions. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req40">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req40:Pick some combination of trimming and slicing operations on a given coverage. Construct a set of PostXML GetCoverage requests by building all permutations of these subsetting operations. Compare the results of all requests whether the result returned is identical. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req40">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req40:Pick some combination of trimming and slicing operations on a given coverage. Construct a set of GetKVP GetCoverage requests by building all permutations of these subsetting operations. Compare the results of all requests whether the result returned is identical. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<xsl:variable name="DescribeCoverage">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>get</ctl:method>
					<ctl:param name="service">WCS</ctl:param>
					<ctl:param name="VERSION">2.0.1</ctl:param>
					<ctl:param name="request">DescribeCoverage</ctl:param>
					<ctl:param name="coverageid">
						<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
					</ctl:param>
					<ctlp:XMLValidatingParser>
						<ctlp:schemas>
							<ctlp:schema type="resource">wcs/2.0/wcsAll.xsd</ctlp:schema>
						</ctlp:schemas>
					</ctlp:XMLValidatingParser>
				</ctl:request>
			</xsl:variable>
			<xsl:if test="empty($DescribeCoverage//wcs:CoverageDescriptions)">
				<ctl:message>[FAILURE] send a valid DescribeCoverage request, and the result should contain a wcs:CoverageDescriptions.</ctl:message>
				<ctl:fail/>
			</xsl:if>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0.1</ctl:param>
							<ctl:param name="request">GetCoverage</ctl:param>
							<ctl:param name="coverageid">
								<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
							</ctl:param>
							<ctl:param name="subset">
								<xsl:value-of select="tokenize(normalize-space($DescribeCoverage //*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels),' ')[1]"/>(<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]),' ')[1])"/>,<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]),' ')[1])"/>)</ctl:param>
							<ctl:param name="subset">
								<xsl:value-of select="tokenize(normalize-space($DescribeCoverage //*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels),' ')[2]"/>(<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]),' ')[2])"/>)</ctl:param>
							<parsers:HTTPParser>
								<parsers:parse mime="application/gml+xml">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:parse>
							</parsers:HTTPParser>
						</ctl:request>
					</xsl:variable>
					<ctl:call-test name="wcs:getcoverage_not_exception">
						<ctl:with-param name="GetCoverage" select="$GetCoverage"/>
					</ctl:call-test>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:choose>
				<xsl:when test="$SupportsGML = 'true'">
					<xsl:variable name="DescribeCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0.1</ctl:param>
							<ctl:param name="request">DescribeCoverage</ctl:param>
							<ctl:param name="coverageid">
								<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
							</ctl:param>
							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsAll.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>
						</ctl:request>
					</xsl:variable>
					<xsl:if test="empty($DescribeCoverage//wcs:CoverageDescriptions)">
						<ctl:message>[FAILURE] send a valid DescribeCoverage request, and the result should contain a wcs:CoverageDescriptions.</ctl:message>
						<ctl:fail/>
					</xsl:if>
					<xsl:variable name="GetCoverage1">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0.1</ctl:param>
							<ctl:param name="request">GetCoverage</ctl:param>
							<ctl:param name="coverageid">
								<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
							</ctl:param>
							<ctl:param name="subset">
								<xsl:value-of select="tokenize(normalize-space($DescribeCoverage //*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels),' ')[1]"/>(<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]),' ')[1])"/>)</ctl:param>
							<ctl:param name="subset">
								<xsl:value-of select="tokenize(normalize-space($DescribeCoverage //*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels),' ')[2]"/>(<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]),' ')[2])"/>,<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]),' ')[2])"/>)</ctl:param>
							<parsers:HTTPParser>
								<parsers:parse mime="application/gml+xml">
									<parsers:XMLValidatingParser>
										<parsers:schemas>
											<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
										</parsers:schemas>
									</parsers:XMLValidatingParser>
								</parsers:parse>
							</parsers:HTTPParser>
						</ctl:request>
					</xsl:variable>
					<ctl:call-test name="wcs:getcoverage_not_exception">
						<ctl:with-param name="GetCoverage1" select="$GetCoverage1"/>
					</ctl:call-test>
				</xsl:when>
				<xsl:otherwise>
					<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req40">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req40:Pick some combination of trimming and slicing operations on a given coverage. Construct a set of SOAP GetCoverage requests by building all permutations of these subsetting operations. Compare the results of all requests whether the result returned is identical. Pass test if all checks succeed.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req41">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req41: When a WCS server encounters an error while performing a PostXML GetCoverage operation it shall return an exception report message as specified.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req41">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req41: When a WCS server encounters an error while performing a GetKVP GetCoverage operation it shall return an exception report message as specified.</ctl:assertion>
		<ctl:code>
			<xsl:variable name="GetCoverage">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>get</ctl:method>
					<ctl:param name="service">WCS</ctl:param>
					<ctl:param name="VERSION">2.0.1</ctl:param>
					<ctl:param name="request">GetCoverage</ctl:param>
					<ctl:param name="coverageid">coverage_bogus</ctl:param>
					<parsers:HTTPParser>
						<parsers:parse>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</parsers:parse>
					</parsers:HTTPParser>
				</ctl:request>
			</xsl:variable>
			<xsl:if test="not(not(empty($GetCoverage//*[local-name()='Exception'])) and $GetCoverage//@*[local-name()='exceptionCode']='NoSuchCoverage') ">
				<ctl:message>[FAILURE] the result should contain a 'NoSuchCoverage' Exception.</ctl:message>
				<ctl:fail/>
			</xsl:if>
			<xsl:variable name="DescribeCoverage">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>get</ctl:method>
					<ctl:param name="service">WCS</ctl:param>
					<ctl:param name="VERSION">2.0.1</ctl:param>
					<ctl:param name="request">DescribeCoverage</ctl:param>
					<ctl:param name="coverageid">
						<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
					</ctl:param>
					<ctlp:XMLValidatingParser>
						<ctlp:schemas>
							<ctlp:schema type="resource">wcs/2.0/wcsAll.xsd</ctlp:schema>
						</ctlp:schemas>
					</ctlp:XMLValidatingParser>
				</ctl:request>
			</xsl:variable>
			<xsl:if test="empty($DescribeCoverage//wcs:CoverageDescriptions)">
				<ctl:message>[FAILURE] send a valid DescribeCoverage request, and the result should contain a wcs:CoverageDescriptions.</ctl:message>
				<ctl:fail/>
			</xsl:if>
			<xsl:variable name="GetCoverage1">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>get</ctl:method>
					<ctl:param name="service">WCS</ctl:param>
					<ctl:param name="VERSION">2.0.1</ctl:param>
					<ctl:param name="request">GetCoverage</ctl:param>
					<ctl:param name="coverageid">
						<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
					</ctl:param>
					<ctl:param name="subset">dimension_bogus(<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]),' ')[1])"/>)</ctl:param>
					<parsers:HTTPParser>
						<parsers:parse>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</parsers:parse>
					</parsers:HTTPParser>
				</ctl:request>
			</xsl:variable>
			<ctl:call-test name="wcs2:OWSCommon_exception">
				<ctl:with-param name="exception" select="$GetCoverage1"/>
                                <ctl:with-param name="statusCode" select="404"/>
			</ctl:call-test>			
			<xsl:if test="not(not(empty($GetCoverage1//*[local-name()='Exception'])) and $GetCoverage1//@*[local-name()='exceptionCode']='InvalidAxisLabel') ">
				<ctl:message>[FAILURE] the result should contain a 'InvalidAxisLabel' Exception.</ctl:message>
				<ctl:fail/>
			</xsl:if>
			<xsl:variable name="GetCoverage2">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>get</ctl:method>
					<ctl:param name="service">WCS</ctl:param>
					<ctl:param name="VERSION">2.0.1</ctl:param>
					<ctl:param name="request">GetCoverage</ctl:param>
					<ctl:param name="coverageid">
						<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
					</ctl:param>
					<ctl:param name="subset">
						<xsl:value-of select="tokenize(normalize-space($DescribeCoverage //*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels),' ')[1]"/>(<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]),' ')[1])"/>)</ctl:param>
					<ctl:param name="subset">
						<xsl:value-of select="tokenize(normalize-space($DescribeCoverage //*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels),' ')[1]"/>(<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]),' ')[1])"/>,<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]),' ')[1])"/>)</ctl:param>
					<parsers:HTTPParser>
						<parsers:parse>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</parsers:parse>
					</parsers:HTTPParser>
				</ctl:request>
			</xsl:variable>
			<ctl:call-test name="wcs2:OWSCommon_exception">
				<ctl:with-param name="exception" select="$GetCoverage2"/>
                                <ctl:with-param name="statusCode" select="404"/>
			</ctl:call-test>			
			<xsl:if test="not(not(empty($GetCoverage2//*[local-name()='Exception'])) and $GetCoverage2//@*[local-name()='exceptionCode']='InvalidAxisLabel') ">
				<ctl:message>[FAILURE] the result should contain a 'InvalidAxisLabel' Exception.</ctl:message>
				<ctl:fail/>
			</xsl:if>
			<xsl:variable name="GetCoverage3">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>get</ctl:method>
					<ctl:param name="service">WCS</ctl:param>
					<ctl:param name="VERSION">2.0.1</ctl:param>
					<ctl:param name="request">GetCoverage</ctl:param>
					<ctl:param name="coverageid">
						<xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/>
					</ctl:param>
					<ctl:param name="subset">
						<xsl:value-of select="tokenize(normalize-space($DescribeCoverage //*[local-name()='CoverageDescription'][1]//*[local-name()='boundedBy']/*[local-name()='Envelope'][1][@axisLabels]/@axisLabels),' ')[1]"/>(<xsl:value-of select="number(tokenize(normalize-space($DescribeCoverage//*[local-name()='CoverageDescription'][1]/*[local-name()='boundedBy']/*[local-name()='Envelope'][1]/*[local-name()='lowerCorner'][1]),' ')[1]) -1"/>)</ctl:param>
					<parsers:HTTPParser>
						<parsers:parse>
							<parsers:XMLValidatingParser>
								<parsers:schemas>
									<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
								</parsers:schemas>
							</parsers:XMLValidatingParser>
						</parsers:parse>
					</parsers:HTTPParser>
				</ctl:request>
			</xsl:variable>
			<ctl:call-test name="wcs2:OWSCommon_exception">
				<ctl:with-param name="exception" select="$GetCoverage3"/>
                                <ctl:with-param name="statusCode" select="404"/>
			</ctl:call-test>			
			<xsl:if test="not(not(empty($GetCoverage3//*[local-name()='Exception'])) and $GetCoverage3//@*[local-name()='exceptionCode']='InvalidSubsetting') ">
				<ctl:message>[FAILURE] the result should contain a 'InvalidSubsetting' Exception.</ctl:message>
				<ctl:fail/>
			</xsl:if>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req41">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req41: When a WCS server encounters an error while performing a SOAP GetCoverage operation it shall return an exception report message as specified.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req42">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req42:For every coverage identifier returned in a GetCapabilities response, Describe Coverage and GetCoverage requests on such an identifier shall always deliver information about the same OfferedCoverage object.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req42">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:param name="SupportsGML" />
		<ctl:assertion>req42:For every coverage identifier returned in a GetCapabilities response, Describe Coverage and GetCoverage requests on such an identifier shall always deliver information about the same OfferedCoverage object.</ctl:assertion>
		<ctl:code>
			<xsl:for-each select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']">
				<xsl:choose>
					<xsl:when test="$SupportsGML = 'true'">
						<xsl:variable name="DescribeCoverage">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$url"/>
								</ctl:url>
								<ctl:method>get</ctl:method>
								<ctl:param name="service">WCS</ctl:param>
								<ctl:param name="VERSION">2.0.1</ctl:param>
								<ctl:param name="request">DescribeCoverage</ctl:param>
								<ctl:param name="coverageid">
									<xsl:value-of select="."/>
								</ctl:param>
								<ctlp:XMLValidatingParser>
									<ctlp:schemas>
										<ctlp:schema type="resource">wcs/2.0/wcsAll.xsd</ctlp:schema>
									</ctlp:schemas>
								</ctlp:XMLValidatingParser>
							</ctl:request>
						</xsl:variable>
						<xsl:if test="empty($DescribeCoverage//wcs:CoverageDescriptions)">
							<ctl:message>[FAILURE] send a valid DescribeCoverage request, and the result should contain a wcs:CoverageDescriptions.</ctl:message>
							<ctl:fail/>
						</xsl:if>
						<xsl:variable name="GetCoverage">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$url"/>
								</ctl:url>
								<ctl:param name="service">WCS</ctl:param>
								<ctl:param name="VERSION">2.0.1</ctl:param>
								<ctl:param name="request">GetCoverage</ctl:param>
								<ctl:param name="coverageid">
									<xsl:value-of select="."/>
								</ctl:param>
								<ctl:method>get</ctl:method>
								<parsers:HTTPParser>
									<parsers:parse mime="application/gml+xml">
										<parsers:XMLValidatingParser>
											<parsers:schemas>
												<parsers:schema type="resource">wcs/2.0/wcsAll.xsd</parsers:schema>
											</parsers:schemas>
										</parsers:XMLValidatingParser>
									</parsers:parse>
								</parsers:HTTPParser>
							</ctl:request>
						</xsl:variable>
						<xsl:if test="deep-equal($DescribeCoverage//*[local-name()='boundedBy'], $GetCoverage//*[local-name()='boundedBy']) and deep-equal($DescribeCoverage//*[local-name()='domainSet'], $GetCoverage//*[local-name()='domainSet']) and deep-equal($DescribeCoverage//*[local-name()='rangeType'], $GetCoverage//*[local-name()='rangeType'])">
							<ctl:message> the coverage description should be equal</ctl:message>
							<ctl:fail/>
						</xsl:if>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message>[MESSAGE] The server does not support the gml coverage.</ctl:message>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:for-each>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req42">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req42:For every coverage identifier returned in a GetCapabilities response, Describe Coverage and GetCoverage requests on such an identifier shall always deliver information about the same OfferedCoverage object.</ctl:assertion>
		<ctl:code>
			<ctl:message>[MESSAGE] TBD.</ctl:message>
		</ctl:code>
	</ctl:test>
</ctl:package>
