<ctl:package xmlns:ctl="http://www.occamlab.com/ctl" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ows="http://www.opengis.net/ows/2.0" xmlns:gml="http://www.opengis.net/gml/3.2" xmlns:wcs="http://www.opengis.net/wcs/2.0" xmlns:ctlp="http://www.occamlab.com/te/parsers" xmlns:wcs2="http://www.opengis.net/wcs/2.0" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:xlink="http://www.w3.org/1999/xlink">
	<ctl:test name="wcs2:req13">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:assertion>req13:Send GetCapabilities requests with valid and invalid request structure. Pass test if appropriate valid results or exceptions, resp., are delivered.</ctl:assertion>
		<ctl:code>
			<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
				<ctl:call-test name="wcs2:get-kvp-core-req13">
					<ctl:with-param name="url" select="$url"/>
				</ctl:call-test>
			</xsl:if>
			<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
				<ctl:call-test name="wcs2:post-xml-core-req13">
					<ctl:with-param name="url" select="$url"/>
				</ctl:call-test>
			</xsl:if>
			<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
				<ctl:call-test name="wcs2:soap-core-req13">
					<ctl:with-param name="url" select="$url"/>
				</ctl:call-test>
			</xsl:if>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:req14">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:assertion>req14:Send a valid GetCapabilities request to the server under test, check the result consists of an XML document of type Capabilities and the appropriate components, as defined in the places referenced.</ctl:assertion>
		<ctl:code>
			<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
				<ctl:call-test name="wcs2:get-kvp-core-req14">
					<ctl:with-param name="url" select="$url"/>
				</ctl:call-test>
			</xsl:if>
			<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
				<ctl:call-test name="wcs2:post-xml-core-req14">
					<ctl:with-param name="url" select="$url"/>
				</ctl:call-test>
			</xsl:if>
			<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
				<ctl:call-test name="wcs2:soap-core-req14">
					<ctl:with-param name="url" select="$url"/>
				</ctl:call-test>
			</xsl:if>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:req15">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:assertion>req15:Test the Contents section component.</ctl:assertion>
		<ctl:code>
			<xsl:if test="empty($Capabilities//*[local-name()='Contents'])">
				<ctl:message>[FAILURE] The result should contain a Contents section.</ctl:message>
				<ctl:fail/>
			</xsl:if>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:req16">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req16:In the response to a successful GetCapabilities request containing a CoverageSummary section, each coverage identifier listed shall refer to a coverage offered by the server.</ctl:assertion>
		<ctl:code>
			<xsl:choose>
				<xsl:when test="empty($Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId'])">
					<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('[FAILURE] wcs:CoverageSummary/wcs:CoverageId','does not exsist')"/>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
						<ctl:call-test name="wcs2:get-kvp-core-req16">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
						<ctl:call-test name="wcs2:post-xml-core-req16">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
					<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
						<ctl:call-test name="wcs2:soap-core-req16">
							<ctl:with-param name="url" select="$url"/>
							<ctl:with-param name="Capabilities" select="$Capabilities"/>
						</ctl:call-test>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req13">
		<ctl:param name="url"/>
		<ctl:assertion>req13:Send GetCapabilities requests with valid and invalid request structure by PostXML. Pass test if appropriate valid results or exceptions, resp., are delivered.</ctl:assertion>
		<ctl:code>
			<xsl:variable name="Capabilities">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>post</ctl:method>
					<ctl:header name="Content-type">text/xml</ctl:header>
					<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
								<wcs:GetCapabilities  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
											xmlns:ows="http://www.opengis.net/ows/1.1"
											xmlns:wcs="http://www.opengis.net/wcs/2.0"
											service="WCS" version="2.0.1">
									<ows:AcceptVersions>
										<ows:Version>2.0</ows:Version>
									</ows:AcceptVersions>
								</wcs:GetCapabilities>]]></ctl:body>
					<ctlp:XMLValidatingParser>
						<ctlp:schemas>
							<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
						</ctlp:schemas>
					</ctlp:XMLValidatingParser>
				</ctl:request>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="empty($Capabilities)">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="empty($Capabilities//wcs:Capabilities)">
						<ctl:message>[FAILURE] The result should contain a wcs:Capabilities.</ctl:message>
						<ctl:fail/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:variable name="Capabilities">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>post</ctl:method>
					<ctl:header name="Content-type">text/xml</ctl:header>
					<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
								<wcs:GetCapabilities  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
											xmlns:ows="http://www.opengis.net/ows/1.1"
											xmlns:wcs="http://www.opengis.net/wcs/2.0"
											service="WCS" version="2.0.1" service="WCS">
									<ows:AcceptVersions>
										<ows:Version>2.0</ows:Version>
									</ows:AcceptVersions>
								</wcs:GetCapabilities>]]></ctl:body>
					<ctlp:XMLValidatingParser>
						<ctlp:schemas>
							<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
						</ctlp:schemas>
					</ctlp:XMLValidatingParser>
				</ctl:request>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="empty($Capabilities)">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="not(empty($Capabilities//wcs:Capabilities))">
						<ctl:message>[FAILURE] The result should not contain a wcs:Capabilities when send a invalid request structure.</ctl:message>
						<ctl:fail/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req13">
		<ctl:param name="url"/>
		<ctl:assertion>req13:Send GetCapabilities requests with valid and invalid request structure by GetKVP. Pass test if appropriate valid results or exceptions, resp., are delivered.</ctl:assertion>
		<ctl:code>
			<xsl:variable name="Capabilities">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>get</ctl:method>
					<ctl:param name="SERVICE">WCS</ctl:param>
					<ctl:param name="VERSION">2.0.1</ctl:param>
					<ctl:param name="REQUEST">GetCapabilities</ctl:param>
					<ctlp:XMLValidatingParser>
						<ctlp:schemas>
							<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
						</ctlp:schemas>
					</ctlp:XMLValidatingParser>
				</ctl:request>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="empty($Capabilities)">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="empty($Capabilities//wcs:Capabilities)">
						<ctl:message>[FAILURE] The result should contain a wcs:Capabilities.</ctl:message>
						<ctl:fail/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:variable name="Capabilities">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>get</ctl:method>
					<ctl:param name="SERVICE">WCS</ctl:param>
					<ctl:param name="VERSION">2.0.1</ctl:param>
					<ctl:param name="SERVICE">WCS</ctl:param>
					<ctl:param name="REQUEST">GetCapabilities</ctl:param>
					<ctlp:XMLValidatingParser>
						<ctlp:schemas>
							<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
						</ctlp:schemas>
					</ctlp:XMLValidatingParser>
				</ctl:request>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="empty($Capabilities)">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="not(empty($Capabilities//wcs:Capabilities))">
						<ctl:message>[FAILURE] The result should not contain a wcs:Capabilities when send a invalid request structure.</ctl:message>
						<ctl:fail/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req13">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req13:Send GetCapabilities requests with valid and invalid request structure by SOAP. Pass test if appropriate valid results or exceptions, resp., are delivered.</ctl:assertion>
		<ctl:code>
			<xsl:variable name="Capabilities">
				<ctl:soap-request version="1.2" charset="UTF-8">
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:body>
						<wcs:GetCapabilities xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:wcs="http://www.opengis.net/wcs/2.0" service="WCS" version="2.0.1">
							<ows:AcceptVersions>
								<ows:Version>2.0</ows:Version>
							</ows:AcceptVersions>
						</wcs:GetCapabilities>
					</ctl:body>
					<ctlp:SOAPParser return="content">
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctlp:SOAPParser>
				</ctl:soap-request>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="empty($Capabilities)">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="empty($Capabilities//wcs:Capabilities)">
						<ctl:message>[FAILURE] The result should contain a wcs:Capabilities.</ctl:message>
						<ctl:fail/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req14">
		<ctl:param name="url"/>
		<ctl:assertion>req14:Send a valid GetCapabilities request to the server under test by PostXML, check the result consists of an XML document of type Capabilities and the appropriate components, as defined in the places referenced.</ctl:assertion>
		<ctl:code>
			<xsl:variable name="Capabilities">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>post</ctl:method>
					<ctl:header name="Content-type">text/xml</ctl:header>
					<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
								<wcs:GetCapabilities  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
											xmlns:ows="http://www.opengis.net/ows/1.1"
											xmlns:wcs="http://www.opengis.net/wcs/2.0"
											service="WCS" version="2.0.1">
									<ows:AcceptVersions>
										<ows:Version>2.0</ows:Version>
									</ows:AcceptVersions>
								</wcs:GetCapabilities>]]></ctl:body>
					<ctlp:XMLValidatingParser>
						<ctlp:schemas>
							<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
						</ctlp:schemas>
					</ctlp:XMLValidatingParser>
				</ctl:request>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="empty($Capabilities)">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="empty($Capabilities//wcs:Capabilities)">
						<ctl:message>[FAILURE] The result should contain a wcs:Capabilities.</ctl:message>
						<ctl:fail/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req14">
		<ctl:param name="url"/>
		<ctl:assertion>req14:Send a valid GetCapabilities request to the server under test by GetKVP, check the result consists of an XML document of type Capabilities and the appropriate components, as defined in the places referenced.</ctl:assertion>
		<ctl:code>
			<xsl:variable name="Capabilities">
				<ctl:request>
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>get</ctl:method>
					<ctl:param name="SERVICE">WCS</ctl:param>
					<ctl:param name="VERSION">2.0.1</ctl:param>
					<ctl:param name="REQUEST">GetCapabilities</ctl:param>
					<ctlp:XMLValidatingParser>
						<ctlp:schemas>
							<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
						</ctlp:schemas>
					</ctlp:XMLValidatingParser>
				</ctl:request>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="empty($Capabilities)">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="empty($Capabilities//wcs:Capabilities)">
						<ctl:message>[FAILURE] The result should contain a wcs:Capabilities.</ctl:message>
						<ctl:fail/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req14">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req14:Send a valid GetCapabilities request to the server under test by SOAP, check the result consists of an XML document of type Capabilities and the appropriate components, as defined in the places referenced.</ctl:assertion>
		<ctl:code>
			<xsl:variable name="Capabilities">
				<ctl:soap-request version="1.2" charset="UTF-8">
					<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:body>
						<wcs:GetCapabilities xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:wcs="http://www.opengis.net/wcs/2.0" service="WCS" version="2.0.1">
							<ows:AcceptVersions>
								<ows:Version>2.0</ows:Version>
							</ows:AcceptVersions>
						</wcs:GetCapabilities>
					</ctl:body>
					<ctlp:SOAPParser return="content">
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctlp:SOAPParser>
				</ctl:soap-request>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="empty($Capabilities)">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="empty($Capabilities//wcs:Capabilities)">
						<ctl:message>[FAILURE] The result should contain a wcs:Capabilities.</ctl:message>
						<ctl:fail/>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:post-xml-core-req16">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req16:In the response to a successful GetCapabilities PostXML request containing a CoverageSummary section, each coverage identifier listed shall refer to a coverage offered by the server.</ctl:assertion>
		<ctl:code>
			<xsl:for-each select="$Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId']">
				<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('test',.)"/>
				<xsl:variable name="DescribeCoverage">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>post</ctl:method>
						<ctl:header name="Content-type">text/xml</ctl:header>
						<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
								<wcs:DescribeCoverage  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
									xmlns:wcs='http://www.opengis.net/wcs/2.0'
									xmlns:gml='http://www.opengis.net/gml/3.2'
									xsi:schemaLocation='http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd'
									service="WCS" version="2.0.1">
									<wcs:CoverageId>]]><xsl:value-of select="."/><![CDATA[</wcs:CoverageId></wcs:DescribeCoverage>]]></ctl:body>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="empty($DescribeCoverage)">
						<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="not(empty($DescribeCoverage//*[local-name()='Exception']))">
							<ctl:message>[FAILURE] The result should not contain an ows:Exception.</ctl:message>
							<ctl:fail/>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:for-each>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:get-kvp-core-req16">
		<ctl:param name="url"/>
		<ctl:param name="Capabilities"/>
		<ctl:assertion>req16:In the response to a successful GetCapabilities GetKVP request containing a CoverageSummary section, each coverage identifier listed shall refer to a coverage offered by the server.</ctl:assertion>
		<ctl:code>
			<xsl:for-each select="$Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId']">
				<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('test',.)"/>
				<xsl:variable name="DescribeCoverage">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:method>get</ctl:method>
						<ctl:param name="service">WCS</ctl:param>
						<ctl:param name="VERSION">2.0.1</ctl:param>
						<ctl:param name="request">DescribeCoverage</ctl:param>
						<ctl:param name="CoverageId">
							<xsl:value-of select="."/>
						</ctl:param>
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctl:request>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="empty($DescribeCoverage)">
						<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="not(empty($DescribeCoverage//*[local-name()='Exception']))">
							<ctl:message>[FAILURE] The result should not contain an ows:Exception.</ctl:message>
							<ctl:fail/>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:for-each>
		</ctl:code>
	</ctl:test>
	<ctl:test name="wcs2:soap-core-req16">
		<ctl:param name="Capabilities"/>
		<ctl:param name="url"/>
		<ctl:assertion>req16:In the response to a successful GetCapabilities SOAP request containing a CoverageSummary section, each coverage identifier listed shall refer to a coverage offered by the server.</ctl:assertion>
		<ctl:code>
			<xsl:for-each select="$Capabilities//*[local-name()='CoverageSummary']/*[local-name()='CoverageId']">
				<ctl:message xmlns:ctl="http://www.occamlab.com/ctl" select="concat('test',.)"/>
				<xsl:variable name="DescribeCoverage">
					<ctl:soap-request version="1.2" charset="UTF-8">
						<ctl:url>
							<xsl:value-of select="$url"/>
						</ctl:url>
						<ctl:body>
							<wcs:DescribeCoverage xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:wcs="http://www.opengis.net/wcs/2.0" xmlns:gml="http://www.opengis.net/gml/3.2" xsi:schemaLocation="http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd" service="WCS" version="2.0.1">
								<wcs:CoverageId>
									<xsl:value-of select="."/>
								</wcs:CoverageId>
							</wcs:DescribeCoverage>
						</ctl:body>
						<ctlp:SOAPParser return="content">
							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>
						</ctlp:SOAPParser>
					</ctl:soap-request>
				</xsl:variable>
				<xsl:choose>
					<xsl:when test="empty($DescribeCoverage)">
						<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="not(empty($DescribeCoverage//*[local-name()='Exception']))">
							<ctl:message>[FAILURE] The result should not contain an ows:Exception.</ctl:message>
							<ctl:fail/>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:for-each>
		</ctl:code>
	</ctl:test>
</ctl:package>
