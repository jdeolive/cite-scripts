<ctl:package
 xmlns:ctl="http://www.occamlab.com/ctl"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
 xmlns:ows='http://www.opengis.net/ows/2.0'
 xmlns:gml='http://www.opengis.net/gml/3.2'
 xmlns:wcs='http://www.opengis.net/wcs/2.0'
 xmlns:ctlp="http://www.occamlab.com/te/parsers"
 xmlns:wcs2="http://www.opengis.net/wcs/2.0"
 xmlns:sch="http://purl.oclc.org/dsdl/schematron"
 xmlns:xlink="http://www.w3.org/1999/xlink"
>


	<ctl:test name="wcs2:req10">
   		<ctl:param name="url"/>
	    	<ctl:param name="Capabilities"/>   		
    		<ctl:assertion>req10:All WCS request types shall be a subtype of RequestBase.</ctl:assertion>
    		<ctl:code>
			<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
				<ctl:call-test name="wcs2:get-kvp-core-req10">
					<ctl:with-param name="url" select="$url"/>      
				</ctl:call-test>            									
			</xsl:if>
			<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
				<ctl:call-test name="wcs2:post-xml-core-req10">
					<ctl:with-param name="url" select="$url"/>      					
				</ctl:call-test>             
			</xsl:if>
			<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
				<ctl:call-test name="wcs2:soap-core-req10">
					<ctl:with-param name="url" select="$url"/>    				
				</ctl:call-test>              
			</xsl:if>   
    		</ctl:code>
  	</ctl:test>
 	<ctl:test name="wcs2:req11">
   		<ctl:param name="url"/>
	    	<ctl:param name="Capabilities"/>   		
    		<ctl:assertion>req11:For all WCS request types, the requst service parameter shall have a fixed value of 'WCS'.</ctl:assertion>
    		<ctl:code>
			<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
				<ctl:call-test name="wcs2:get-kvp-core-req11">
					<ctl:with-param name="url" select="$url"/>      
				</ctl:call-test>            									
			</xsl:if>
			<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
				<ctl:call-test name="wcs2:post-xml-core-req11">
					<ctl:with-param name="url" select="$url"/>      					
				</ctl:call-test>             
			</xsl:if>
			<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
				<ctl:call-test name="wcs2:soap-core-req11">
					<ctl:with-param name="url" select="$url"/>    				
				</ctl:call-test>              
			</xsl:if>   
    		</ctl:code>
  	</ctl:test>

 	<ctl:test name="wcs2:req12">
   		<ctl:param name="url"/>
	    	<ctl:param name="Capabilities"/>   		
    		<ctl:assertion>req12:For all WCS request types, the request version parameter shall have a fixed value of '2.0'.</ctl:assertion>
    		<ctl:code>
			<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_get-kvp/1.0')">
				<ctl:call-test name="wcs2:get-kvp-core-req12">
					<ctl:with-param name="url" select="$url"/>      
				</ctl:call-test>            									
			</xsl:if>
			<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_post-xml/1.0')">
				<ctl:call-test name="wcs2:post-xml-core-req12">
					<ctl:with-param name="url" select="$url"/>      					
				</ctl:call-test>             
			</xsl:if>
			<xsl:if test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/WCS_protocol-binding_soap/1.0')">
				<ctl:call-test name="wcs2:soap-core-req12">
					<ctl:with-param name="url" select="$url"/>    				
				</ctl:call-test>              
			</xsl:if>   
    		</ctl:code>
  	</ctl:test>  	
 


	<ctl:test name="wcs2:post-xml-core-req10">
    		<ctl:param name="url"/>
    		<ctl:assertion>req10:Test all WCS request types are a subtype of RequestBase by PostXML.</ctl:assertion>
    		<ctl:code>

     			<xsl:variable name="Capabilities">
				<ctl:request>
			       		<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>post</ctl:method>
					<ctl:header name="Content-type">text/xml</ctl:header>
					<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
								<wcs:GetCapabilities  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
											xmlns:ows="http://www.opengis.net/ows/1.1"
											xmlns:wcs="http://www.opengis.net/wcs/2.0"
											service="WCS" version="2.0">
									<ows:AcceptVersions>
										<ows:Version>2.0</ows:Version>
									</ows:AcceptVersions>
								</wcs:GetCapabilities>]]></ctl:body>
           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
	        				</ctlp:schemas>
           				</ctlp:XMLValidatingParser>
        			</ctl:request>
      			</xsl:variable>
      			<xsl:choose>
  				<xsl:when test="string-length($Capabilities)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($Capabilities//wcs:Capabilities)">
        			   		<ctl:message>[FAILURE] The result should contain a wcs:Capabilities.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if>
  				</xsl:otherwise>
      			</xsl:choose>  
       			<xsl:variable name="DescribeCoverage">
            			<ctl:request>
               				<ctl:url>
                  				<xsl:value-of select="$url"/>
               				</ctl:url>
               				<ctl:method>post</ctl:method>
               				<ctl:header name="Content-type">application/x-www-form-urlencoded</ctl:header>
	      				<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
							<wcs:DescribeCoverage  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
    								xmlns:wcs='http://www.opengis.net/wcs/2.0'
    								xmlns:gml='http://www.opengis.net/gml/3.2'
    								xsi:schemaLocation='http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd'
    								service="WCS" version="2.0">
    								<wcs:CoverageId>]]><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/><![CDATA[</wcs:CoverageId></wcs:DescribeCoverage>]]>
    					</ctl:body>

           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
	        				</ctlp:schemas>
             				</ctlp:XMLValidatingParser>

         			</ctl:request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="not(empty($DescribeCoverage//ows:ExceptionReport))">
        			   		<ctl:message>[FAILURE] The result should not be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> 
  				</xsl:otherwise>
      			</xsl:choose> 
			<xsl:choose>
				<xsl:when test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/GMLCOV/1.0/conf/gml-coverage')">
      			
					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:header name="Content-type">application/x-www-form-urlencoded</ctl:header>
							<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
								<wcs:GetCoverage xmlns:wcs="http://www.opengis.net/wcs/2.0"
									xmlns:gml="http://www.opengis.net/gml/3.2"
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd"
									service="WCS" version="2.0">
									<wcs:CoverageId>]]><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/><![CDATA[</wcs:CoverageId></wcs:GetCoverage>]]>
							</ctl:body>

							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>

						</ctl:request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="not(empty($GetCoverage//ows:ExceptionReport))">
								<ctl:message>[FAILURE] The result should not be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>     
				</xsl:when>
				<xsl:otherwise>
					<ctl:message> [MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose> 					

   		</ctl:code>
  	</ctl:test>

	<ctl:test name="wcs2:get-kvp-core-req10">
    		<ctl:param name="url"/>
    		<ctl:assertion>req10:Test all WCS request types are a subtype of RequestBase by GetKVP.</ctl:assertion>
    		<ctl:code>

     			<xsl:variable name="Capabilities">
				<ctl:request>
          				<ctl:url>
            					<xsl:value-of select="$url"/>
          				</ctl:url>
          				<ctl:method>get</ctl:method>
          				<ctl:param name="SERVICE">WCS</ctl:param>
          				<ctl:param name="VERSION">2.0</ctl:param>
          				<ctl:param name="REQUEST">GetCapabilities</ctl:param>
           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
	        				</ctlp:schemas>
           				</ctlp:XMLValidatingParser>
        			</ctl:request>
      			</xsl:variable>
      			<xsl:choose>
  				<xsl:when test="string-length($Capabilities)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($Capabilities//wcs:Capabilities)">
        			   		<ctl:message>[FAILURE] The result should contain a wcs:Capabilities.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if>
  				</xsl:otherwise>
      			</xsl:choose>  
       			<xsl:variable name="DescribeCoverage">
            			<ctl:request>
           				<ctl:url>
               					<xsl:value-of select="$url"/>
           				</ctl:url>
           				<ctl:method>get</ctl:method>
           				<ctl:param name="service">WCS</ctl:param>
           				<ctl:param name="VERSION">2.0</ctl:param>           
           				<ctl:param name="request">DescribeCoverage</ctl:param>      
           				<ctl:param name="CoverageId"><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/></ctl:param>   

           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
	        				</ctlp:schemas>
             				</ctlp:XMLValidatingParser>

         			</ctl:request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="not(empty($DescribeCoverage//ows:ExceptionReport))">
        			   		<ctl:message>[FAILURE] The result should not be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> ...
  				</xsl:otherwise>
      			</xsl:choose>       
 			<xsl:choose>
				<xsl:when test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/GMLCOV/1.0/conf/gml-coverage')">
     			
					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0</ctl:param>           
							<ctl:param name="request">GetCoverage</ctl:param>      
							<ctl:param name="CoverageId"><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/></ctl:param>   

							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>

						</ctl:request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="not(empty($GetCoverage//ows:ExceptionReport))">
								<ctl:message>[FAILURE] The result should not be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>      
					
				</xsl:when>
				<xsl:otherwise>
					<ctl:message> the server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose> 
   		</ctl:code>
  	</ctl:test>
	<ctl:test name="wcs2:soap-core-req10">
	    	<ctl:param name="Capabilities"/>
	    	<ctl:param name="url"/>
	    	<ctl:assertion>req10:Test all WCS request types are a subtype of RequestBase by SOAP.</ctl:assertion>
    		
	    	<ctl:code>
     			<xsl:variable name="Capabilities">
				<ctl:soap-request version="1.2" charset="UTF-8">
			       		<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:body>
					
								<wcs:GetCapabilities  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
											xmlns:ows="http://www.opengis.net/ows/1.1"
											xmlns:wcs="http://www.opengis.net/wcs/2.0"
											service="WCS" version="2.0">		
								</wcs:GetCapabilities>
					</ctl:body>
					<ctlp:SOAPParser return="content">								
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctlp:SOAPParser>						
        			</ctl:soap-request>
      			</xsl:variable>
      			<xsl:choose>
  				<xsl:when test="string-length($Capabilities)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($Capabilities//wcs:Capabilities)">
        			   		<ctl:message>[FAILURE] The result should contain a wcs:Capabilities.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if>
  				</xsl:otherwise>
      			</xsl:choose>  
       			<xsl:variable name="DescribeCoverage">
            			<ctl:soap-request version="1.2" charset="UTF-8">
               				<ctl:url>
                  				<xsl:value-of select="$url"/>
               				</ctl:url>
               				<ctl:body>
               						<wcs:DescribeCoverage  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
    								xmlns:wcs='http://www.opengis.net/wcs/2.0'
    								xmlns:gml='http://www.opengis.net/gml/3.2'
    								xsi:schemaLocation='http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd'
    								service="WCS" version="2.0">
    								<wcs:CoverageId><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/></wcs:CoverageId></wcs:DescribeCoverage>
    					</ctl:body>
					<ctlp:SOAPParser return="content">
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctlp:SOAPParser>
         			</ctl:soap-request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="not(empty($DescribeCoverage//ows:ExceptionReport))">
        			   		<ctl:message>[FAILURE] The result should not be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> 
  				</xsl:otherwise>
      			</xsl:choose> 
			<xsl:choose>
				<xsl:when test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/GMLCOV/1.0/conf/gml-coverage')">
      			
					<xsl:variable name="GetCoverage">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:body>
								<wcs:GetCoverage xmlns:wcs="http://www.opengis.net/wcs/2.0"
									xmlns:gml="http://www.opengis.net/gml/3.2"
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd"
									service="WCS" version="2.0">
									<wcs:CoverageId><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/></wcs:CoverageId></wcs:GetCoverage>
							</ctl:body>
							<ctlp:SOAPParser return="content">
								<ctlp:XMLValidatingParser>
									<ctlp:schemas>
										<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
									</ctlp:schemas>
								</ctlp:XMLValidatingParser>
							</ctlp:SOAPParser> 
						</ctl:soap-request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="not(empty($GetCoverage//ows:ExceptionReport))">
								<ctl:message>[FAILURE] The result should not be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>     
				</xsl:when>
				<xsl:otherwise>
					<ctl:message> [MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose> 
	    	</ctl:code>
	 </ctl:test>
 
	<ctl:test name="wcs2:post-xml-core-req11">
    		<ctl:param name="url"/>
    		<ctl:assertion>req11:Test all WCS request types, the requst service parameter has a fixed value of 'WCS' by PostXML.</ctl:assertion>
    		<ctl:code>
 
     			<xsl:variable name="Capabilities">
				<ctl:request>
			       		<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>post</ctl:method>
					<ctl:header name="Content-type">text/xml</ctl:header>
					<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
								<wcs:GetCapabilities  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
											xmlns:ows="http://www.opengis.net/ows/1.1"
											xmlns:wcs="http://www.opengis.net/wcs/2.0"
											service="wCS" version="2.0">
									<ows:AcceptVersions>
										<ows:Version>2.0</ows:Version>
									</ows:AcceptVersions>
								</wcs:GetCapabilities>]]></ctl:body>
           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
	        				</ctlp:schemas>
           				</ctlp:XMLValidatingParser>
        			</ctl:request>
      			</xsl:variable>
      			<xsl:choose>
  				<xsl:when test="string-length($Capabilities)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($Capabilities//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should contain an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if>
  				</xsl:otherwise>
      			</xsl:choose> 

     			<xsl:variable name="Capabilities">
				<ctl:request>
			       		<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>post</ctl:method>
					<ctl:header name="Content-type">text/xml</ctl:header>
					<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
								<wcs:GetCapabilities  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
											xmlns:ows="http://www.opengis.net/ows/1.1"
											xmlns:wcs="http://www.opengis.net/wcs/2.0"
											service="WCS1" version="2.0">
									<ows:AcceptVersions>
										<ows:Version>2.0</ows:Version>
									</ows:AcceptVersions>
								</wcs:GetCapabilities>]]></ctl:body>
           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
	        				</ctlp:schemas>
           				</ctlp:XMLValidatingParser>
        			</ctl:request>
      			</xsl:variable>
      			<xsl:choose>
  				<xsl:when test="string-length($Capabilities)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($Capabilities//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should contain an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if>
  				</xsl:otherwise>
      			</xsl:choose> 
    			<xsl:variable name="Capabilities">
				<ctl:request>
			       		<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>post</ctl:method>
					<ctl:header name="Content-type">text/xml</ctl:header>
					<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
								<wcs:GetCapabilities  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
											xmlns:ows="http://www.opengis.net/ows/1.1"
											xmlns:wcs="http://www.opengis.net/wcs/2.0"
											service="WCS" version="2.0">
									<ows:AcceptVersions>
										<ows:Version>2.0</ows:Version>
									</ows:AcceptVersions>
								</wcs:GetCapabilities>]]></ctl:body>
           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
	        				</ctlp:schemas>
           				</ctlp:XMLValidatingParser>
        			</ctl:request>
      			</xsl:variable>
      			<xsl:choose>
  				<xsl:when test="string-length($Capabilities)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($Capabilities//wcs:Capabilities)">
        			   		<ctl:message>[FAILURE] The result should contain a wcs:Capabilities.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if>
  				</xsl:otherwise>
      			</xsl:choose> 

   
       			<xsl:variable name="DescribeCoverage">
            			<ctl:request>
               				<ctl:url>
                  				<xsl:value-of select="$url"/>
               				</ctl:url>
               				<ctl:method>post</ctl:method>
               				<ctl:header name="Content-type">application/x-www-form-urlencoded</ctl:header>
	      				<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
							<wcs:DescribeCoverage  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
    								xmlns:wcs='http://www.opengis.net/wcs/2.0'
    								xmlns:gml='http://www.opengis.net/gml/3.2'
    								xsi:schemaLocation='http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd'
    								service="wcS" version="2.0">
    								<wcs:CoverageId>]]><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/><![CDATA[</wcs:CoverageId></wcs:DescribeCoverage>]]>
    					</ctl:body>

           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
	        				</ctlp:schemas>
             				</ctlp:XMLValidatingParser>

         			</ctl:request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($DescribeCoverage//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should  be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> 
  				</xsl:otherwise>
      			</xsl:choose>     
       			<xsl:variable name="DescribeCoverage">
            			<ctl:request>
               				<ctl:url>
                  				<xsl:value-of select="$url"/>
               				</ctl:url>
               				<ctl:method>post</ctl:method>
               				<ctl:header name="Content-type">application/x-www-form-urlencoded</ctl:header>
	      				<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
							<wcs:DescribeCoverage  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
    								xmlns:wcs='http://www.opengis.net/wcs/2.0'
    								xmlns:gml='http://www.opengis.net/gml/3.2'
    								xsi:schemaLocation='http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd'
    								service="WFS" version="2.0">
    								<wcs:CoverageId>]]><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/><![CDATA[</wcs:CoverageId></wcs:DescribeCoverage>]]>
    					</ctl:body>

           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
	        				</ctlp:schemas>
             				</ctlp:XMLValidatingParser>

         			</ctl:request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($DescribeCoverage//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> 
  				</xsl:otherwise>
      			</xsl:choose>     
        			<xsl:variable name="DescribeCoverage">
            			<ctl:request>
               				<ctl:url>
                  				<xsl:value-of select="$url"/>
               				</ctl:url>
               				<ctl:method>post</ctl:method>
               				<ctl:header name="Content-type">application/x-www-form-urlencoded</ctl:header>
	      				<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
							<wcs:DescribeCoverage  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
    								xmlns:wcs='http://www.opengis.net/wcs/2.0'
    								xmlns:gml='http://www.opengis.net/gml/3.2'
    								xsi:schemaLocation='http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd'
    								service="WCS" version="2.0">
    								<wcs:CoverageId>]]><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/><![CDATA[</wcs:CoverageId></wcs:DescribeCoverage>]]>
    					</ctl:body>

           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
	        				</ctlp:schemas>
             				</ctlp:XMLValidatingParser>

         			</ctl:request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="not(empty($DescribeCoverage//ows:ExceptionReport))">
        			   		<ctl:message>[FAILURE] The result should not be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> 
  				</xsl:otherwise>
      			</xsl:choose>       			
 			<xsl:choose>
				<xsl:when test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/GMLCOV/1.0/conf/gml-coverage')">
					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:header name="Content-type">application/x-www-form-urlencoded</ctl:header>
							<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
								<wcs:GetCoverage xmlns:wcs="http://www.opengis.net/wcs/2.0"
									xmlns:gml="http://www.opengis.net/gml/3.2"
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd"
									service="WCS" version="2.0">
									<wcs:CoverageId>]]><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/><![CDATA[</wcs:CoverageId></wcs:GetCoverage>]]>
							</ctl:body>

							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>

						</ctl:request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="not(empty($GetCoverage//ows:ExceptionReport))">
								<ctl:message>[FAILURE] The result should not be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>  

					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:header name="Content-type">application/x-www-form-urlencoded</ctl:header>
							<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
								<wcs:GetCoverage xmlns:wcs="http://www.opengis.net/wcs/2.0"
									xmlns:gml="http://www.opengis.net/gml/3.2"
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd"
									service="WCs" version="2.0">
									<wcs:CoverageId>]]><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/><![CDATA[</wcs:CoverageId></wcs:GetCoverage>]]>
							</ctl:body>

							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>

						</ctl:request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="empty($GetCoverage//ows:ExceptionReport)">
								<ctl:message>[FAILURE] The result should be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>        			
					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:header name="Content-type">application/x-www-form-urlencoded</ctl:header>
							<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
								<wcs:GetCoverage xmlns:wcs="http://www.opengis.net/wcs/2.0"
									xmlns:gml="http://www.opengis.net/gml/3.2"
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd"
									service="WSC" version="2.0">
									<wcs:CoverageId>]]><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/><![CDATA[</wcs:CoverageId></wcs:GetCoverage>]]>
							</ctl:body>

							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>

						</ctl:request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="empty($GetCoverage//ows:ExceptionReport)">
								<ctl:message>[FAILURE] The result should be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>       
					
				</xsl:when>
				<xsl:otherwise>
					<ctl:message> [MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose> 					
    		</ctl:code>
  	</ctl:test>   
 
	<ctl:test name="wcs2:get-kvp-core-req11">
    		<ctl:param name="url"/>
    		<ctl:assertion>req11:Test all WCS request types, the requst service parameter has a fixed value of 'WCS' by GetKVP.</ctl:assertion>
    		<ctl:code>

     			<xsl:variable name="Capabilities">
				<ctl:request>
          				<ctl:url>
            					<xsl:value-of select="$url"/>
          				</ctl:url>
          				<ctl:method>get</ctl:method>
          				<ctl:param name="SERVICE">wCS</ctl:param>
          				<ctl:param name="VERSION">2.0</ctl:param>
          				<ctl:param name="REQUEST">GetCapabilities</ctl:param>
           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
	        				</ctlp:schemas>
           				</ctlp:XMLValidatingParser>
        			</ctl:request>
      			</xsl:variable>
      			<xsl:choose>
  				<xsl:when test="string-length($Capabilities)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($Capabilities//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should contain an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if>
  				</xsl:otherwise>
      			</xsl:choose> 

     			<xsl:variable name="Capabilities">
				<ctl:request>
          				<ctl:url>
            					<xsl:value-of select="$url"/>
          				</ctl:url>
          				<ctl:method>get</ctl:method>
          				<ctl:param name="SERVICE">WCS1</ctl:param>
          				<ctl:param name="VERSION">2.0</ctl:param>
          				<ctl:param name="REQUEST">GetCapabilities</ctl:param>
           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
	        				</ctlp:schemas>
           				</ctlp:XMLValidatingParser>
        			</ctl:request>
      			</xsl:variable>
      			<xsl:choose>
  				<xsl:when test="string-length($Capabilities)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($Capabilities//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should contain an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if>
  				</xsl:otherwise>
      			</xsl:choose> 
     			<xsl:variable name="Capabilities">
				<ctl:request>
          				<ctl:url>
            					<xsl:value-of select="$url"/>
          				</ctl:url>
          				<ctl:method>get</ctl:method>
          				<ctl:param name="SERVICE">WCS</ctl:param>
          				<ctl:param name="VERSION">2.0</ctl:param>
          				<ctl:param name="REQUEST">GetCapabilities</ctl:param>
           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
	        				</ctlp:schemas>
           				</ctlp:XMLValidatingParser>
        			</ctl:request>
      			</xsl:variable>
      			<xsl:choose>
  				<xsl:when test="string-length($Capabilities)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($Capabilities//wcs:Capabilities)">
        			   		<ctl:message>[FAILURE] The result should contain a wcs:Capabilities.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if>
  				</xsl:otherwise>
      			</xsl:choose> 

 
       			<xsl:variable name="DescribeCoverage">
            			<ctl:request>
               				<ctl:url>
                  				<xsl:value-of select="$url"/>
               				</ctl:url>
               				<ctl:method>get</ctl:method>
           				<ctl:param name="service">wcS</ctl:param>
           				<ctl:param name="VERSION">2.0</ctl:param>           
           				<ctl:param name="request">DescribeCoverage</ctl:param>  
            				<ctl:param name="CoverageId"><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/></ctl:param>             				
 

           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
	        				</ctlp:schemas>
             				</ctlp:XMLValidatingParser>

         			</ctl:request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($DescribeCoverage//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should  be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> 
  				</xsl:otherwise>
      			</xsl:choose>     
       			<xsl:variable name="DescribeCoverage">
            			<ctl:request>
               				<ctl:url>
                  				<xsl:value-of select="$url"/>
               				</ctl:url>
               				<ctl:method>get</ctl:method>
           				<ctl:param name="service">WFS</ctl:param>
           				<ctl:param name="VERSION">2.0</ctl:param>           
           				<ctl:param name="request">DescribeCoverage</ctl:param>  
            				<ctl:param name="CoverageId"><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/></ctl:param>             				
 

           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
	        				</ctlp:schemas>
             				</ctlp:XMLValidatingParser>

         			</ctl:request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($DescribeCoverage//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> 
  				</xsl:otherwise>
      			</xsl:choose>  
        			<xsl:variable name="DescribeCoverage">
            			<ctl:request>
               				<ctl:url>
                  				<xsl:value-of select="$url"/>
               				</ctl:url>
               				<ctl:method>get</ctl:method>
           				<ctl:param name="service">WCS</ctl:param>
           				<ctl:param name="VERSION">2.0</ctl:param>           
           				<ctl:param name="request">DescribeCoverage</ctl:param>  
            				<ctl:param name="CoverageId"><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/></ctl:param>             				
 
           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
	        				</ctlp:schemas>
             				</ctlp:XMLValidatingParser>

         			</ctl:request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="not(empty($DescribeCoverage//ows:ExceptionReport))">
        			   		<ctl:message>[FAILURE] The result should not be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> 
  				</xsl:otherwise>
      			</xsl:choose>         			
 			<xsl:choose>
				<xsl:when test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/GMLCOV/1.0/conf/gml-coverage')">

					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0</ctl:param>           
							<ctl:param name="request">GetCoverage</ctl:param>  
							<ctl:param name="CoverageId"><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/></ctl:param>             				

							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>

						</ctl:request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="not(empty($GetCoverage//ows:ExceptionReport))">
								<ctl:message>[FAILURE] The result should not be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>  

					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCs</ctl:param>
							<ctl:param name="VERSION">2.0</ctl:param>           
							<ctl:param name="request">GetCoverage</ctl:param>  
							<ctl:param name="CoverageId"><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/></ctl:param>             				


							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>

						</ctl:request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="empty($GetCoverage//ows:ExceptionReport)">
								<ctl:message>[FAILURE] The result should be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>        			
					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WSC</ctl:param>
							<ctl:param name="VERSION">2.0</ctl:param>           
							<ctl:param name="request">GetCoverage</ctl:param>  
							<ctl:param name="CoverageId"><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/></ctl:param>             				


							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>

						</ctl:request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="empty($GetCoverage//ows:ExceptionReport)">
								<ctl:message>[FAILURE] The result should be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>       
				
				</xsl:when>
				<xsl:otherwise>
					<ctl:message> [MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose> 
    		</ctl:code>
  	</ctl:test> 
	<ctl:test name="wcs2:soap-core-req11">
	    	<ctl:param name="Capabilities"/>
	    	<ctl:param name="url"/>
	    	<ctl:assertion>req11:Test all WCS request types, the requst service parameter has a fixed value of 'WCS' by SOAP.</ctl:assertion>
    		<ctl:code>

     			<xsl:variable name="Capabilities">
				<ctl:soap-request version="1.2" charset="UTF-8">
			       		<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url><ctl:body>
								<wcs:GetCapabilities  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
											xmlns:ows="http://www.opengis.net/ows/1.1"
											xmlns:wcs="http://www.opengis.net/wcs/2.0"
											service="wCS" version="2.0">
									<ows:AcceptVersions>
										<ows:Version>2.0</ows:Version>
									</ows:AcceptVersions>
								</wcs:GetCapabilities></ctl:body>
					<ctlp:SOAPParser return="content">								
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctlp:SOAPParser>	
        			</ctl:soap-request>
      			</xsl:variable>
      			<xsl:choose>
  				<xsl:when test="string-length($Capabilities)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($Capabilities//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should contain an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if>
  				</xsl:otherwise>
      			</xsl:choose> 

     			<xsl:variable name="Capabilities">
				<ctl:soap-request version="1.2" charset="UTF-8">
			       		<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url><ctl:body>
								<wcs:GetCapabilities  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
											xmlns:ows="http://www.opengis.net/ows/1.1"
											xmlns:wcs="http://www.opengis.net/wcs/2.0"
											service="WCS1" version="2.0">
									<ows:AcceptVersions>
										<ows:Version>2.0</ows:Version>
									</ows:AcceptVersions>
								</wcs:GetCapabilities></ctl:body>
					<ctlp:SOAPParser return="content">			
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctlp:SOAPParser>	
        			</ctl:soap-request>
      			</xsl:variable>
      			<xsl:choose>
  				<xsl:when test="string-length($Capabilities)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($Capabilities//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should contain an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if>
  				</xsl:otherwise>
      			</xsl:choose> 

     			<xsl:variable name="Capabilities">
				<ctl:soap-request version="1.2" charset="UTF-8">
			       		<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url><ctl:body>
								<wcs:GetCapabilities  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
											xmlns:ows="http://www.opengis.net/ows/1.1"
											xmlns:wcs="http://www.opengis.net/wcs/2.0"
											service="WCS" version="2.0">
									<ows:AcceptVersions>
										<ows:Version>2.0</ows:Version>
									</ows:AcceptVersions>
								</wcs:GetCapabilities></ctl:body>
					<ctlp:SOAPParser return="content">					
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctlp:SOAPParser> 
        			</ctl:soap-request>
      			</xsl:variable>
      			<xsl:choose>
  				<xsl:when test="string-length($Capabilities)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($Capabilities//wcs:Capabilities)">
        			   		<ctl:message>[FAILURE] The result should contain a wcs:Capabilities.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if>
  				</xsl:otherwise>
      			</xsl:choose> 

       			<xsl:variable name="DescribeCoverage">
            			<ctl:soap-request version="1.2" charset="UTF-8">
               				<ctl:url>
                  				<xsl:value-of select="$url"/>
               				</ctl:url><ctl:body>
							<wcs:DescribeCoverage  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
    								xmlns:wcs='http://www.opengis.net/wcs/2.0'
    								xmlns:gml='http://www.opengis.net/gml/3.2'
    								xsi:schemaLocation='http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd'
    								service="wcS" version="2.0">
    								<wcs:CoverageId><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/></wcs:CoverageId></wcs:DescribeCoverage>
    					</ctl:body>
					<ctlp:SOAPParser return="content">
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctlp:SOAPParser>
         			</ctl:soap-request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($DescribeCoverage//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should  be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> 
  				</xsl:otherwise>
      			</xsl:choose>     
       			<xsl:variable name="DescribeCoverage">
            			<ctl:soap-request version="1.2" charset="UTF-8">
               				<ctl:url>
                  				<xsl:value-of select="$url"/>
               				</ctl:url><ctl:body>
							<wcs:DescribeCoverage  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
    								xmlns:wcs='http://www.opengis.net/wcs/2.0'
    								xmlns:gml='http://www.opengis.net/gml/3.2'
    								xsi:schemaLocation='http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd'
    								service="WFS" version="2.0">
    								<wcs:CoverageId><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/></wcs:CoverageId></wcs:DescribeCoverage>
    					</ctl:body>
					<ctlp:SOAPParser return="content">
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctlp:SOAPParser>
         			</ctl:soap-request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($DescribeCoverage//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> 
  				</xsl:otherwise>
      			</xsl:choose>     
       			<xsl:variable name="DescribeCoverage">
            			<ctl:soap-request version="1.2" charset="UTF-8">
               				<ctl:url>
                  				<xsl:value-of select="$url"/>
               				</ctl:url><ctl:body>
							<wcs:DescribeCoverage  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
    								xmlns:wcs='http://www.opengis.net/wcs/2.0'
    								xmlns:gml='http://www.opengis.net/gml/3.2'
    								xsi:schemaLocation='http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd'
    								service="WCS" version="2.0">
    								<wcs:CoverageId><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/></wcs:CoverageId></wcs:DescribeCoverage>
    					</ctl:body>
					<ctlp:SOAPParser return="content">
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctlp:SOAPParser>
         			</ctl:soap-request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="not(empty($DescribeCoverage//ows:ExceptionReport))">
        			   		<ctl:message>[FAILURE] The result should not be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> 
  				</xsl:otherwise>
      			</xsl:choose>           			
 			<xsl:choose>
				<xsl:when test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/GMLCOV/1.0/conf/gml-coverage')">
					<xsl:variable name="GetCoverage">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url><ctl:body>
								<wcs:GetCoverage xmlns:wcs="http://www.opengis.net/wcs/2.0"
									xmlns:gml="http://www.opengis.net/gml/3.2"
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd"
									service="WCS" version="2.0">
									<wcs:CoverageId><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/></wcs:CoverageId></wcs:GetCoverage>
							</ctl:body>
							<ctlp:SOAPParser return="content">
								<ctlp:XMLValidatingParser>
									<ctlp:schemas>
										<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
									</ctlp:schemas>
								</ctlp:XMLValidatingParser>
							</ctlp:SOAPParser>
						</ctl:soap-request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="not(empty($GetCoverage//ows:ExceptionReport))">
								<ctl:message>[FAILURE] The result should not be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>  

					<xsl:variable name="GetCoverage">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url><ctl:body>
								<wcs:GetCoverage xmlns:wcs="http://www.opengis.net/wcs/2.0"
									xmlns:gml="http://www.opengis.net/gml/3.2"
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd"
									service="WCs" version="2.0">
									<wcs:CoverageId><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/></wcs:CoverageId></wcs:GetCoverage>
							</ctl:body>
							
							<ctlp:SOAPParser return="content">
								<ctlp:XMLValidatingParser>
									<ctlp:schemas>
										<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
									</ctlp:schemas>
								</ctlp:XMLValidatingParser>
							</ctlp:SOAPParser>
						</ctl:soap-request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="empty($GetCoverage//ows:ExceptionReport)">
								<ctl:message>[FAILURE] The result should be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>        			
					<xsl:variable name="GetCoverage">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url><ctl:body>
								<wcs:GetCoverage xmlns:wcs="http://www.opengis.net/wcs/2.0"
									xmlns:gml="http://www.opengis.net/gml/3.2"
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd"
									service="WSC" version="2.0">
									<wcs:CoverageId><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/></wcs:CoverageId></wcs:GetCoverage>
							</ctl:body>
							<ctlp:SOAPParser return="content">
								<ctlp:XMLValidatingParser>
									<ctlp:schemas>
										<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
									</ctlp:schemas>
								</ctlp:XMLValidatingParser>
							</ctlp:SOAPParser>
						</ctl:soap-request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="empty($GetCoverage//ows:ExceptionReport)">
								<ctl:message>[FAILURE] The result should be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>       
					
				</xsl:when>
				<xsl:otherwise>
					<ctl:message> [MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose> 		
	    	</ctl:code>
	 </ctl:test>
  
	<ctl:test name="wcs2:post-xml-core-req12">
    		<ctl:param name="url"/>
    		<ctl:assertion>req12:For all WCS request types, test the request version parameter has a fixed value of '2.0' by PostXML.</ctl:assertion>
    		<ctl:code>

     			<xsl:variable name="Capabilities">
				<ctl:request>
			       		<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>post</ctl:method>
					<ctl:header name="Content-type">text/xml</ctl:header>
					<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
								<wcs:GetCapabilities  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
											xmlns:ows="http://www.opengis.net/ows/1.1"
											xmlns:wcs="http://www.opengis.net/wcs/2.0"
											service="WCS" version="2.0">
									<ows:AcceptVersions>
										<ows:Version>2.0</ows:Version>
									</ows:AcceptVersions>
								</wcs:GetCapabilities>]]></ctl:body>
           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
	        				</ctlp:schemas>
           				</ctlp:XMLValidatingParser>
        			</ctl:request>
      			</xsl:variable>
      			<xsl:choose>
  				<xsl:when test="string-length($Capabilities)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($Capabilities//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should contain an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if>
  				</xsl:otherwise>
      			</xsl:choose> 

     			<xsl:variable name="Capabilities">
				<ctl:request>
			       		<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>post</ctl:method>
					<ctl:header name="Content-type">text/xml</ctl:header>
					<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
								<wcs:GetCapabilities  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
											xmlns:ows="http://www.opengis.net/ows/1.1"
											xmlns:wcs="http://www.opengis.net/wcs/2.0"
											service="WCS" version="2.a">
									<ows:AcceptVersions>
										<ows:Version>2.0</ows:Version>
									</ows:AcceptVersions>
								</wcs:GetCapabilities>]]></ctl:body>
           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
	        				</ctlp:schemas>
           				</ctlp:XMLValidatingParser>
        			</ctl:request>
      			</xsl:variable>
      			<xsl:choose>
  				<xsl:when test="string-length($Capabilities)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($Capabilities//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should contain an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if>
  				</xsl:otherwise>
      			</xsl:choose> 

     			<xsl:variable name="Capabilities">
				<ctl:request>
			       		<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>post</ctl:method>
					<ctl:header name="Content-type">text/xml</ctl:header>
					<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
								<wcs:GetCapabilities  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
											xmlns:ows="http://www.opengis.net/ows/1.1"
											xmlns:wcs="http://www.opengis.net/wcs/2.0"
											service="WCS" version="2.0">
									<ows:AcceptVersions>
										<ows:Version>2.0</ows:Version>
									</ows:AcceptVersions>
								</wcs:GetCapabilities>]]></ctl:body>
           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
	        				</ctlp:schemas>
           				</ctlp:XMLValidatingParser>
        			</ctl:request>
      			</xsl:variable>
      			<xsl:choose>
  				<xsl:when test="string-length($Capabilities)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($Capabilities//wcs:Capabilities)">
        			   		<ctl:message>[FAILURE] The result should contain a wcs:Capabilities.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if>
  				</xsl:otherwise>
      			</xsl:choose> 
      			

       			<xsl:variable name="DescribeCoverage">
            			<ctl:request>
               				<ctl:url>
                  				<xsl:value-of select="$url"/>
               				</ctl:url>
               				<ctl:method>post</ctl:method>
               				<ctl:header name="Content-type">application/x-www-form-urlencoded</ctl:header>
	      				<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
							<wcs:DescribeCoverage  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
    								xmlns:wcs='http://www.opengis.net/wcs/2.0'
    								xmlns:gml='http://www.opengis.net/gml/3.2'
    								xsi:schemaLocation='http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd'
    								service="WCS" version="1.9">
    								<wcs:CoverageId>]]><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/><![CDATA[</wcs:CoverageId></wcs:DescribeCoverage>]]>
    					</ctl:body>

           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
	        				</ctlp:schemas>
             				</ctlp:XMLValidatingParser>

         			</ctl:request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($DescribeCoverage//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should  be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> 
  				</xsl:otherwise>
      			</xsl:choose>     
       			<xsl:variable name="DescribeCoverage">
            			<ctl:request>
               				<ctl:url>
                  				<xsl:value-of select="$url"/>
               				</ctl:url>
               				<ctl:method>post</ctl:method>
               				<ctl:header name="Content-type">application/x-www-form-urlencoded</ctl:header>
	      				<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
							<wcs:DescribeCoverage  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
    								xmlns:wcs='http://www.opengis.net/wcs/2.0'
    								xmlns:gml='http://www.opengis.net/gml/3.2'
    								xsi:schemaLocation='http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd'
    								service="WCS" version="2">
    								<wcs:CoverageId>]]><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/><![CDATA[</wcs:CoverageId></wcs:DescribeCoverage>]]>
    					</ctl:body>

           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
	        				</ctlp:schemas>
             				</ctlp:XMLValidatingParser>

         			</ctl:request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($DescribeCoverage//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> 
  				</xsl:otherwise>
      			</xsl:choose>    
       			<xsl:variable name="DescribeCoverage">
            			<ctl:request>
               				<ctl:url>
                  				<xsl:value-of select="$url"/>
               				</ctl:url>
               				<ctl:method>post</ctl:method>
               				<ctl:header name="Content-type">application/x-www-form-urlencoded</ctl:header>
	      				<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
							<wcs:DescribeCoverage  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
    								xmlns:wcs='http://www.opengis.net/wcs/2.0'
    								xmlns:gml='http://www.opengis.net/gml/3.2'
    								xsi:schemaLocation='http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd'
    								service="WCS" version="2.0">
    								<wcs:CoverageId>]]><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/><![CDATA[</wcs:CoverageId></wcs:DescribeCoverage>]]>
    					</ctl:body>

           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
	        				</ctlp:schemas>
             				</ctlp:XMLValidatingParser>

         			</ctl:request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="not(empty($DescribeCoverage//ows:ExceptionReport))">
        			   		<ctl:message>[FAILURE] The result should not be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> 
  				</xsl:otherwise>
      			</xsl:choose>     
      			
 			<xsl:choose>
				<xsl:when test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/GMLCOV/1.0/conf/gml-coverage')">
     			
					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:header name="Content-type">application/x-www-form-urlencoded</ctl:header>
							<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
								<wcs:GetCoverage xmlns:wcs="http://www.opengis.net/wcs/2.0"
									xmlns:gml="http://www.opengis.net/gml/3.2"
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd"
									service="WCS" version="2.0">
									<wcs:CoverageId>]]><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/><![CDATA[</wcs:CoverageId></wcs:GetCoverage>]]>
							</ctl:body>

							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>

						</ctl:request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="not(empty($GetCoverage//ows:ExceptionReport))">
								<ctl:message>[FAILURE] The result should not be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>  

					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:header name="Content-type">application/x-www-form-urlencoded</ctl:header>
							<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
								<wcs:GetCoverage xmlns:wcs="http://www.opengis.net/wcs/2.0"
									xmlns:gml="http://www.opengis.net/gml/3.2"
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd"
									service="WCS" version="0">
									<wcs:CoverageId>]]><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/><![CDATA[</wcs:CoverageId></wcs:GetCoverage>]]>
							</ctl:body>

							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>

						</ctl:request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="empty($GetCoverage//ows:ExceptionReport)">
								<ctl:message>[FAILURE] The result should be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>        			
					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>post</ctl:method>
							<ctl:header name="Content-type">application/x-www-form-urlencoded</ctl:header>
							<ctl:body><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
								<wcs:GetCoverage xmlns:wcs="http://www.opengis.net/wcs/2.0"
									xmlns:gml="http://www.opengis.net/gml/3.2"
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd"
									service="WSC" version="a">
									<wcs:CoverageId>]]><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/><![CDATA[</wcs:CoverageId></wcs:GetCoverage>]]>
							</ctl:body>

							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>

						</ctl:request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="empty($GetCoverage//ows:ExceptionReport)">
								<ctl:message>[FAILURE] The result should be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>       		
				</xsl:when>
				<xsl:otherwise>
					<ctl:message> [MESSAGE] the server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose> 					
    		</ctl:code>
  	</ctl:test>   
 
	<ctl:test name="wcs2:get-kvp-core-req12">
    		<ctl:param name="url"/>
    		<ctl:assertion>req12:For all WCS request types, test the request version parameter has a fixed value of '2.0' by GetKVP.</ctl:assertion>
    		<ctl:code>


     			<xsl:variable name="Capabilities">
				<ctl:request>
          				<ctl:url>
            					<xsl:value-of select="$url"/>
          				</ctl:url>
          				<ctl:method>get</ctl:method>
          				<ctl:param name="SERVICE">WCS</ctl:param>
          				<ctl:param name="VERSION">2.0</ctl:param>
          				<ctl:param name="REQUEST">GetCapabilities</ctl:param>
           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
	        				</ctlp:schemas>
           				</ctlp:XMLValidatingParser>
        			</ctl:request>
      			</xsl:variable>
      			<xsl:choose>
  				<xsl:when test="string-length($Capabilities)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($Capabilities//wcs:Capabilities)">
        			   		<ctl:message>[FAILURE] The result should contain a wcs:Capabilities.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if>
  				</xsl:otherwise>
      			</xsl:choose> 

  
       			<xsl:variable name="DescribeCoverage">
            			<ctl:request>
               				<ctl:url>
                  				<xsl:value-of select="$url"/>
               				</ctl:url>
               				<ctl:method>get</ctl:method>
           				<ctl:param name="service">WCS</ctl:param>
           				<ctl:param name="VERSION">2.a</ctl:param>           
           				<ctl:param name="request">DescribeCoverage</ctl:param>  
            				<ctl:param name="CoverageId"><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/></ctl:param>             				
 

           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
	        				</ctlp:schemas>
             				</ctlp:XMLValidatingParser>

         			</ctl:request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($DescribeCoverage//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should  be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> 
  				</xsl:otherwise>
      			</xsl:choose>     
       			<xsl:variable name="DescribeCoverage">
            			<ctl:request>
               				<ctl:url>
                  				<xsl:value-of select="$url"/>
               				</ctl:url>
               				<ctl:method>get</ctl:method>
           				<ctl:param name="service">WCS</ctl:param>
           				<ctl:param name="VERSION">a</ctl:param>           
           				<ctl:param name="request">DescribeCoverage</ctl:param>  
            				<ctl:param name="CoverageId"><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/></ctl:param>             				
 

           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
	        				</ctlp:schemas>
             				</ctlp:XMLValidatingParser>

         			</ctl:request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($DescribeCoverage//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> 
  				</xsl:otherwise>
      			</xsl:choose>    
       			<xsl:variable name="DescribeCoverage">
            			<ctl:request>
               				<ctl:url>
                  				<xsl:value-of select="$url"/>
               				</ctl:url>
               				<ctl:method>get</ctl:method>
           				<ctl:param name="service">WCS</ctl:param>
           				<ctl:param name="VERSION">2.0</ctl:param>           
           				<ctl:param name="request">DescribeCoverage</ctl:param>  
            				<ctl:param name="CoverageId"><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/></ctl:param>             				
 
           				<ctlp:XMLValidatingParser>
	        				<ctlp:schemas>
                        				<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
	        				</ctlp:schemas>
             				</ctlp:XMLValidatingParser>

         			</ctl:request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="not(empty($DescribeCoverage//ows:ExceptionReport))">
        			   		<ctl:message>[FAILURE] The result should not be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> 
  				</xsl:otherwise>
      			</xsl:choose>         			
 			<xsl:choose>
				<xsl:when test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/GMLCOV/1.0/conf/gml-coverage')">

					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">2.0</ctl:param>           
							<ctl:param name="request">GetCoverage</ctl:param>  
							<ctl:param name="CoverageId"><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/></ctl:param>             				

							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>

						</ctl:request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="not(empty($GetCoverage//ows:ExceptionReport))">
								<ctl:message>[FAILURE] The result should not be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>  

					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">.</ctl:param>           
							<ctl:param name="request">GetCoverage</ctl:param>  
							<ctl:param name="CoverageId"><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/></ctl:param>             				


							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>

						</ctl:request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="empty($GetCoverage//ows:ExceptionReport)">
								<ctl:message>[FAILURE] The result should be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>        			
					<xsl:variable name="GetCoverage">
						<ctl:request>
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url>
							<ctl:method>get</ctl:method>
							<ctl:param name="service">WCS</ctl:param>
							<ctl:param name="VERSION">a</ctl:param>           
							<ctl:param name="request">GetCoverage</ctl:param>  
							<ctl:param name="CoverageId"><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId'][1]"/></ctl:param>             				
							<ctlp:XMLValidatingParser>
								<ctlp:schemas>
									<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
								</ctlp:schemas>
							</ctlp:XMLValidatingParser>
						</ctl:request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="empty($GetCoverage//ows:ExceptionReport)">
								<ctl:message>[FAILURE] The result should be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>
		
				</xsl:when>
				<xsl:otherwise>
					<ctl:message> [MESSAGE] The server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose> 					
    		</ctl:code>
  	</ctl:test> 
	<ctl:test name="wcs2:soap-core-req12">
	    	<ctl:param name="Capabilities"/>
	    	<ctl:param name="url"/>
	    	<ctl:assertion>req12:For all WCS request types, test the request version parameter has a fixed value of '2.0' by SOAP.</ctl:assertion>
    		<ctl:code>

     			<xsl:variable name="Capabilities">
				<ctl:soap-request version="1.2" charset="UTF-8">
			       		<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url><ctl:body>
								<wcs:GetCapabilities  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
											xmlns:ows="http://www.opengis.net/ows/1.1"
											xmlns:wcs="http://www.opengis.net/wcs/2.0"
											service="WCS" version="2.0">
									<ows:AcceptVersions>
										<ows:Version>2.0</ows:Version>
									</ows:AcceptVersions>
								</wcs:GetCapabilities></ctl:body>
					<ctlp:SOAPParser return="content">						
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctlp:SOAPParser>		
        			</ctl:soap-request>
      			</xsl:variable>
      			<xsl:choose>
  				<xsl:when test="string-length($Capabilities)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($Capabilities//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should contain an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if>
  				</xsl:otherwise>
      			</xsl:choose> 

     			<xsl:variable name="Capabilities">
				<ctl:soap-request version="1.2" charset="UTF-8">
			       		<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url>
					<ctl:method>post</ctl:method>
					<ctl:header name="Content-type">text/xml</ctl:header>
					<ctl:body>
								<wcs:GetCapabilities  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
											xmlns:ows="http://www.opengis.net/ows/1.1"
											xmlns:wcs="http://www.opengis.net/wcs/2.0"
											service="WCS" version="2.a">
									<ows:AcceptVersions>
										<ows:Version>2.0</ows:Version>
									</ows:AcceptVersions>
								</wcs:GetCapabilities></ctl:body>
					<ctlp:SOAPParser return="content">			
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctlp:SOAPParser>	
        			</ctl:soap-request>
      			</xsl:variable>
      			<xsl:choose>
  				<xsl:when test="string-length($Capabilities)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($Capabilities//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should contain an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if>
  				</xsl:otherwise>
      			</xsl:choose> 

     			<xsl:variable name="Capabilities">
				<ctl:soap-request version="1.2" charset="UTF-8">
			       		<ctl:url>
						<xsl:value-of select="$url"/>
					</ctl:url><ctl:body>
								<wcs:GetCapabilities  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
											xmlns:ows="http://www.opengis.net/ows/1.1"
											xmlns:wcs="http://www.opengis.net/wcs/2.0"
											service="WCS" version="2.0">
									<ows:AcceptVersions>
										<ows:Version>2.0</ows:Version>
									</ows:AcceptVersions>
								</wcs:GetCapabilities></ctl:body>
					<ctlp:SOAPParser return="content">			
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="resource">wcs/2.0/wcsGetCapabilities.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctlp:SOAPParser>		
        			</ctl:soap-request>
      			</xsl:variable>
      			<xsl:choose>
  				<xsl:when test="string-length($Capabilities)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($Capabilities//wcs:Capabilities)">
        			   		<ctl:message>[FAILURE] The result should contain a wcs:Capabilities.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if>
  				</xsl:otherwise>
      			</xsl:choose> 
      			

       			<xsl:variable name="DescribeCoverage">
            			<ctl:soap-request version="1.2" charset="UTF-8">
               				<ctl:url>
                  				<xsl:value-of select="$url"/>
               				</ctl:url><ctl:body>
							<wcs:DescribeCoverage  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
    								xmlns:wcs='http://www.opengis.net/wcs/2.0'
    								xmlns:gml='http://www.opengis.net/gml/3.2'
    								xsi:schemaLocation='http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd'
    								service="WCS" version="1.9">
    								<wcs:CoverageId><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/></wcs:CoverageId></wcs:DescribeCoverage>
    					</ctl:body>
					<ctlp:SOAPParser return="content">
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctlp:SOAPParser>
         			</ctl:soap-request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($DescribeCoverage//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should  be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> 
  				</xsl:otherwise>
      			</xsl:choose>     
       			<xsl:variable name="DescribeCoverage">
            			<ctl:soap-request version="1.2" charset="UTF-8">
               				<ctl:url>
                  				<xsl:value-of select="$url"/>
               				</ctl:url><ctl:body>
							<wcs:DescribeCoverage  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
    								xmlns:wcs='http://www.opengis.net/wcs/2.0'
    								xmlns:gml='http://www.opengis.net/gml/3.2'
    								xsi:schemaLocation='http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd'
    								service="WCS" version="2">
    								<wcs:CoverageId><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/></wcs:CoverageId></wcs:DescribeCoverage>
    					</ctl:body>
					<ctlp:SOAPParser return="content">
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctlp:SOAPParser>
         			</ctl:soap-request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="empty($DescribeCoverage//ows:ExceptionReport)">
        			   		<ctl:message>[FAILURE] The result should be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> 
  				</xsl:otherwise>
      			</xsl:choose>     
      			
       			<xsl:variable name="DescribeCoverage">
            			<ctl:soap-request version="1.2" charset="UTF-8">
               				<ctl:url>
                  				<xsl:value-of select="$url"/>
               				</ctl:url><ctl:body>
							<wcs:DescribeCoverage  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
    								xmlns:wcs='http://www.opengis.net/wcs/2.0'
    								xmlns:gml='http://www.opengis.net/gml/3.2'
    								xsi:schemaLocation='http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd'
    								service="WCS" version="2.0">
    								<wcs:CoverageId><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/></wcs:CoverageId></wcs:DescribeCoverage>
    					</ctl:body>
					<ctlp:SOAPParser return="content">
						<ctlp:XMLValidatingParser>
							<ctlp:schemas>
								<ctlp:schema type="resource">wcs/2.0/wcsDescribeCoverage.xsd</ctlp:schema>
							</ctlp:schemas>
						</ctlp:XMLValidatingParser>
					</ctlp:SOAPParser>
         			</ctl:soap-request>
        		</xsl:variable>
    			<xsl:choose>
  				<xsl:when test="string-length($DescribeCoverage)=0">
					<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
					<ctl:fail/>
  				</xsl:when>
  				<xsl:otherwise>
        				<xsl:if test="not(empty($DescribeCoverage//ows:ExceptionReport))">
        			   		<ctl:message>[FAILURE] The result should not be an ows:ExceptionReport.</ctl:message>
        			   		<ctl:fail/>
        				</xsl:if> 
  				</xsl:otherwise>
      			</xsl:choose>           			
 			<xsl:choose>
				<xsl:when test="contains(string-join(($Capabilities//*[local-name()='ServiceIdentification']/*[local-name()='Profile']),' '), 'http://www.opengis.net/spec/GMLCOV/1.0/conf/gml-coverage')">
     			
					<xsl:variable name="GetCoverage">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url><ctl:body>
								<wcs:GetCoverage xmlns:wcs="http://www.opengis.net/wcs/2.0"
									xmlns:gml="http://www.opengis.net/gml/3.2"
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd"
									service="WCS" version="2.0">
									<wcs:CoverageId><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/></wcs:CoverageId></wcs:GetCoverage>
							</ctl:body>
							<ctlp:SOAPParser return="content">
								<ctlp:XMLValidatingParser>
									<ctlp:schemas>
										<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
									</ctlp:schemas>
								</ctlp:XMLValidatingParser>
							</ctlp:SOAPParser>
						</ctl:soap-request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="not(empty($GetCoverage//ows:ExceptionReport))">
								<ctl:message>[FAILURE] The result should not be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>  

					<xsl:variable name="GetCoverage">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url><ctl:body>
								<wcs:GetCoverage xmlns:wcs="http://www.opengis.net/wcs/2.0"
									xmlns:gml="http://www.opengis.net/gml/3.2"
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd"
									service="WCS" version="0">
									<wcs:CoverageId><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/></wcs:CoverageId></wcs:GetCoverage>
							</ctl:body>
							<ctlp:SOAPParser return="content">
								<ctlp:XMLValidatingParser>
									<ctlp:schemas>
										<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
									</ctlp:schemas>
								</ctlp:XMLValidatingParser>
							</ctlp:SOAPParser>
						</ctl:soap-request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="empty($GetCoverage//ows:ExceptionReport)">
								<ctl:message>[FAILURE] The result should be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>        			
					<xsl:variable name="GetCoverage">
						<ctl:soap-request version="1.2" charset="UTF-8">
							<ctl:url>
								<xsl:value-of select="$url"/>
							</ctl:url><ctl:body>
								<wcs:GetCoverage xmlns:wcs="http://www.opengis.net/wcs/2.0"
									xmlns:gml="http://www.opengis.net/gml/3.2"
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
									xsi:schemaLocation="http://www.opengis.net/wcs/2.0 ../../wcsAll.xsd"
									service="WSC" version="a">
									<wcs:CoverageId><xsl:value-of select="$Capabilities//*[local-name()='CoverageSummary'][1]/*[local-name()='CoverageId']"/></wcs:CoverageId></wcs:GetCoverage>
							</ctl:body>
							<ctlp:SOAPParser return="content">
								<ctlp:XMLValidatingParser>
									<ctlp:schemas>
										<ctlp:schema type="resource">wcs/2.0/wcsGetCoverage.xsd</ctlp:schema>
									</ctlp:schemas>
								</ctlp:XMLValidatingParser>
							</ctlp:SOAPParser>
						</ctl:soap-request>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="string-length($GetCoverage)=0">
							<ctl:message>[FAILURE] Parsing or validation errors.</ctl:message>
							<ctl:fail/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:if test="empty($GetCoverage//ows:ExceptionReport)">
								<ctl:message>[FAILURE] The result should be an ows:ExceptionReport.</ctl:message>
								<ctl:fail/>
							</xsl:if>
						</xsl:otherwise>
					</xsl:choose>       		
				</xsl:when>
				<xsl:otherwise>
					<ctl:message> [MESSAGE] the server does not support the gml coverage.</ctl:message>
				</xsl:otherwise>
			</xsl:choose>
	    	</ctl:code>
	 </ctl:test>  
  
</ctl:package>